{
  "api/CodeFactory.ActionException.html": {
    "href": "api/CodeFactory.ActionException.html",
    "title": "Class ActionException | CodeFactory Guidance",
    "keywords": "Class ActionException Exception that is raised when an error occured that kept a code factory command from finishing execution. Inheritance Object Exception CodeFactoryException ActionException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : CodeFactory Assembly : CodeFactory.dll Syntax public class ActionException : CodeFactoryException, ISerializable, _Exception Constructors | Improve this Doc View Source ActionException(String) Creates a command exception. Declaration public ActionException(string message) Parameters Type Name Description String message The error message to be captured by the exception | Improve this Doc View Source ActionException(String, Exception) Creates a command exception. Declaration public ActionException(string message, Exception innerException) Parameters Type Name Description String message The error message to be captured by the exception Exception innerException The inner exception that occurred and to be added to this exception. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/CodeFactory.CodeFactoryException.html": {
    "href": "api/CodeFactory.CodeFactoryException.html",
    "title": "Class CodeFactoryException | CodeFactory Guidance",
    "keywords": "Class CodeFactoryException Base exception class all code factory generated exceptions are based on. Inheritance Object Exception CodeFactoryException ActionException DocumentException ModelException<TModelTypes> ModelLoadException VisualStudioException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : CodeFactory Assembly : CodeFactory.dll Syntax public class CodeFactoryException : Exception, ISerializable, _Exception Constructors | Improve this Doc View Source CodeFactoryException() Creates a general code factory exception. Declaration public CodeFactoryException() | Improve this Doc View Source CodeFactoryException(String) Creates a general code factory exception. Declaration public CodeFactoryException(string message) Parameters Type Name Description String message The error message to be captured by the exception | Improve this Doc View Source CodeFactoryException(String, Exception) Creates a model exception. Declaration public CodeFactoryException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException The inner exception that occurred and to be added to this exception. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/CodeFactory.CodeFactoryMessages.html": {
    "href": "api/CodeFactory.CodeFactoryMessages.html",
    "title": "Class CodeFactoryMessages | CodeFactory Guidance",
    "keywords": "Class CodeFactoryMessages A strongly-typed resource class, for looking up localized strings, etc. Inheritance Object CodeFactoryMessages Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory Assembly : CodeFactory.dll Syntax public class CodeFactoryMessages Properties | Improve this Doc View Source BaseDocumentException Looks up a localized string similar to An internal error occured could not complete the document operation.. Declaration public static string BaseDocumentException { get; } Property Value Type Description String | Improve this Doc View Source CodeFactoryError Looks up a localized string similar to An unhandled error occured and the current code factory operation failed to complete. Please try again.. Declaration public static string CodeFactoryError { get; } Property Value Type Description String | Improve this Doc View Source Culture Overrides the current thread's CurrentUICulture property for all resource lookups using this strongly typed resource class. Declaration public static CultureInfo Culture { get; set; } Property Value Type Description CultureInfo | Improve this Doc View Source LoadErrorsUnhandledError Looks up a localized string similar to An internal error occured while loading the errors, was not able to retrieve the error messages.. Declaration public static string LoadErrorsUnhandledError { get; } Property Value Type Description String | Improve this Doc View Source ModelLoadError Looks up a localized string similar to An error occured while loading the model. Review the model to confirm that the model was able to complete loading. . Declaration public static string ModelLoadError { get; } Property Value Type Description String | Improve this Doc View Source ResourceManager Returns the cached ResourceManager instance used by this class. Declaration public static ResourceManager ResourceManager { get; } Property Value Type Description ResourceManager"
  },
  "api/CodeFactory.Document.DocumentException.html": {
    "href": "api/CodeFactory.Document.DocumentException.html",
    "title": "Class DocumentException | CodeFactory Guidance",
    "keywords": "Class DocumentException Exception management class that host information about exceptions that occured while managing documents in code factory. Inheritance Object Exception CodeFactoryException DocumentException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : CodeFactory.Document Assembly : CodeFactory.dll Syntax public class DocumentException : CodeFactoryException, ISerializable, _Exception Constructors | Improve this Doc View Source DocumentException() Creates a document exception. Declaration public DocumentException() | Improve this Doc View Source DocumentException(String) Creates a document exception. Declaration public DocumentException(string message) Parameters Type Name Description String message The error message to be captured by the exception | Improve this Doc View Source DocumentException(String, Exception) Creates a document exception. Declaration public DocumentException(string message, Exception innerException) Parameters Type Name Description String message The error message to be captured by the exception Exception innerException The inner exception that occurred and to be added to this exception. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/CodeFactory.Document.DocumentLine.html": {
    "href": "api/CodeFactory.Document.DocumentLine.html",
    "title": "Class DocumentLine | CodeFactory Guidance",
    "keywords": "Class DocumentLine Data class that holds the document line information. Inheritance Object DocumentLine Implements IDocumentLine Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.Document Assembly : CodeFactory.dll Syntax public class DocumentLine : IDocumentLine Constructors | Improve this Doc View Source DocumentLine(Int64, Int32, String) Constructor that creates an instance of the DocumentLine Declaration protected DocumentLine(long number, int length, string content) Parameters Type Name Description Int64 number The line number within the document. Int32 length The number of characters that are in the line. String content The content of the line. Properties | Improve this Doc View Source Content The content of the line. Declaration public string Content { get; } Property Value Type Description String | Improve this Doc View Source Length The number of characters that are in the line. Declaration public int Length { get; } Property Value Type Description Int32 | Improve this Doc View Source Number The line number within the document. Declaration public long Number { get; } Property Value Type Description Int64 Methods | Improve this Doc View Source Init(Int64, Int32, String) Creates an immutable instance of the DocumentLine Declaration public static DocumentLine Init(long number, int length, string content) Parameters Type Name Description Int64 number The line number within the document. Int32 length The number of characters that are in the line. String content The content of the line. Returns Type Description DocumentLine Implements IDocumentLine"
  },
  "api/CodeFactory.Document.DocumentLocation.html": {
    "href": "api/CodeFactory.Document.DocumentLocation.html",
    "title": "Class DocumentLocation | CodeFactory Guidance",
    "keywords": "Class DocumentLocation Document location data class, used to determine a point within a document. This is used for gathering and setting model information. Inheritance Object DocumentLocation Implements IDocumentLocation Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.Document Assembly : CodeFactory.dll Syntax public class DocumentLocation : IDocumentLocation Constructors | Improve this Doc View Source DocumentLocation(Int32, Int32) Initializes a new instance of a DocumentLocation data class. Declaration protected DocumentLocation(int lineNumber, int characterPosition) Parameters Type Name Description Int32 lineNumber The line number within the file. Int32 characterPosition The character position within the line. Properties | Improve this Doc View Source CharacterPosition The character position within the line. Declaration public int CharacterPosition { get; } Property Value Type Description Int32 | Improve this Doc View Source LineNumber The line number within the file. Declaration public int LineNumber { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Init(Int32, Int32) Returns an Immutable instance of data class that implements IDocumentLocation contract definition. Declaration public static DocumentLocation Init(int lineNumber, int characterPosition) Parameters Type Name Description Int32 lineNumber The line number within the file. Int32 characterPosition The character position within the line. Returns Type Description DocumentLocation Immutable instance of the document location. Implements IDocumentLocation"
  },
  "api/CodeFactory.Document.html": {
    "href": "api/CodeFactory.Document.html",
    "title": "Namespace CodeFactory.Document | CodeFactory Guidance",
    "keywords": "Namespace CodeFactory.Document Classes DocumentException Exception management class that host information about exceptions that occured while managing documents in code factory. DocumentLine Data class that holds the document line information. DocumentLocation Document location data class, used to determine a point within a document. This is used for gathering and setting model information. Interfaces IDocumentContent The contents of a document loaded from code factory. IDocumentLine Metadata about a line from a document that has been returned from code factory. IDocumentLocation Definition of the information to identify a location within a document."
  },
  "api/CodeFactory.Document.IDocumentContent.html": {
    "href": "api/CodeFactory.Document.IDocumentContent.html",
    "title": "Interface IDocumentContent | CodeFactory Guidance",
    "keywords": "Interface IDocumentContent The contents of a document loaded from code factory. Inherited Members IReadOnlyList<String>.Item[Int32] IReadOnlyCollection<String>.Count IEnumerable<String>.GetEnumerator() Namespace : CodeFactory.Document Assembly : CodeFactory.dll Syntax public interface IDocumentContent : IReadOnlyList<string>, IReadOnlyCollection<string>, IEnumerable<string>, IEnumerable"
  },
  "api/CodeFactory.Document.IDocumentLine.html": {
    "href": "api/CodeFactory.Document.IDocumentLine.html",
    "title": "Interface IDocumentLine | CodeFactory Guidance",
    "keywords": "Interface IDocumentLine Metadata about a line from a document that has been returned from code factory. Namespace : CodeFactory.Document Assembly : CodeFactory.dll Syntax public interface IDocumentLine Properties | Improve this Doc View Source Content The content of the line. Declaration string Content { get; } Property Value Type Description String | Improve this Doc View Source Length The number of characters that are in the line. Declaration int Length { get; } Property Value Type Description Int32 | Improve this Doc View Source Number The line number within the document. Declaration long Number { get; } Property Value Type Description Int64"
  },
  "api/CodeFactory.Document.IDocumentLocation.html": {
    "href": "api/CodeFactory.Document.IDocumentLocation.html",
    "title": "Interface IDocumentLocation | CodeFactory Guidance",
    "keywords": "Interface IDocumentLocation Definition of the information to identify a location within a document. Namespace : CodeFactory.Document Assembly : CodeFactory.dll Syntax public interface IDocumentLocation Properties | Improve this Doc View Source CharacterPosition The character position within the line. Declaration int CharacterPosition { get; } Property Value Type Description Int32 | Improve this Doc View Source LineNumber The line number within the file. Declaration int LineNumber { get; } Property Value Type Description Int32"
  },
  "api/CodeFactory.DotNet.AttributeParameterKind.html": {
    "href": "api/CodeFactory.DotNet.AttributeParameterKind.html",
    "title": "Enum AttributeParameterKind | CodeFactory Guidance",
    "keywords": "Enum AttributeParameterKind Enumeration that determines the type of attribute parameter data that is being returned. Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public enum AttributeParameterKind Fields Name Description Array Is an array of multiple parameter values. Enum Is an enumeration item. Type Is a target named type. Unknown The return data is unknown. Value Is a simple value."
  },
  "api/CodeFactory.DotNet.CSharp.CsAttribute.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsAttribute.html",
    "title": "Class CsAttribute | CodeFactory Guidance",
    "keywords": "Class CsAttribute Data model that represents an attribute. Inheritance Object CsModel CsAttribute Implements ICsAttribute ICsModel IDotNetAttribute IDotNetModel IModelStatus ISourceFiles IParent IParent Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.IDotNetModel.ModelType CsModel.LookupModel(String) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public abstract class CsAttribute : CsModel, ICsAttribute, ICsModel, IDotNetAttribute, IDotNetModel, IModelStatus, ISourceFiles, IParent, IParent Constructors | Improve this Doc View Source CsAttribute(Boolean, Boolean, Boolean, SourceCodeType, IReadOnlyList<String>, Boolean, String, IReadOnlyList<CsAttributeParameter>, CsType, String, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsAttribute Declaration protected CsAttribute(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<string> sourceFiles, bool hasParameters, string parentPath, IReadOnlyList<CsAttributeParameter> parameters, CsType type, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description Boolean isLoaded Flag that determines if the model was loaded. Boolean hasErrors Flag that determine if errors were found creating the model. Boolean loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList < String > sourceFiles The list of source files the attribute is defined in. Boolean hasParameters Flag that determines if the attribute has parameters. String parentPath The fully qualified lookup path to the parent model for this attribute. IReadOnlyList < CsAttributeParameter > parameters The list of parameters assigned to the attribute. CsType type The target type of the attribute. String sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore < ICsModel > modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList < ModelLoadException > modelErrors Optional the error that occured while creating the model. Properties | Improve this Doc View Source HasParameters Flag that determines if the attribute has parameters Declaration public bool HasParameters { get; } Property Value Type Description Boolean | Improve this Doc View Source Parameters Enumeration of the parameters that are assigned to the attribute. This will be an empty list if HasParameters is false. Declaration public IReadOnlyList<CsAttributeParameter> Parameters { get; } Property Value Type Description IReadOnlyList < CsAttributeParameter > | Improve this Doc View Source Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel | Improve this Doc View Source SourceFiles The source file or files in which the model was loaded from. This will be an empty enumeration if the source models were loaded from metadata only. Declaration public IReadOnlyList<string> SourceFiles { get; } Property Value Type Description IReadOnlyList < String > | Improve this Doc View Source Type The type information for the attribute itself. Declaration public CsType Type { get; } Property Value Type Description CsType Methods | Improve this Doc View Source AddAfterAsync(String) Adds the source code directly after the definition of the CsAttribute in the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the CsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddAfterAsync(String, String) Adds the source code directly after the definition of the CsAttribute in the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the CsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String) Adds the source code directly before the definition of the ICsAttribute in the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String, String) Adds the source code directly before the definition of the ICsAttribute in the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync() Deletes the definition of the attribute from the source document. Declaration public abstract Task<CsSource> DeleteAsync() Returns Type Description Task < CsSource > A newly loaded copy of the CsSource model after the attribute has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync(String) Deletes the definition of the attribute from the source document. Declaration public abstract Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The source document that the attribute is to be removed from. Returns Type Description Task < CsSource > A newly loaded copy of the CsSource model after the attribute has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source GetModel(String) Gets a CsModel from the currently loaded source code. Declaration public CsModel GetModel(string lookupPath) Parameters Type Name Description String lookupPath The fully qualified path to the model to be loaded. Returns Type Description CsModel The loaded model or null if the model could not be found. | Improve this Doc View Source GetSourceLocationAsync() Gets the starting and ending locations within the document where the attribute is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task < ISourceLocation > The source location for the attribute. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source GetSourceLocationAsync(String) Gets the starting and ending locations within the document where the attribute is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The fully qualified path to the document that has the attribute defined in. Returns Type Description Task < ISourceLocation > The source location for the attribute. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source ReplaceAsync(String) Replaces the current attribute with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the CsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source ReplaceAsync(String, String) Replaces the current attribute with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the CsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Explicit Interface Implementations | Improve this Doc View Source IDotNetAttribute.Parameters Enumeration of the parameters that are assigned to the attribute. This will be an empty list if HasParameters is false. Declaration IReadOnlyList<IDotNetAttributeParameter> IDotNetAttribute.Parameters { get; } Returns Type Description IReadOnlyList < IDotNetAttributeParameter > | Improve this Doc View Source IDotNetAttribute.Type The type information for the attribute itself. Declaration IDotNetType IDotNetAttribute.Type { get; } Returns Type Description IDotNetType | Improve this Doc View Source IParent.Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration IDotNetModel IParent.Parent { get; } Returns Type Description IDotNetModel Implements ICsAttribute ICsModel IDotNetAttribute IDotNetModel IModelStatus ISourceFiles IParent IParent Extension Methods DotNetModelExtensions.FormatCSharpAttributeSignatureSyntax(IDotNetAttribute) CSharpModelExtensions.ToModel<T>(CsModel) CsModelExtensions.FormatCSharpAttributeSignatureSyntax(CsAttribute)"
  },
  "api/CodeFactory.DotNet.CSharp.CsAttributeParameter.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsAttributeParameter.html",
    "title": "Class CsAttributeParameter | CodeFactory Guidance",
    "keywords": "Class CsAttributeParameter Data model that represents a attribute parameter. Inheritance Object CsModel CsAttributeParameter Implements ICsAttributeParameter ICsModel IDotNetAttributeParameter IDotNetModel IModelStatus Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.IDotNetModel.ModelType CsModel.LookupModel(String) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public abstract class CsAttributeParameter : CsModel, ICsAttributeParameter, ICsModel, IDotNetAttributeParameter, IDotNetModel, IModelStatus Constructors | Improve this Doc View Source CsAttributeParameter(Boolean, Boolean, Boolean, SourceCodeType, Boolean, String, CsAttributeParameterValue, String, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsAttributeParameter Declaration protected CsAttributeParameter(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, bool hasNamedParameter, string name, CsAttributeParameterValue value, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description Boolean isLoaded Flag that determines if the model was loaded. Boolean hasErrors Flag that determine if errors were found creating the model. Boolean loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. Boolean hasNamedParameter Flag that determines if the attribute parameter is a named parameter. String name The name of the parameter, should be null if not named. CsAttributeParameterValue value The value assigned to the parameter. String sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore < ICsModel > modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList < ModelLoadException > modelErrors Optional the error that occured while creating the model. Properties | Improve this Doc View Source HasNamedParameter Flag that determines if the attribute parameter is a named value, or just part of the attributes constructor. Declaration public bool HasNamedParameter { get; } Property Value Type Description Boolean | Improve this Doc View Source Name The name of the parameter, if this is not a named parameter then it will be set to null Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source Value The value that was assigned to the parameter. Declaration public CsAttributeParameterValue Value { get; } Property Value Type Description CsAttributeParameterValue Explicit Interface Implementations | Improve this Doc View Source IDotNetAttributeParameter.Value The value that was assigned to the parameter. Declaration IDotNetAttributeParameterValue IDotNetAttributeParameter.Value { get; } Returns Type Description IDotNetAttributeParameterValue Implements ICsAttributeParameter ICsModel IDotNetAttributeParameter IDotNetModel IModelStatus Extension Methods CSharpModelExtensions.ToModel<T>(CsModel)"
  },
  "api/CodeFactory.DotNet.CSharp.CsAttributeParameterValue.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsAttributeParameterValue.html",
    "title": "Class CsAttributeParameterValue | CodeFactory Guidance",
    "keywords": "Class CsAttributeParameterValue Data class that represents an attributes parameter value. Inheritance Object CsModel CsAttributeParameterValue Implements ICsAttributeParameterValue ICsModel IDotNetAttributeParameterValue IDotNetModel IModelStatus Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.IDotNetModel.ModelType CsModel.LookupModel(String) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public abstract class CsAttributeParameterValue : CsModel, ICsAttributeParameterValue, ICsModel, IDotNetAttributeParameterValue, IDotNetModel, IModelStatus Constructors | Improve this Doc View Source CsAttributeParameterValue(Boolean, Boolean, Boolean, SourceCodeType, AttributeParameterKind, String, String, CsType, IReadOnlyList<CsAttributeParameterValue>, String, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsAttributeParameterValue Declaration protected CsAttributeParameterValue(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, AttributeParameterKind parameterKind, string value, string enumValue, CsType typeValue, IReadOnlyList<CsAttributeParameterValue> values, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description Boolean isLoaded Flag that determines if the model was loaded. Boolean hasErrors Flag that determine if errors were found creating the model. Boolean loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. AttributeParameterKind parameterKind The kind of attribute parameter. String value The value of the attribute parameter. String enumValue The value of the enumeration if the parameter is an enumeration. CsType typeValue The type if the parameter is a single value. IReadOnlyList < CsAttributeParameterValue > values The list of values if the parameter has more then one value. String sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore < ICsModel > modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList < ModelLoadException > modelErrors Optional the error that occured while creating the model. Properties | Improve this Doc View Source EnumValue The enum value provides the name of the enumeration value that was provided. This will be populated if the property ParameterKind is set to 'Enum' Declaration public string EnumValue { get; } Property Value Type Description String | Improve this Doc View Source ParameterKind Determines the kind of parameter that has been returned. Declaration public AttributeParameterKind ParameterKind { get; } Property Value Type Description AttributeParameterKind | Improve this Doc View Source TypeValue The type definition of the parameter that was passed. This will be populated if the property ParameterKind is set to 'Type' Declaration public CsType TypeValue { get; } Property Value Type Description CsType | Improve this Doc View Source Value Gets the raw value assigned to the parameter. This will be populated if the property ParameterKind is not set to 'Array' Declaration public string Value { get; } Property Value Type Description String | Improve this Doc View Source Values Gets an enumeration of all the parameter values that were assigned to the attribute parameter. This will be populated if the property ParameterKind is set to 'Array' Declaration public IReadOnlyList<CsAttributeParameterValue> Values { get; } Property Value Type Description IReadOnlyList < CsAttributeParameterValue > Explicit Interface Implementations | Improve this Doc View Source IDotNetAttributeParameterValue.TypeValue The type definition of the parameter that was passed. This will be populated if the property ParameterKind is set to 'Type' Declaration IDotNetType IDotNetAttributeParameterValue.TypeValue { get; } Returns Type Description IDotNetType | Improve this Doc View Source IDotNetAttributeParameterValue.Values Gets an enumeration of all the parameter values that were assigned to the attribute parameter. This will be populated if the property ParameterKind is set to 'Array' Declaration IReadOnlyList<IDotNetAttributeParameterValue> IDotNetAttributeParameterValue.Values { get; } Returns Type Description IReadOnlyList < IDotNetAttributeParameterValue > Implements ICsAttributeParameterValue ICsModel IDotNetAttributeParameterValue IDotNetModel IModelStatus Extension Methods DotNetModelExtensions.FormatCSharpAttributeParameterValueSignatureSyntax(IDotNetAttributeParameterValue) CSharpModelExtensions.ToModel<T>(CsModel) CsModelExtensions.FormatCSharpAttributeParameterValueSignatureSyntax(CsAttributeParameterValue)"
  },
  "api/CodeFactory.DotNet.CSharp.CsClass.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsClass.html",
    "title": "Class CsClass | CodeFactory Guidance",
    "keywords": "Class CsClass Data model that represents a class implementation. Inheritance Object CsModel CsContainer CsClass Implements ICsClass ICsContainer ICsModel ICsAttributes ICsGeneric IParent IDotNetClass IDotNetContainer IDotNetModel IModelStatus ISourceFiles IDotNetAttributes IDocumentation IDotNetGeneric IParent ILookup Inherited Members CsContainer.HasAttributes CsContainer.Attributes CsContainer.IDotNetAttributes.Attributes CsContainer.IsGeneric CsContainer.GenericParameters CsContainer.GenericTypes CsContainer.IDotNetGeneric.GenericParameters CsContainer.HasStrongTypesInGenerics CsContainer.IDotNetGeneric.GenericTypes CsContainer.SourceFiles CsContainer.HasDocumentation CsContainer.Documentation CsContainer.IParent.Parent CsContainer.LookupPath CsContainer.IDotNetContainer.ContainerType CsContainer.Security CsContainer.InheritedInterfaces CsContainer.Members CsContainer.Methods CsContainer.Properties CsContainer.Events CsContainer.GetBodySyntaxAsync() CsContainer.AddBeforeAsync(String, String) CsContainer.AddBeforeAsync(String) CsContainer.AddAfterAsync(String, String) CsContainer.AddAfterAsync(String) CsContainer.AddToBeginningAsync(String, String) CsContainer.AddToBeginningAsync(String) CsContainer.AddToEndAsync(String, String) CsContainer.AddToEndAsync(String) CsContainer.DeleteAsync(String) CsContainer.DeleteAsync() CsContainer.GetSourceLocationAsync(String) CsContainer.GetSourceLocationAsync() CsContainer.GetBodySourceLocationAsync(String) CsContainer.GetBodySourceLocationAsync() CsContainer.ReplaceAsync(String, String) CsContainer.ReplaceAsync(String) CsContainer.GetModel(String) CsContainer.ContainerType CsContainer.Name CsContainer.Namespace CsContainer.IDotNetContainer.Security CsContainer.IDotNetContainer.InheritedInterfaces CsContainer.IDotNetContainer.Members CsContainer.IDotNetContainer.Methods CsContainer.IDotNetContainer.Properties CsContainer.IDotNetContainer.Events CsContainer.Parent CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.IDotNetModel.ModelType CsModel.LookupModel(String) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public abstract class CsClass : CsContainer, ICsClass, ICsContainer, ICsModel, ICsAttributes, ICsGeneric, IParent, IDotNetClass, IDotNetContainer, IDotNetModel, IModelStatus, ISourceFiles, IDotNetAttributes, IDocumentation, IDotNetGeneric, IParent, ILookup Constructors | Improve this Doc View Source CsClass(Boolean, Boolean, Boolean, SourceCodeType, IReadOnlyList<CsAttribute>, Boolean, Boolean, IReadOnlyList<CsGenericParameter>, IReadOnlyList<CsType>, IReadOnlyList<String>, Boolean, String, String, String, String, String, CsSecurity, IReadOnlyList<CsInterface>, IReadOnlyList<CsMember>, Boolean, Boolean, Boolean, CsClass, String, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsClass Declaration protected CsClass(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, bool isGeneric, bool hasStrongTypesInGenerics, IReadOnlyList<CsGenericParameter> genericParameters, IReadOnlyList<CsType> genericTypes, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string ns, string parentPath, CsSecurity security, IReadOnlyList<CsInterface> inheritedInterfaces, IReadOnlyList<CsMember> members, bool isStatic, bool isAbstract, bool isSealed, CsClass baseClass, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description Boolean isLoaded Flag that determines if the model was loaded. Boolean hasErrors Flag that determine if errors were found creating the model. Boolean loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList < CsAttribute > attributes List of the attributes assigned to this model. Boolean isGeneric Flag that determines if the container is a generic definition. Boolean hasStrongTypesInGenerics Flag that determines if the generics use strong type definitions. IReadOnlyList < CsGenericParameter > genericParameters Generic parameters assigned to the container. IReadOnlyList < CsType > genericTypes Target types for the generic parameters assigned to the container. IReadOnlyList < String > sourceFiles List of the fully qualified paths to the source code files this model is defined in. Boolean hasDocumentation Flag that determines if the model has XML documentation assigned to it. String documentation The xml documentation assigned to the model. String lookupPath The fully qualified model lookup path for this model. String name The name of the model. String ns The namespace the container belongs to. String parentPath The fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. IReadOnlyList < CsInterface > inheritedInterfaces The interfaces that are inherited by this container. IReadOnlyList < CsMember > members The members assigned to this container. Boolean isStatic Flag that determines if the model is static. Boolean isAbstract Flag that determines if the model is abstract. Boolean isSealed Flag that determines if the model is sealed. CsClass baseClass The class model that is base class of this class. String sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore < ICsModel > modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList < ModelLoadException > modelErrors Optional the error that occured while creating the model. Properties | Improve this Doc View Source BaseClass The base class assigned to this class. This will be null if HasBase is false. Declaration public CsClass BaseClass { get; } Property Value Type Description CsClass | Improve this Doc View Source Constructors List of the constructors implemented in this class. Declaration public IReadOnlyList<CsMethod> Constructors { get; } Property Value Type Description IReadOnlyList < CsMethod > | Improve this Doc View Source Destructor The destructor implemented in this class. Declaration public CsMethod Destructor { get; } Property Value Type Description CsMethod | Improve this Doc View Source Fields List of the fields implemented in this class. Declaration public IReadOnlyList<CsField> Fields { get; } Property Value Type Description IReadOnlyList < CsField > | Improve this Doc View Source IsAbstract Flat that determines if this is an abstract class. Declaration public bool IsAbstract { get; } Property Value Type Description Boolean | Improve this Doc View Source IsSealed Flag that determines if this class has been sealed. Declaration public bool IsSealed { get; } Property Value Type Description Boolean | Improve this Doc View Source IsStatic Flag that determines if this class is static. Declaration public bool IsStatic { get; } Property Value Type Description Boolean Explicit Interface Implementations | Improve this Doc View Source IDotNetClass.BaseClass The base class assigned to this class. This will be null if HasBase is false. Declaration IDotNetClass IDotNetClass.BaseClass { get; } Returns Type Description IDotNetClass | Improve this Doc View Source IDotNetClass.Constructors List of the constructors implemented in this class. Declaration IReadOnlyList<IDotNetMethod> IDotNetClass.Constructors { get; } Returns Type Description IReadOnlyList < IDotNetMethod > | Improve this Doc View Source IDotNetClass.Destructor The destructor implemented in this class. Declaration IDotNetMethod IDotNetClass.Destructor { get; } Returns Type Description IDotNetMethod | Improve this Doc View Source IDotNetClass.Fields List of the fields implemented in this class. Declaration IReadOnlyList<IDotNetField> IDotNetClass.Fields { get; } Returns Type Description IReadOnlyList < IDotNetField > Implements ICsClass ICsContainer ICsModel ICsAttributes ICsGeneric IParent IDotNetClass IDotNetContainer IDotNetModel IModelStatus ISourceFiles IDotNetAttributes IDocumentation IDotNetGeneric IParent ILookup Extension Methods DotNetContainerExtensions.FormatCSharpComparisonMembers(IDotNetContainer, MemberComparisonType) DotNetContainerExtensions.MissingInterfaceMembers(IDotNetClass) CsClassExtensions.InheritsBaseClass(CsClass, String, String) CsContainerExtensions.FormatCSharpComparisonMembers(CsContainer, MemberComparisonType) CsContainerExtensions.MissingInterfaceMembers(CsClass) CSharpModelExtensions.ToModel<T>(CsModel)"
  },
  "api/CodeFactory.DotNet.CSharp.CsClassExtensions.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsClassExtensions.html",
    "title": "Class CsClassExtensions | CodeFactory Guidance",
    "keywords": "Class CsClassExtensions Extensions class that provides common automation tasks rolled up under standard extension methods that support the CsClass model. Inheritance Object CsClassExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public static class CsClassExtensions Methods | Improve this Doc View Source InheritsBaseClass(CsClass, String, String) Extension method that determines if a target class inherits a target base class. Declaration public static bool InheritsBaseClass(this CsClass source, string name, string nameSpace = null) Parameters Type Name Description CsClass source The source class to check for inheritance. String name The name of the inherited class String nameSpace Optional parameter for the namespace of the inherited class. Returns Type Description Boolean True if the class is inherited or false if not."
  },
  "api/CodeFactory.DotNet.CSharp.CsContainer.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsContainer.html",
    "title": "Class CsContainer | CodeFactory Guidance",
    "keywords": "Class CsContainer Data model that implements the base implement for all models that support members. Inheritance Object CsModel CsContainer CsClass CsInterface CsStructure Implements ICsContainer ICsModel ICsAttributes ICsGeneric IDotNetContainer IDotNetModel IModelStatus ISourceFiles IDotNetAttributes IDocumentation IDotNetGeneric ILookup IParent IParent Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.IDotNetModel.ModelType CsModel.LookupModel(String) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public abstract class CsContainer : CsModel, ICsContainer, ICsModel, ICsAttributes, ICsGeneric, IDotNetContainer, IDotNetModel, IModelStatus, ISourceFiles, IDotNetAttributes, IDocumentation, IDotNetGeneric, ILookup, IParent, IParent Constructors | Improve this Doc View Source CsContainer(Boolean, Boolean, Boolean, SourceCodeType, CsModelType, IReadOnlyList<CsAttribute>, Boolean, Boolean, IReadOnlyList<CsGenericParameter>, IReadOnlyList<CsType>, IReadOnlyList<String>, Boolean, String, String, String, String, String, CsContainerType, CsSecurity, IReadOnlyList<CsInterface>, IReadOnlyList<CsMember>, String, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsContainer Declaration protected CsContainer(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, CsModelType modelType, IReadOnlyList<CsAttribute> attributes, bool isGeneric, bool hasStrongTypesInGenerics, IReadOnlyList<CsGenericParameter> genericParameters, IReadOnlyList<CsType> genericTypes, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string ns, string parentPath, CsContainerType containerType, CsSecurity security, IReadOnlyList<CsInterface> inheritedInterfaces, IReadOnlyList<CsMember> members, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description Boolean isLoaded Flag that determines if the model was loaded. Boolean hasErrors Flag that determine if errors were found creating the model. Boolean loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. CsModelType modelType The type of code model created. IReadOnlyList < CsAttribute > attributes List of the attributes assigned to this model. Boolean isGeneric Flag that determines if the container is a generic definition. Boolean hasStrongTypesInGenerics Flag that determines if the generics use strong type definitions. IReadOnlyList < CsGenericParameter > genericParameters Generic parameters assigned to the container. IReadOnlyList < CsType > genericTypes Target types for the generic parameters assigned to the container. IReadOnlyList < String > sourceFiles List of the fully qualified paths to the source code files this model is defined in. Boolean hasDocumentation Flag that determines if the model has XML documentation assigned to it. String documentation The xml documentation assigned to the model. String lookupPath The fully qualified model lookup path for this model. String name The name of the model. String ns The namespace the container belongs to. String parentPath The fully qualified lookup path for the parent model to this one. CsContainerType containerType The type of container this model represents. CsSecurity security The security scope assigned to this model. IReadOnlyList < CsInterface > inheritedInterfaces The interfaces that are inherited by this container. IReadOnlyList < CsMember > members The members assigned to this container. String sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore < ICsModel > modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList < ModelLoadException > modelErrors Optional the error that occured while creating the model. Properties | Improve this Doc View Source Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration public IReadOnlyList<CsAttribute> Attributes { get; } Property Value Type Description IReadOnlyList < CsAttribute > | Improve this Doc View Source ContainerType The type of container model that has been implemented. Declaration public CsContainerType ContainerType { get; } Property Value Type Description CsContainerType | Improve this Doc View Source Documentation Documentation that has been assigned to this model. Declaration public string Documentation { get; } Property Value Type Description String | Improve this Doc View Source Events Enumeration of the events assigned to this container. If HasEvents is false this will be null. Declaration public IReadOnlyList<CsEvent> Events { get; } Property Value Type Description IReadOnlyList < CsEvent > | Improve this Doc View Source GenericParameters List of the generic parameters assigned. Declaration public IReadOnlyList<CsGenericParameter> GenericParameters { get; } Property Value Type Description IReadOnlyList < CsGenericParameter > | Improve this Doc View Source GenericTypes List of the strong types that are implemented for each generic parameter. This will be an empty List when there is no generic types implemented. Declaration public IReadOnlyList<CsType> GenericTypes { get; } Property Value Type Description IReadOnlyList < CsType > | Improve this Doc View Source HasAttributes Flag that determines if attributes are assigned. Declaration public bool HasAttributes { get; } Property Value Type Description Boolean | Improve this Doc View Source HasDocumentation Flag that determines if the model has code level documentation assigned to it. Declaration public bool HasDocumentation { get; } Property Value Type Description Boolean | Improve this Doc View Source HasStrongTypesInGenerics Flag that determines if the generics implementation has strong types passed in to the generics implementation. Declaration public bool HasStrongTypesInGenerics { get; } Property Value Type Description Boolean | Improve this Doc View Source InheritedInterfaces List of the interfaces that are inherited by this container. Declaration public IReadOnlyList<CsInterface> InheritedInterfaces { get; } Property Value Type Description IReadOnlyList < CsInterface > | Improve this Doc View Source IsGeneric Flag the determines if this item supports generics Declaration public bool IsGeneric { get; } Property Value Type Description Boolean | Improve this Doc View Source LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description String | Improve this Doc View Source Members List of the members that are implemented in this container. Declaration public IReadOnlyList<CsMember> Members { get; } Property Value Type Description IReadOnlyList < CsMember > | Improve this Doc View Source Methods List of the methods that are implemented in this container. Declaration public IReadOnlyList<CsMethod> Methods { get; } Property Value Type Description IReadOnlyList < CsMethod > | Improve this Doc View Source Name The name of the container. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source Namespace The namespace the container objects belongs to. Declaration public string Namespace { get; } Property Value Type Description String | Improve this Doc View Source Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel | Improve this Doc View Source Properties List of the properties that are implemented in this container. Declaration public IReadOnlyList<CsProperty> Properties { get; } Property Value Type Description IReadOnlyList < CsProperty > | Improve this Doc View Source Security The security scope assigned to the container. Declaration public CsSecurity Security { get; } Property Value Type Description CsSecurity | Improve this Doc View Source SourceFiles The source file or files in which the model was loaded from. This will be an empty enumeration if the source models were loaded from metadata only. Declaration public IReadOnlyList<string> SourceFiles { get; } Property Value Type Description IReadOnlyList < String > Methods | Improve this Doc View Source AddAfterAsync(String) Adds the source code directly after the definition of the ICsContainer in the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddAfterAsync(String, String) Adds the source code directly after the definition of the ICsContainer in the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String) Adds the source code directly before the definition of the ICsContainer in the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String, String) Adds the source code directly before the definition of the ICsContainer in the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddToBeginningAsync(String) Adds the source code inside of the container at the beginning of where members are defined in the container. Declaration public abstract Task<CsSource> AddToBeginningAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. | Improve this Doc View Source AddToBeginningAsync(String, String) Adds the source code inside of the container at the beginning of where members are defined in the container. Declaration public abstract Task<CsSource> AddToBeginningAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. | Improve this Doc View Source AddToEndAsync(String) Adds the source code inside of the container at the end of where members are defined in the container. Declaration public abstract Task<CsSource> AddToEndAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. | Improve this Doc View Source AddToEndAsync(String, String) Adds the source code inside of the container at the end of where members are defined in the container. Declaration public abstract Task<CsSource> AddToEndAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. | Improve this Doc View Source DeleteAsync() Deletes the definition of the container from the source document. Declaration public abstract Task<CsSource> DeleteAsync() Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the container has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync(String) Deletes the definition of the container from the source document. Declaration public abstract Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The source document that the container is to be removed from. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the container has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source GetBodySourceLocationAsync() Gets the starting and ending locations of the body located in the container. Declaration public abstract Task<ISourceLocation> GetBodySourceLocationAsync() Returns Type Description Task < ISourceLocation > The source location in the container. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source GetBodySourceLocationAsync(String) Gets the starting and ending locations of the body located in the container. Declaration public abstract Task<ISourceLocation> GetBodySourceLocationAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The fully qualified path to the document that has the container defined in. Returns Type Description Task < ISourceLocation > The source location in the container. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source GetBodySyntaxAsync() The source code syntax that is stored in the body of the container model. This will be null if the container was not loaded from source code. Declaration public abstract Task<string> GetBodySyntaxAsync() Returns Type Description Task < String > | Improve this Doc View Source GetModel(String) Gets a ICsModel from the currently loaded source code. Declaration public CsModel GetModel(string lookupPath) Parameters Type Name Description String lookupPath The fully qualified path to the model to be loaded. Returns Type Description CsModel The loaded model or null if the model could not be found. | Improve this Doc View Source GetSourceLocationAsync() Gets the starting and ending locations within the document where the container is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task < ISourceLocation > The source location for the container. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source GetSourceLocationAsync(String) Gets the starting and ending locations within the document where the container is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The fully qualified path to the document that has the container defined in. Returns Type Description Task < ISourceLocation > The source location for the container. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source ReplaceAsync(String) Replaces the current container with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source ReplaceAsync(String, String) Replaces the current container with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Explicit Interface Implementations | Improve this Doc View Source IDotNetAttributes.Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration IReadOnlyList<IDotNetAttribute> IDotNetAttributes.Attributes { get; } Returns Type Description IReadOnlyList < IDotNetAttribute > | Improve this Doc View Source IDotNetContainer.ContainerType The type of container model that has been implemented. Declaration DotNetContainerType IDotNetContainer.ContainerType { get; } Returns Type Description DotNetContainerType | Improve this Doc View Source IDotNetContainer.Events Enumeration of the events assigned to this container. If HasEvents is false this will be null. Declaration IReadOnlyList<IDotNetEvent> IDotNetContainer.Events { get; } Returns Type Description IReadOnlyList < IDotNetEvent > | Improve this Doc View Source IDotNetContainer.InheritedInterfaces List of the interfaces that are inherited by this container. Declaration IReadOnlyList<IDotNetInterface> IDotNetContainer.InheritedInterfaces { get; } Returns Type Description IReadOnlyList < IDotNetInterface > | Improve this Doc View Source IDotNetContainer.Members List of the members that are implemented in this container. Declaration IReadOnlyList<IDotNetMember> IDotNetContainer.Members { get; } Returns Type Description IReadOnlyList < IDotNetMember > | Improve this Doc View Source IDotNetContainer.Methods List of the methods that are implemented in this container. Declaration IReadOnlyList<IDotNetMethod> IDotNetContainer.Methods { get; } Returns Type Description IReadOnlyList < IDotNetMethod > | Improve this Doc View Source IDotNetContainer.Properties List of the properties that are implemented in this container. Declaration IReadOnlyList<IDotNetProperty> IDotNetContainer.Properties { get; } Returns Type Description IReadOnlyList < IDotNetProperty > | Improve this Doc View Source IDotNetContainer.Security The security scope assigned to the container. Declaration DotNetSecurity IDotNetContainer.Security { get; } Returns Type Description DotNetSecurity | Improve this Doc View Source IDotNetGeneric.GenericParameters List of the generic parameters assigned. Declaration IReadOnlyList<IDotNetGenericParameter> IDotNetGeneric.GenericParameters { get; } Returns Type Description IReadOnlyList < IDotNetGenericParameter > | Improve this Doc View Source IDotNetGeneric.GenericTypes Enumeration of the strong types that are implemented for each generic parameter. This will be an empty list when there is no generic types implemented. Declaration IReadOnlyList<IDotNetType> IDotNetGeneric.GenericTypes { get; } Returns Type Description IReadOnlyList < IDotNetType > | Improve this Doc View Source IParent.Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration IDotNetModel IParent.Parent { get; } Returns Type Description IDotNetModel Implements ICsContainer ICsModel ICsAttributes ICsGeneric IDotNetContainer IDotNetModel IModelStatus ISourceFiles IDotNetAttributes IDocumentation IDotNetGeneric ILookup IParent IParent Extension Methods DotNetContainerExtensions.FormatCSharpComparisonMembers(IDotNetContainer, MemberComparisonType) CsContainerExtensions.FormatCSharpComparisonMembers(CsContainer, MemberComparisonType) CSharpModelExtensions.ToModel<T>(CsModel)"
  },
  "api/CodeFactory.DotNet.CSharp.CsContainerExtensions.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsContainerExtensions.html",
    "title": "Class CsContainerExtensions | CodeFactory Guidance",
    "keywords": "Class CsContainerExtensions Extension management class that manages dot net models that implement the ICsContainer interface. Inheritance Object CsContainerExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public static class CsContainerExtensions Methods | Improve this Doc View Source FormatCSharpComparisonMembers(CsContainer, MemberComparisonType) Loads all members from a target model that implements CsContainer and returns all members and the comparison hash code for each member. Declaration public static IReadOnlyList<KeyValuePair<int, CsMember>> FormatCSharpComparisonMembers(this CsContainer source, MemberComparisonType comparisonType = MemberComparisonType.Base) Parameters Type Name Description CsContainer source The target container to load members from. MemberComparisonType comparisonType The type of hash code to build for comparision. Default comparison type is set to the base comparison. Returns Type Description IReadOnlyList < KeyValuePair < Int32 , CsMember >> List of all the hash codes and the members for each hashcode. Exceptions Type Condition ArgumentNullException Thrown if the source container is null. | Improve this Doc View Source MissingInterfaceMembers(CsClass) Creates a list of the interface members that are not implemented in the ICsClass model. Declaration public static IReadOnlyList<CsMember> MissingInterfaceMembers(this CsClass source) Parameters Type Name Description CsClass source The source model to check. Returns Type Description IReadOnlyList < CsMember > List of models that are missing or an empty list if there are no missing members. Exceptions Type Condition ArgumentNullException Throws an argument null exception if the model does not exist. | Improve this Doc View Source MissingInterfaceMembers(CsStructure) Creates a list of the interface members that are not implemented in the ICsStructure model. Declaration public static IReadOnlyList<CsMember> MissingInterfaceMembers(this CsStructure source) Parameters Type Name Description CsStructure source The source model to check. Returns Type Description IReadOnlyList < CsMember > List of models that are missing or an empty list if there are no missing members. Exceptions Type Condition ArgumentNullException Throws an argument null exception if the model does not exist."
  },
  "api/CodeFactory.DotNet.CSharp.CsContainerType.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsContainerType.html",
    "title": "Enum CsContainerType | CodeFactory Guidance",
    "keywords": "Enum CsContainerType Definition of the different types of container based members are supported by the C# source code type. Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public enum CsContainerType Fields Name Description Class The container implements a class model. Interface The container implements a interface model. Structure The container implements a structure model. Unknown The container is of an unknown type."
  },
  "api/CodeFactory.DotNet.CSharp.CsDelegate.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsDelegate.html",
    "title": "Class CsDelegate | CodeFactory Guidance",
    "keywords": "Class CsDelegate Data model that represents the definition of a delegate. Inheritance Object CsModel CsDelegate Implements ICsDelegate ICsModel ICsAttributes ICsGeneric IDotNetDelegate IDotNetModel IModelStatus IDotNetAttributes IDotNetGeneric IDocumentation ILookup ISourceFiles IParent IParent Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.IDotNetModel.ModelType CsModel.LookupModel(String) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public abstract class CsDelegate : CsModel, ICsDelegate, ICsModel, ICsAttributes, ICsGeneric, IDotNetDelegate, IDotNetModel, IModelStatus, IDotNetAttributes, IDotNetGeneric, IDocumentation, ILookup, ISourceFiles, IParent, IParent Constructors | Improve this Doc View Source CsDelegate(Boolean, Boolean, Boolean, SourceCodeType, IReadOnlyList<CsAttribute>, Boolean, Boolean, IReadOnlyList<CsGenericParameter>, IReadOnlyList<CsType>, Boolean, String, String, IReadOnlyList<String>, String, String, Boolean, Boolean, String, CsSecurity, CsType, IReadOnlyList<CsParameter>, CsMethod, CsMethod, CsMethod, String, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsDelegate Declaration protected CsDelegate(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, bool isGeneric, bool hasStrongTypesInGenerics, IReadOnlyList<CsGenericParameter> genericParameters, IReadOnlyList<CsType> genericTypes, bool hasDocumentation, string documentation, string lookupPath, IReadOnlyList<string> sourceFiles, string name, string ns, bool hasParameters, bool isVoid, string parentPath, CsSecurity security, CsType returnType, IReadOnlyList<CsParameter> parameters, CsMethod invokeMethod, CsMethod beginInvokeMethod, CsMethod endInvokeMethod, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description Boolean isLoaded Flag that determines if the model was loaded. Boolean hasErrors Flag that determine if errors were found creating the model. Boolean loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList < CsAttribute > attributes List of the attributes assigned to this model. Boolean isGeneric Flag that determines if the delegate is a generic definition. Boolean hasStrongTypesInGenerics Flag that determines if the generics use strong type definitions. IReadOnlyList < CsGenericParameter > genericParameters Generic parameters assigned to the delegate. IReadOnlyList < CsType > genericTypes Target types for the generic parameters assigned to the delegate. Boolean hasDocumentation Flag that determines if the model has XML documentation assigned to it. String documentation The xml documentation assigned to the model. String lookupPath The fully qualified model lookup path for this model. IReadOnlyList < String > sourceFiles List of the fully qualified paths to the source code files this member is defined in. String name The name of the model. String ns The namespace this delegate is assigned to. Boolean hasParameters Flag that determines if the delegate had parameters. Boolean isVoid Flag that determines if the return type is void. String parentPath THe fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. CsType returnType The type definition for the return type. IReadOnlyList < CsParameter > parameters The parameters assigned to the delegate. CsMethod invokeMethod The invoke method definition assigned to this delegate. CsMethod beginInvokeMethod The begin invoke method definition assigned to this delegate. CsMethod endInvokeMethod The end invoke method definition assigned to this delegate. String sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore < ICsModel > modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList < ModelLoadException > modelErrors Optional the error that occured while creating the model. Properties | Improve this Doc View Source Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration public IReadOnlyList<CsAttribute> Attributes { get; } Property Value Type Description IReadOnlyList < CsAttribute > | Improve this Doc View Source BeginInvokeMethod The begin invoke delegate definition for this delegate. Declaration public CsMethod BeginInvokeMethod { get; } Property Value Type Description CsMethod | Improve this Doc View Source Documentation Documentation that has been assigned to this model. Declaration public string Documentation { get; } Property Value Type Description String | Improve this Doc View Source EndInvokeMethod The end invoke delegate definition for this delegate. Declaration public CsMethod EndInvokeMethod { get; } Property Value Type Description CsMethod | Improve this Doc View Source GenericParameters List of the generic parameters assigned. Declaration public IReadOnlyList<CsGenericParameter> GenericParameters { get; } Property Value Type Description IReadOnlyList < CsGenericParameter > | Improve this Doc View Source GenericTypes List of the strong types that are implemented for each generic parameter. This will be an empty List when there is no generic types implemented. Declaration public IReadOnlyList<CsType> GenericTypes { get; } Property Value Type Description IReadOnlyList < CsType > | Improve this Doc View Source HasAttributes Flag that determines if attributes are assigned. Declaration public bool HasAttributes { get; } Property Value Type Description Boolean | Improve this Doc View Source HasDocumentation Flag that determines if the model has code level documentation assigned to it. Declaration public bool HasDocumentation { get; } Property Value Type Description Boolean | Improve this Doc View Source HasParameters Flag that determines if the delegate has parameters assigned to it. Declaration public bool HasParameters { get; } Property Value Type Description Boolean | Improve this Doc View Source HasStrongTypesInGenerics Flag that determines if the generics implementation has strong types passed in to the generics implementation. Declaration public bool HasStrongTypesInGenerics { get; } Property Value Type Description Boolean | Improve this Doc View Source InvokeMethod The invoke delegate definition for this delegate. Declaration public CsMethod InvokeMethod { get; } Property Value Type Description CsMethod | Improve this Doc View Source IsGeneric Flag the determines if this item supports generics Declaration public bool IsGeneric { get; } Property Value Type Description Boolean | Improve this Doc View Source IsVoid Flag that determines if the delegate return is a void. Declaration public bool IsVoid { get; } Property Value Type Description Boolean | Improve this Doc View Source LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description String | Improve this Doc View Source Name The name assigned to the this item. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source Namespace The namespace the delegate is assigned to. Declaration public string Namespace { get; } Property Value Type Description String | Improve this Doc View Source Parameters List of the parameters that have been assigned to the delegate. If HasParameters property is set to false this will be an empty list. Declaration public IReadOnlyList<CsParameter> Parameters { get; } Property Value Type Description IReadOnlyList < CsParameter > | Improve this Doc View Source Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel | Improve this Doc View Source ReturnType The type information about the return type assigned to the delegate. Declaration public CsType ReturnType { get; } Property Value Type Description CsType | Improve this Doc View Source Security The security scope that has been assigned to this item. Declaration public CsSecurity Security { get; } Property Value Type Description CsSecurity | Improve this Doc View Source SourceFiles The source file or files in which the model was loaded from. This will be an empty enumeration if the source models were loaded from metadata only. Declaration public IReadOnlyList<string> SourceFiles { get; } Property Value Type Description IReadOnlyList < String > Methods | Improve this Doc View Source AddAfterAsync(String) Adds the source code directly after the definition of the ICsDelegate in the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddAfterAsync(String, String) Adds the source code directly after the definition of the ICsDelegate in the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String) Adds the source code directly before the definition of the ICsDelegate in the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String, String) Adds the source code directly before the definition of the ICsDelegate in the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync() Deletes the definition of the delegate from the source document. Declaration public abstract Task<CsSource> DeleteAsync() Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync(String) Deletes the definition of the delegate from the source document. Declaration public abstract Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The source document that the delegate is to be removed from. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source GetModel(String) Gets a ICsModel from the currently loaded source code. Declaration public CsModel GetModel(string lookupPath) Parameters Type Name Description String lookupPath The fully qualified path to the model to be loaded. Returns Type Description CsModel The loaded model or null if the model could not be found. | Improve this Doc View Source GetSourceLocationAsync() Gets the starting and ending locations within the document where the delegate is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task < ISourceLocation > The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source GetSourceLocationAsync(String) Gets the starting and ending locations within the document where the delegate is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The fully qualified path to the document that has the delegate defined in. Returns Type Description Task < ISourceLocation > The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source ReplaceAsync(String) Replaces the current delegate with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source ReplaceAsync(String, String) Replaces the current delegate with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Explicit Interface Implementations | Improve this Doc View Source IDotNetAttributes.Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration IReadOnlyList<IDotNetAttribute> IDotNetAttributes.Attributes { get; } Returns Type Description IReadOnlyList < IDotNetAttribute > | Improve this Doc View Source IDotNetDelegate.BeginInvokeMethod The begin invoke delegate definition for this delegate. Declaration IDotNetMethod IDotNetDelegate.BeginInvokeMethod { get; } Returns Type Description IDotNetMethod | Improve this Doc View Source IDotNetDelegate.EndInvokeMethod The end invoke delegate definition for this delegate. Declaration IDotNetMethod IDotNetDelegate.EndInvokeMethod { get; } Returns Type Description IDotNetMethod | Improve this Doc View Source IDotNetDelegate.InvokeMethod The invoke delegate definition for this delegate. Declaration IDotNetMethod IDotNetDelegate.InvokeMethod { get; } Returns Type Description IDotNetMethod | Improve this Doc View Source IDotNetDelegate.Parameters List of the parameters that have been assigned to the delegate. If HasParameters property is set to false this will be an empty list. Declaration IReadOnlyList<IDotNetParameter> IDotNetDelegate.Parameters { get; } Returns Type Description IReadOnlyList < IDotNetParameter > | Improve this Doc View Source IDotNetDelegate.ReturnType The type information about the return type assigned to the delegate. Declaration IDotNetType IDotNetDelegate.ReturnType { get; } Returns Type Description IDotNetType | Improve this Doc View Source IDotNetDelegate.Security The security scope that has been assigned to this item. Declaration DotNetSecurity IDotNetDelegate.Security { get; } Returns Type Description DotNetSecurity | Improve this Doc View Source IDotNetGeneric.GenericParameters List of the generic parameters assigned. Declaration IReadOnlyList<IDotNetGenericParameter> IDotNetGeneric.GenericParameters { get; } Returns Type Description IReadOnlyList < IDotNetGenericParameter > | Improve this Doc View Source IDotNetGeneric.GenericTypes Enumeration of the strong types that are implemented for each generic parameter. This will be an empty list when there is no generic types implemented. Declaration IReadOnlyList<IDotNetType> IDotNetGeneric.GenericTypes { get; } Returns Type Description IReadOnlyList < IDotNetType > | Improve this Doc View Source IParent.Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration IDotNetModel IParent.Parent { get; } Returns Type Description IDotNetModel Implements ICsDelegate ICsModel ICsAttributes ICsGeneric IDotNetDelegate IDotNetModel IModelStatus IDotNetAttributes IDotNetGeneric IDocumentation ILookup ISourceFiles IParent IParent Extension Methods CSharpModelExtensions.ToModel<T>(CsModel)"
  },
  "api/CodeFactory.DotNet.CSharp.CsEnum.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsEnum.html",
    "title": "Class CsEnum | CodeFactory Guidance",
    "keywords": "Class CsEnum Data model that represents an enumeration definition. Inheritance Object CsModel CsEnum Implements ICsEnum ICsModel ICsAttributes IParent IDotNetEnum IDotNetModel IModelStatus IDotNetAttributes IDocumentation IParent ILookup ISourceFiles Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.IDotNetModel.ModelType CsModel.LookupModel(String) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public abstract class CsEnum : CsModel, ICsEnum, ICsModel, ICsAttributes, IParent, IDotNetEnum, IDotNetModel, IModelStatus, IDotNetAttributes, IDocumentation, IParent, ILookup, ISourceFiles Constructors | Improve this Doc View Source CsEnum(Boolean, Boolean, Boolean, SourceCodeType, IReadOnlyList<CsAttribute>, String, Boolean, String, String, IReadOnlyList<String>, String, String, CsSecurity, IReadOnlyList<CsEnumValue>, String, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsEnum Declaration protected CsEnum(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, string parentPath, bool hasDocumentation, string documentation, string lookupPath, IReadOnlyList<string> sourceFiles, string name, string ns, CsSecurity security, IReadOnlyList<CsEnumValue> values, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description Boolean isLoaded Flag that determines if the model was loaded. Boolean hasErrors Flag that determine if errors were found creating the model. Boolean loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList < CsAttribute > attributes List of the attributes assigned to this model. String parentPath The fully qualified lookup path for the parent model to this one. Boolean hasDocumentation Flag that determines if the model has XML documentation assigned to it. String documentation The xml documentation assigned to the model. String lookupPath The fully qualified model lookup path for this model. IReadOnlyList < String > sourceFiles List of the fully qualified paths to the source code files this model is defined in. String name The name of the model. String ns CsSecurity security The security scope assigned to this model. IReadOnlyList < CsEnumValue > values The enumeration values assigned to this enumeration. String sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore < ICsModel > modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList < ModelLoadException > modelErrors Optional the error that occured while creating the model. Properties | Improve this Doc View Source Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration public IReadOnlyList<CsAttribute> Attributes { get; } Property Value Type Description IReadOnlyList < CsAttribute > | Improve this Doc View Source Documentation Documentation that has been assigned to this model. Declaration public string Documentation { get; } Property Value Type Description String | Improve this Doc View Source HasAttributes Flag that determines if attributes are assigned. Declaration public bool HasAttributes { get; } Property Value Type Description Boolean | Improve this Doc View Source HasDocumentation Flag that determines if the model has code level documentation assigned to it. Declaration public bool HasDocumentation { get; } Property Value Type Description Boolean | Improve this Doc View Source LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description String | Improve this Doc View Source Name The name of the enumeration. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source Namespace The namespace the enumeration belongs to. Declaration public string Namespace { get; } Property Value Type Description String | Improve this Doc View Source Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel | Improve this Doc View Source Security The security scope assigned to the enumeration. Declaration public CsSecurity Security { get; } Property Value Type Description CsSecurity | Improve this Doc View Source SourceFiles The source file or files in which the model was loaded from. This will be an empty enumeration if the source models were loaded from metadata only. Declaration public IReadOnlyList<string> SourceFiles { get; } Property Value Type Description IReadOnlyList < String > | Improve this Doc View Source Values List of the enumeration values implemented in this enumeration. Declaration public IReadOnlyList<CsEnumValue> Values { get; } Property Value Type Description IReadOnlyList < CsEnumValue > Methods | Improve this Doc View Source AddAfterAsync(String) Adds the source code directly after the definition of the ICsEnum in the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddAfterAsync(String, String) Adds the source code directly after the definition of the ICsEnum in the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String) Adds the source code directly before the definition of the ICsEnum in the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String, String) Adds the source code directly before the definition of the ICsEnum in the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync() Deletes the definition of the delegate from the source document. Declaration public abstract Task<CsSource> DeleteAsync() Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync(String) Deletes the definition of the delegate from the source document. Declaration public abstract Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The source document that the delegate is to be removed from. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source GetModel(String) Gets a ICsModel from the currently loaded source code. Declaration public ICsModel GetModel(string lookupPath) Parameters Type Name Description String lookupPath The fully qualified path to the model to be loaded. Returns Type Description ICsModel The loaded model or null if the model could not be found. | Improve this Doc View Source GetSourceLocationAsync() Gets the starting and ending locations within the document where the delegate is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task < ISourceLocation > The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source GetSourceLocationAsync(String) Gets the starting and ending locations within the document where the delegate is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The fully qualified path to the document that has the delegate defined in. Returns Type Description Task < ISourceLocation > The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source ReplaceAsync(String) Replaces the current delegate with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source ReplaceAsync(String, String) Replaces the current delegate with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Explicit Interface Implementations | Improve this Doc View Source IDotNetAttributes.Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration IReadOnlyList<IDotNetAttribute> IDotNetAttributes.Attributes { get; } Returns Type Description IReadOnlyList < IDotNetAttribute > | Improve this Doc View Source IDotNetEnum.Security The security scope assigned to the enumeration. Declaration DotNetSecurity IDotNetEnum.Security { get; } Returns Type Description DotNetSecurity | Improve this Doc View Source IDotNetEnum.Values List of the enumeration values implemented in this enumeration. Declaration IReadOnlyList<IDotNetEnumValue> IDotNetEnum.Values { get; } Returns Type Description IReadOnlyList < IDotNetEnumValue > | Improve this Doc View Source IParent.Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration IDotNetModel IParent.Parent { get; } Returns Type Description IDotNetModel Implements ICsEnum ICsModel ICsAttributes IParent IDotNetEnum IDotNetModel IModelStatus IDotNetAttributes IDocumentation IParent ILookup ISourceFiles Extension Methods DotNetModelExtensions.FormatCSharpEnumTypeSyntax(IDotNetEnum, String) DotNetModelExtensions.FormatCSharpEnumValueSyntax(IDotNetEnum, String) CSharpModelExtensions.ToModel<T>(CsModel) CsModelExtensions.FormatCSharpEnumTypeSyntax(CsEnum, String) CsModelExtensions.FormatCSharpEnumValueSyntax(CsEnum, String)"
  },
  "api/CodeFactory.DotNet.CSharp.CsEnumValue.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsEnumValue.html",
    "title": "Class CsEnumValue | CodeFactory Guidance",
    "keywords": "Class CsEnumValue Data model that represents a defined value for an enumeration. Inheritance Object CsModel CsEnumValue Implements ICsEnumValue ICsModel ICsAttributes IParent IDotNetEnumValue IDotNetModel IModelStatus IDotNetAttributes IDocumentation IParent ILookup ISourceFiles Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.IDotNetModel.ModelType CsModel.LookupModel(String) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public abstract class CsEnumValue : CsModel, ICsEnumValue, ICsModel, ICsAttributes, IParent, IDotNetEnumValue, IDotNetModel, IModelStatus, IDotNetAttributes, IDocumentation, IParent, ILookup, ISourceFiles Constructors | Improve this Doc View Source CsEnumValue(Boolean, Boolean, Boolean, SourceCodeType, IReadOnlyList<CsAttribute>, String, Boolean, String, String, IReadOnlyList<String>, String, String, CsSecurity, String, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsEnumValue Declaration protected CsEnumValue(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, string parentPath, bool hasDocumentation, string documentation, string lookupPath, IReadOnlyList<string> sourceFiles, string name, string value, CsSecurity security, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description Boolean isLoaded Flag that determines if the model was loaded. Boolean hasErrors Flag that determine if errors were found creating the model. Boolean loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList < CsAttribute > attributes List of the attributes assigned to this model. String parentPath The fully qualified lookup path for the parent model to this one. Boolean hasDocumentation Flag that determines if the model has XML documentation assigned to it. String documentation The xml documentation assigned to the model. String lookupPath The fully qualified model lookup path for this model. IReadOnlyList < String > sourceFiles List of the fully qualified paths to the source code files this member is defined in. String name The name of the model. String value The value assigned to the enumeration value. CsSecurity security The security scope assigned to this model. String sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore < ICsModel > modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList < ModelLoadException > modelErrors Optional the error that occured while creating the model. Properties | Improve this Doc View Source Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration public IReadOnlyList<CsAttribute> Attributes { get; } Property Value Type Description IReadOnlyList < CsAttribute > | Improve this Doc View Source Documentation Documentation that has been assigned to this model. Declaration public string Documentation { get; } Property Value Type Description String | Improve this Doc View Source HasAttributes Flag that determines if attributes are assigned. Declaration public bool HasAttributes { get; } Property Value Type Description Boolean | Improve this Doc View Source HasDocumentation Flag that determines if the model has code level documentation assigned to it. Declaration public bool HasDocumentation { get; } Property Value Type Description Boolean | Improve this Doc View Source LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description String | Improve this Doc View Source Name The name of the enumeration value. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel | Improve this Doc View Source Security The security scope assigned to the enumeration value. Declaration public CsSecurity Security { get; } Property Value Type Description CsSecurity | Improve this Doc View Source SourceFiles The source file or files in which the model was loaded from. This will be an empty enumeration if the source models were loaded from metadata only. Declaration public IReadOnlyList<string> SourceFiles { get; } Property Value Type Description IReadOnlyList < String > | Improve this Doc View Source Value The value that has been assigned to the enumeration value. Declaration public string Value { get; } Property Value Type Description String Methods | Improve this Doc View Source AddAfterAsync(String) Adds the source code directly after the definition of the ICsEnumValue in the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddAfterAsync(String, String) Adds the source code directly after the definition of the ICsEnumValue in the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String) Adds the source code directly before the definition of the ICsEnumValue in the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String, String) Adds the source code directly before the definition of the ICsEnumValue in the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync() Deletes the definition of the delegate from the source document. Declaration public abstract Task<CsSource> DeleteAsync() Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync(String) Deletes the definition of the delegate from the source document. Declaration public abstract Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The source document that the delegate is to be removed from. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source GetModel(String) Gets a ICsModel from the currently loaded source code. Declaration public ICsModel GetModel(string lookupPath) Parameters Type Name Description String lookupPath The fully qualified path to the model to be loaded. Returns Type Description ICsModel The loaded model or null if the model could not be found. | Improve this Doc View Source GetSourceLocationAsync() Gets the starting and ending locations within the document where the delegate is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task < ISourceLocation > The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source GetSourceLocationAsync(String) Gets the starting and ending locations within the document where the delegate is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The fully qualified path to the document that has the delegate defined in. Returns Type Description Task < ISourceLocation > The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source ReplaceAsync(String) Replaces the current delegate with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source ReplaceAsync(String, String) Replaces the current delegate with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Explicit Interface Implementations | Improve this Doc View Source IDotNetAttributes.Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration IReadOnlyList<IDotNetAttribute> IDotNetAttributes.Attributes { get; } Returns Type Description IReadOnlyList < IDotNetAttribute > | Improve this Doc View Source IDotNetEnumValue.Security The security scope assigned to the enumeration value. Declaration DotNetSecurity IDotNetEnumValue.Security { get; } Returns Type Description DotNetSecurity | Improve this Doc View Source IParent.Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration IDotNetModel IParent.Parent { get; } Returns Type Description IDotNetModel Implements ICsEnumValue ICsModel ICsAttributes IParent IDotNetEnumValue IDotNetModel IModelStatus IDotNetAttributes IDocumentation IParent ILookup ISourceFiles Extension Methods CSharpModelExtensions.ToModel<T>(CsModel)"
  },
  "api/CodeFactory.DotNet.CSharp.CsEvent.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsEvent.html",
    "title": "Class CsEvent | CodeFactory Guidance",
    "keywords": "Class CsEvent Data model that represents the definition of an event. Inheritance Object CsModel CsMember CsEvent Implements ICsEvent ICsMember ICsModel ICsAttributes IParent IDotNetEvent IDotNetMember IDotNetModel IModelStatus ISourceFiles IDotNetAttributes IDocumentation IParent ILookup Inherited Members CsMember.HasAttributes CsMember.Attributes CsMember.IDotNetAttributes.Attributes CsMember.SourceFiles CsMember.HasDocumentation CsMember.Documentation CsMember.IParent.Parent CsMember.LookupPath CsMember.Name CsMember.Security CsMember.MemberType CsMember.AddBeforeAsync(String, String) CsMember.AddBeforeAsync(String) CsMember.AddAfterAsync(String, String) CsMember.AddAfterAsync(String) CsMember.DeleteAsync(String) CsMember.DeleteAsync() CsMember.GetSourceLocationAsync(String) CsMember.GetSourceLocationAsync() CsMember.ReplaceAsync(String, String) CsMember.ReplaceAsync(String) CsMember.GetModel(String) CsMember.IDotNetMember.Security CsMember.IDotNetMember.MemberType CsMember.Parent CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.IDotNetModel.ModelType CsModel.LookupModel(String) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public abstract class CsEvent : CsMember, ICsEvent, ICsMember, ICsModel, ICsAttributes, IParent, IDotNetEvent, IDotNetMember, IDotNetModel, IModelStatus, ISourceFiles, IDotNetAttributes, IDocumentation, IParent, ILookup Constructors | Improve this Doc View Source CsEvent(Boolean, Boolean, Boolean, SourceCodeType, IReadOnlyList<CsAttribute>, IReadOnlyList<String>, Boolean, String, String, String, String, CsSecurity, Boolean, Boolean, Boolean, Boolean, Boolean, CsDelegate, CsMethod, CsMethod, CsMethod, CsType, String, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsEvent Declaration protected CsEvent(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string parentPath, CsSecurity security, bool isAbstract, bool isVirtual, bool isOverride, bool isSealed, bool isStatic, CsDelegate eventHandlerDelegate, CsMethod raiseMethod, CsMethod addMethod, CsMethod removeMethod, CsType eventType, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description Boolean isLoaded Flag that determines if the model was loaded. Boolean hasErrors Flag that determine if errors were found creating the model. Boolean loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList < CsAttribute > attributes List of the attributes assigned to this model. IReadOnlyList < String > sourceFiles List of the fully qualified paths to the source code files this member is defined in. Boolean hasDocumentation Flag that determines if the model has XML documentation assigned to it. String documentation The xml documentation assigned to the model. String lookupPath The fully qualified model lookup path for this model. String name The name of the model. String parentPath THe fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. Boolean isAbstract Flag that determines if the model is abstract. Boolean isVirtual Flag that determines if the model is virtual. Boolean isOverride Flag that determines if the model is overridden. Boolean isSealed Flag that determines if the model is sealed. Boolean isStatic Flag that determines if the model is static. CsDelegate eventHandlerDelegate Delegate model for this event. CsMethod raiseMethod Model for the raise method for this event. CsMethod addMethod Model for the add method for this event. CsMethod removeMethod Model for the remove method for this event. CsType eventType The type definition that supports this event. String sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore < ICsModel > modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList < ModelLoadException > modelErrors Optional the error that occured while creating the model. Properties | Improve this Doc View Source AddMethod The method that adds a subscription to the event. Declaration public CsMethod AddMethod { get; } Property Value Type Description CsMethod | Improve this Doc View Source EventHandlerDelegate The event handler delegate used by the event. Declaration public CsDelegate EventHandlerDelegate { get; } Property Value Type Description CsDelegate | Improve this Doc View Source EventType The event handler type that is assigned to the event. Declaration public CsType EventType { get; } Property Value Type Description CsType | Improve this Doc View Source IsAbstract Flag that determines if the event has been implemented as an abstract event. Declaration public bool IsAbstract { get; } Property Value Type Description Boolean | Improve this Doc View Source IsOverride Flag that determines if the event has been overridden. Declaration public bool IsOverride { get; } Property Value Type Description Boolean | Improve this Doc View Source IsSealed Flag that determines if the event has been sealed. Declaration public bool IsSealed { get; } Property Value Type Description Boolean | Improve this Doc View Source IsStatic Flag that determines if the event is static. Declaration public bool IsStatic { get; } Property Value Type Description Boolean | Improve this Doc View Source IsVirtual Flag that determines if the event is implemented as virtual. Declaration public bool IsVirtual { get; } Property Value Type Description Boolean | Improve this Doc View Source RaiseMethod The method definition to raise the event. Declaration public CsMethod RaiseMethod { get; } Property Value Type Description CsMethod | Improve this Doc View Source RemoveMethod The method that removes a subscription to the event. Declaration public CsMethod RemoveMethod { get; } Property Value Type Description CsMethod Explicit Interface Implementations | Improve this Doc View Source IDotNetEvent.AddMethod The method that adds a subscription to the event. Declaration IDotNetMethod IDotNetEvent.AddMethod { get; } Returns Type Description IDotNetMethod | Improve this Doc View Source IDotNetEvent.EventHandlerDelegate The event handler delegate used by the event. Declaration IDotNetDelegate IDotNetEvent.EventHandlerDelegate { get; } Returns Type Description IDotNetDelegate | Improve this Doc View Source IDotNetEvent.EventType The event handler type that is assigned to the event. Declaration IDotNetType IDotNetEvent.EventType { get; } Returns Type Description IDotNetType | Improve this Doc View Source IDotNetEvent.RaiseMethod The method definition to raise the event. Declaration IDotNetMethod IDotNetEvent.RaiseMethod { get; } Returns Type Description IDotNetMethod | Improve this Doc View Source IDotNetEvent.RemoveMethod The method that removes a subscription to the event. Declaration IDotNetMethod IDotNetEvent.RemoveMethod { get; } Returns Type Description IDotNetMethod Implements ICsEvent ICsMember ICsModel ICsAttributes IParent IDotNetEvent IDotNetMember IDotNetModel IModelStatus ISourceFiles IDotNetAttributes IDocumentation IParent ILookup Extension Methods DotNetMemberExtensions.FormatCSharpMemberComparisonHashCode(IDotNetMember, MemberComparisonType) DotNetMemberExtensions.FormatCSharpDeclarationSyntax(IDotNetEvent, Boolean, Boolean, Boolean, Boolean) DotNetMemberExtensions.FormatCSharpComparisonHashCode(IDotNetEvent, Boolean, Boolean, Boolean) CSharpModelExtensions.ToModel<T>(CsModel) CsMemberExtensions.FormatCSharpMemberComparisonHashCode(CsMember, MemberComparisonType) CsMemberExtensions.FormatCSharpDeclarationSyntax(CsEvent, Boolean, Boolean, Boolean) CsMemberExtensions.FormatCSharpComparisonHashCode(CsEvent, Boolean, Boolean, Boolean)"
  },
  "api/CodeFactory.DotNet.CSharp.CsField.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsField.html",
    "title": "Class CsField | CodeFactory Guidance",
    "keywords": "Class CsField Data model that represents a field definition. Inheritance Object CsModel CsMember CsField Implements ICsField ICsMember ICsModel ICsAttributes IParent IDotNetField IDotNetMember IDotNetModel IModelStatus ISourceFiles IDotNetAttributes IDocumentation IParent ILookup Inherited Members CsMember.HasAttributes CsMember.Attributes CsMember.IDotNetAttributes.Attributes CsMember.SourceFiles CsMember.HasDocumentation CsMember.Documentation CsMember.IParent.Parent CsMember.LookupPath CsMember.Name CsMember.Security CsMember.MemberType CsMember.AddBeforeAsync(String, String) CsMember.AddBeforeAsync(String) CsMember.AddAfterAsync(String, String) CsMember.AddAfterAsync(String) CsMember.DeleteAsync(String) CsMember.DeleteAsync() CsMember.GetSourceLocationAsync(String) CsMember.GetSourceLocationAsync() CsMember.ReplaceAsync(String, String) CsMember.ReplaceAsync(String) CsMember.GetModel(String) CsMember.IDotNetMember.Security CsMember.IDotNetMember.MemberType CsMember.Parent CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.IDotNetModel.ModelType CsModel.LookupModel(String) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public abstract class CsField : CsMember, ICsField, ICsMember, ICsModel, ICsAttributes, IParent, IDotNetField, IDotNetMember, IDotNetModel, IModelStatus, ISourceFiles, IDotNetAttributes, IDocumentation, IParent, ILookup Constructors | Improve this Doc View Source CsField(Boolean, Boolean, Boolean, SourceCodeType, IReadOnlyList<CsAttribute>, IReadOnlyList<String>, Boolean, String, String, String, String, CsSecurity, Boolean, Boolean, Boolean, String, CsType, String, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsField Declaration protected CsField(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string parentPath, CsSecurity security, bool isReadOnly, bool isStatic, bool isConstant, string constantValue, CsType dataType, string sourceDocument, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description Boolean isLoaded Flag that determines if the model was loaded. Boolean hasErrors Flag that determine if errors were found creating the model. Boolean loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList < CsAttribute > attributes List of the attributes assigned to this model. IReadOnlyList < String > sourceFiles List of the fully qualified paths to the source code files this member is defined in. Boolean hasDocumentation Flag that determines if the model has XML documentation assigned to it. String documentation The xml documentation assigned to the model. String lookupPath The fully qualified model lookup path for this model. String name The name of the model. String parentPath THe fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. Boolean isReadOnly Flag that determines if the model is read only. Boolean isStatic Flag that determines if the model is a static definition. Boolean isConstant Flag that determines if the field is a constant definition. String constantValue The value assigned to the field if it is a constant definition. CsType dataType The type definition for the field. String sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore < ICsModel > modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList < ModelLoadException > modelErrors Optional the error that occured while creating the model. Properties | Improve this Doc View Source ConstantValue The value that was assigned to the constant. Will return as the string representation of the value. Declaration public string ConstantValue { get; } Property Value Type Description String | Improve this Doc View Source DataType The data type assigned to the field. Declaration public CsType DataType { get; } Property Value Type Description CsType | Improve this Doc View Source IsConstant Flag that determines if the field is a constant. Declaration public bool IsConstant { get; } Property Value Type Description Boolean | Improve this Doc View Source IsReadOnly Flag that determines if this field is set to readonly. Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean | Improve this Doc View Source IsStatic Flag that determines if the field is set to be static. Declaration public bool IsStatic { get; } Property Value Type Description Boolean Explicit Interface Implementations | Improve this Doc View Source IDotNetField.DataType The data type assigned to the field. Declaration IDotNetType IDotNetField.DataType { get; } Returns Type Description IDotNetType Implements ICsField ICsMember ICsModel ICsAttributes IParent IDotNetField IDotNetMember IDotNetModel IModelStatus ISourceFiles IDotNetAttributes IDocumentation IParent ILookup Extension Methods DotNetMemberExtensions.FormatCSharpMemberComparisonHashCode(IDotNetMember, MemberComparisonType) DotNetMemberExtensions.FormatCSharpDeclarationSyntax(IDotNetField, Boolean, Boolean, Boolean) DotNetMemberExtensions.FormatCSharpComparisonHashCode(IDotNetField, Boolean, Boolean, Boolean) CSharpModelExtensions.ToModel<T>(CsModel) CsMemberExtensions.FormatCSharpMemberComparisonHashCode(CsMember, MemberComparisonType) CsMemberExtensions.FormatCSharpDeclarationSyntax(CsField, Boolean, Boolean, Boolean) CsMemberExtensions.FormatCSharpComparisonHashCode(CsField, Boolean, Boolean, Boolean)"
  },
  "api/CodeFactory.DotNet.CSharp.CsGenericParameter.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsGenericParameter.html",
    "title": "Class CsGenericParameter | CodeFactory Guidance",
    "keywords": "Class CsGenericParameter Data model that represents the a generic parameter definition. Inheritance Object CsModel CsGenericParameter Implements ICsGenericParameter ICsModel IDotNetGenericParameter IDotNetModel IModelStatus Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.IDotNetModel.ModelType CsModel.LookupModel(String) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public abstract class CsGenericParameter : CsModel, ICsGenericParameter, ICsModel, IDotNetGenericParameter, IDotNetModel, IModelStatus Constructors | Improve this Doc View Source CsGenericParameter(Boolean, Boolean, Boolean, SourceCodeType, CsModelType, Boolean, Boolean, Boolean, Boolean, Boolean, IReadOnlyList<CsType>, CsType, String, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsGenericParameter Declaration protected CsGenericParameter(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, CsModelType modelType, bool hasOutKeyword, bool hasNewConstraint, bool hasClassConstraint, bool hasStructConstraint, bool hasConstraintTypes, IReadOnlyList<CsType> constrainingTypes, CsType type, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description Boolean isLoaded Flag that determines if the model was loaded. Boolean hasErrors Flag that determine if errors were found creating the model. Boolean loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. CsModelType modelType The type of code model created. Boolean hasOutKeyword Flag that determines if parameter has out keyword assigned. Boolean hasNewConstraint Flag that determines if generic parameter supports new keyword. Boolean hasClassConstraint flag that determines if the generic parameter has a constraint requirement to classes. Boolean hasStructConstraint Flag that determines if the generic parameter has a constraint requirement to structures. Boolean hasConstraintTypes Flag that determines if the generic parameter has additional type constraints. IReadOnlyList < CsType > constrainingTypes List of of additional constraints the generic parameter supports. CsType type The type definition for the generic type String sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore < ICsModel > modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList < ModelLoadException > modelErrors Optional the error that occured while creating the model. Properties | Improve this Doc View Source ConstrainingTypes The constraining types the generic parameter must ad hear to. If there are no constraining types an empty list will be returned. Declaration public IReadOnlyList<CsType> ConstrainingTypes { get; } Property Value Type Description IReadOnlyList < CsType > | Improve this Doc View Source HasClassConstraint Flag that determines if the generic parameter has a constraint that it must implement from a class. Declaration public bool HasClassConstraint { get; } Property Value Type Description Boolean | Improve this Doc View Source HasConstraintTypes Flag that determines if the generic parameter has constraining types the parameter must ad hear to. Declaration public bool HasConstraintTypes { get; } Property Value Type Description Boolean | Improve this Doc View Source HasNewConstraint Flag that determines if the generic parameter has a constraint that is must support construction of a new type. Declaration public bool HasNewConstraint { get; } Property Value Type Description Boolean | Improve this Doc View Source HasOutKeyword Flag that determines if the generic parameter uses the out keyword. Declaration public bool HasOutKeyword { get; } Property Value Type Description Boolean | Improve this Doc View Source HasStructConstraint Flag that determines if the generic parameter has a constraint that is must implement from a structure. Declaration public bool HasStructConstraint { get; } Property Value Type Description Boolean | Improve this Doc View Source Type The type definition of the generic parameter. Declaration public CsType Type { get; } Property Value Type Description CsType Explicit Interface Implementations | Improve this Doc View Source IDotNetGenericParameter.ConstrainingTypes The constraining types the generic parameter must ad hear to. If there are no constraining types an empty list will be returned. Declaration IReadOnlyList<IDotNetType> IDotNetGenericParameter.ConstrainingTypes { get; } Returns Type Description IReadOnlyList < IDotNetType > | Improve this Doc View Source IDotNetGenericParameter.Type The type definition of the generic parameter. Declaration IDotNetType IDotNetGenericParameter.Type { get; } Returns Type Description IDotNetType Implements ICsGenericParameter ICsModel IDotNetGenericParameter IDotNetModel IModelStatus Extension Methods DotNetModelExtensions.FormatCSharpGenericWhereClauseSyntax(IDotNetGenericParameter) CSharpModelExtensions.ToModel<T>(CsModel) CsModelExtensions.FormatCSharpGenericWhereClauseSyntax(CsGenericParameter)"
  },
  "api/CodeFactory.DotNet.CSharp.CSharpModelExtensions.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CSharpModelExtensions.html",
    "title": "Class CSharpModelExtensions | CodeFactory Guidance",
    "keywords": "Class CSharpModelExtensions Extension class that manages extensions for the c# models. Inheritance Object CSharpModelExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public static class CSharpModelExtensions Methods | Improve this Doc View Source ClassIterator(IEnumerable<CsContainer>) Iterator that returns CsClass models from an enumeration of ICsContainer Declaration public static IEnumerable<CsClass> ClassIterator(this IEnumerable<CsContainer> source) Parameters Type Name Description IEnumerable < CsContainer > source The source container to iterate over. Returns Type Description IEnumerable < CsClass > The iterator to be executed. | Improve this Doc View Source EventIterator(IEnumerable<CsMember>) Iterator that returns CsEvent models from an enumeration of ICsMember Declaration public static IEnumerable<CsEvent> EventIterator(this IEnumerable<CsMember> source) Parameters Type Name Description IEnumerable < CsMember > source The source container to iterate over. Returns Type Description IEnumerable < CsEvent > The iterator to be executed. | Improve this Doc View Source FieldIterator(IEnumerable<CsMember>) Iterator that returns ICsField models from an enumeration of ICsMember Declaration public static IEnumerable<CsField> FieldIterator(this IEnumerable<CsMember> source) Parameters Type Name Description IEnumerable < CsMember > source The source container to iterate over. Returns Type Description IEnumerable < CsField > The iterator to be executed. | Improve this Doc View Source InterfaceIterator(IEnumerable<CsContainer>) Iterator that returns CsInterface models from an enumeration of ICsContainer Declaration public static IEnumerable<CsInterface> InterfaceIterator(this IEnumerable<CsContainer> source) Parameters Type Name Description IEnumerable < CsContainer > source The source container to iterate over. Returns Type Description IEnumerable < CsInterface > The iterator to be executed. | Improve this Doc View Source MethodIterator(IEnumerable<CsMember>) Iterator that returns CsMethod models from an enumeration of CsMember Declaration public static IEnumerable<CsMethod> MethodIterator(this IEnumerable<CsMember> source) Parameters Type Name Description IEnumerable < CsMember > source The source container to iterate over. Returns Type Description IEnumerable < CsMethod > The iterator to be executed. | Improve this Doc View Source ModelIterator<T>(IEnumerable<CsModel>) Iterator that returns the target model type from an enumeration of ICsModel Declaration public static IEnumerable<T> ModelIterator<T>(this IEnumerable<CsModel> source) where T : class, ICsModel Parameters Type Name Description IEnumerable < CsModel > source The source container to iterate over. Returns Type Description IEnumerable <T> The iterator to be executed. Type Parameters Name Description T The target type of model to return. | Improve this Doc View Source PropertyIterator(IEnumerable<CsMember>) Iterator that returns CsProperty models from an enumeration of CsMember Declaration public static IEnumerable<CsProperty> PropertyIterator(this IEnumerable<CsMember> source) Parameters Type Name Description IEnumerable < CsMember > source The source container to iterate over. Returns Type Description IEnumerable < CsProperty > The iterator to be executed. | Improve this Doc View Source StructureIterator(IEnumerable<CsContainer>) Iterator that returns CsStructure models from an enumeration of ICsContainer Declaration public static IEnumerable<CsStructure> StructureIterator(this IEnumerable<CsContainer> source) Parameters Type Name Description IEnumerable < CsContainer > source The source container to iterate over. Returns Type Description IEnumerable < CsStructure > The iterator to be executed. | Improve this Doc View Source ToModel<T>(CsModel) Extension method that converts a C# model into a target C# model format. If the cast does not apply then a null will be returned. Declaration public static T ToModel<T>(this CsModel source) where T : class, ICsModel Parameters Type Name Description CsModel source The source model to transform. Returns Type Description T The c# model cast to the target type or null if the cast is invalid. Type Parameters Name Description T The target type of model to return."
  },
  "api/CodeFactory.DotNet.CSharp.CsInterface.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsInterface.html",
    "title": "Class CsInterface | CodeFactory Guidance",
    "keywords": "Class CsInterface Data model that represents in definition of an interface. Inheritance Object CsModel CsContainer CsInterface Implements ICsInterface ICsContainer ICsModel ICsAttributes ICsGeneric IParent IDotNetInterface IDotNetContainer IDotNetModel IModelStatus ISourceFiles IDotNetAttributes IDocumentation IDotNetGeneric IParent ILookup Inherited Members CsContainer.HasAttributes CsContainer.Attributes CsContainer.IDotNetAttributes.Attributes CsContainer.IsGeneric CsContainer.GenericParameters CsContainer.GenericTypes CsContainer.IDotNetGeneric.GenericParameters CsContainer.HasStrongTypesInGenerics CsContainer.IDotNetGeneric.GenericTypes CsContainer.SourceFiles CsContainer.HasDocumentation CsContainer.Documentation CsContainer.IParent.Parent CsContainer.LookupPath CsContainer.IDotNetContainer.ContainerType CsContainer.Security CsContainer.InheritedInterfaces CsContainer.Members CsContainer.Methods CsContainer.Properties CsContainer.Events CsContainer.GetBodySyntaxAsync() CsContainer.AddBeforeAsync(String, String) CsContainer.AddBeforeAsync(String) CsContainer.AddAfterAsync(String, String) CsContainer.AddAfterAsync(String) CsContainer.AddToBeginningAsync(String, String) CsContainer.AddToBeginningAsync(String) CsContainer.AddToEndAsync(String, String) CsContainer.AddToEndAsync(String) CsContainer.DeleteAsync(String) CsContainer.DeleteAsync() CsContainer.GetSourceLocationAsync(String) CsContainer.GetSourceLocationAsync() CsContainer.GetBodySourceLocationAsync(String) CsContainer.GetBodySourceLocationAsync() CsContainer.ReplaceAsync(String, String) CsContainer.ReplaceAsync(String) CsContainer.GetModel(String) CsContainer.ContainerType CsContainer.Name CsContainer.Namespace CsContainer.IDotNetContainer.Security CsContainer.IDotNetContainer.InheritedInterfaces CsContainer.IDotNetContainer.Members CsContainer.IDotNetContainer.Methods CsContainer.IDotNetContainer.Properties CsContainer.IDotNetContainer.Events CsContainer.Parent CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.IDotNetModel.ModelType CsModel.LookupModel(String) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public abstract class CsInterface : CsContainer, ICsInterface, ICsContainer, ICsModel, ICsAttributes, ICsGeneric, IParent, IDotNetInterface, IDotNetContainer, IDotNetModel, IModelStatus, ISourceFiles, IDotNetAttributes, IDocumentation, IDotNetGeneric, IParent, ILookup Constructors | Improve this Doc View Source CsInterface(Boolean, Boolean, Boolean, SourceCodeType, IReadOnlyList<CsAttribute>, Boolean, Boolean, IReadOnlyList<CsGenericParameter>, IReadOnlyList<CsType>, IReadOnlyList<String>, Boolean, String, String, String, String, String, CsSecurity, IReadOnlyList<CsInterface>, IReadOnlyList<CsMember>, String, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsInterface Declaration protected CsInterface(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, bool isGeneric, bool hasStrongTypesInGenerics, IReadOnlyList<CsGenericParameter> genericParameters, IReadOnlyList<CsType> genericTypes, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string ns, string parentPath, CsSecurity security, IReadOnlyList<CsInterface> inheritedInterfaces, IReadOnlyList<CsMember> members, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description Boolean isLoaded Flag that determines if the model was loaded. Boolean hasErrors Flag that determine if errors were found creating the model. Boolean loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList < CsAttribute > attributes List of the attributes assigned to this model. Boolean isGeneric Flag that determines if the container is a generic definition. Boolean hasStrongTypesInGenerics Flag that determines if the generics use strong type definitions. IReadOnlyList < CsGenericParameter > genericParameters Generic parameters assigned to the container. IReadOnlyList < CsType > genericTypes Target types for the generic parameters assigned to the container. IReadOnlyList < String > sourceFiles List of the fully qualified paths to the source code files this model is defined in. Boolean hasDocumentation Flag that determines if the model has XML documentation assigned to it. String documentation The xml documentation assigned to the model. String lookupPath The fully qualified model lookup path for this model. String name The name of the model. String ns The namespace the container belongs to. String parentPath The fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. IReadOnlyList < CsInterface > inheritedInterfaces The interfaces that are inherited by this container. IReadOnlyList < CsMember > members The members assigned to this container. String sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore < ICsModel > modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList < ModelLoadException > modelErrors Optional the error that occured while creating the model. Implements ICsInterface ICsContainer ICsModel ICsAttributes ICsGeneric IParent IDotNetInterface IDotNetContainer IDotNetModel IModelStatus ISourceFiles IDotNetAttributes IDocumentation IDotNetGeneric IParent ILookup Extension Methods DotNetContainerExtensions.FormatCSharpComparisonMembers(IDotNetContainer, MemberComparisonType) CsContainerExtensions.FormatCSharpComparisonMembers(CsContainer, MemberComparisonType) CSharpModelExtensions.ToModel<T>(CsModel)"
  },
  "api/CodeFactory.DotNet.CSharp.CsKnownLanguageType.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsKnownLanguageType.html",
    "title": "Enum CsKnownLanguageType | CodeFactory Guidance",
    "keywords": "Enum CsKnownLanguageType Enumeration that identifies well know types used by the C# language. Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public enum CsKnownLanguageType Fields Name Description Boolean The well known data type of Boolean Character The well know data type of Char that stores a character. DateTime Well known type that holds a date and a time DateTime Decimal The well known data type is a decimal floating point number ±1.0 x 10-28 to ±7.9228 x 10 to the 28 power Decimal Double The well known data type is a double precision floating point number ±5.0 × 10−324 to ±1.7 × 10 to the 308 power Double NotWellKnown The language type definition is not well known (Default Value) Object Implements the well known type Object . PlatformPointer Well known type that represents a pointer that is platform specific UIntPtr Pointer Well known type that is used to represent the location of a pointer or handle IntPtr Signed16BitInteger The well known data type is a signed 16 bit integer -32,768 to 32,767 Int16 Signed32BitInteger The well known data type is a signed 32 bit integer -2,147,483,648 to 2,147,483,647 Int32 Signed64BitInteger The well known data type is a signed 64 bit integer -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 Int64 Signed8BitInteger The well know data type is a signed 8 bit integer -128 to 127 SByte . Single The well known data type is a single precision floating point number ±1.5 x 10−45 to ±3.4 x 10 to the 38 power Single String Well know type that contains an immutable sequence of UTF-16 code units String Unsigned16BitInteger The well know data type is a unsigned 16 bit integer 0 to 65,535 UInt16 Unsigned32BitInteger The well know data type is a unsigned 32 bit integer 0 to 4,294,967,295 UInt32 Unsigned64BitInteger The well known data type is a unsigned 64 bit integer 0 to 18,446,744,073,709,551,615 UInt64 UnSigned8BitInteger The well know data type is an unsigned 8 bit integer 0 to 255 Byte Void Is a special return type that specifies no value will be returned. Void"
  },
  "api/CodeFactory.DotNet.CSharp.CsMember.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsMember.html",
    "title": "Class CsMember | CodeFactory Guidance",
    "keywords": "Class CsMember Data model that builds the base class definition for all member types. Inheritance Object CsModel CsMember CsEvent CsField CsMethod CsProperty Implements ICsMember ICsModel ICsAttributes IDotNetMember IDotNetModel IModelStatus ISourceFiles IDotNetAttributes IDocumentation ILookup IParent IParent Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.IDotNetModel.ModelType CsModel.LookupModel(String) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public abstract class CsMember : CsModel, ICsMember, ICsModel, ICsAttributes, IDotNetMember, IDotNetModel, IModelStatus, ISourceFiles, IDotNetAttributes, IDocumentation, ILookup, IParent, IParent Constructors | Improve this Doc View Source CsMember(Boolean, Boolean, Boolean, SourceCodeType, CsModelType, IReadOnlyList<CsAttribute>, IReadOnlyList<String>, Boolean, String, String, String, String, CsSecurity, CsMemberType, String, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsMember Declaration protected CsMember(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, CsModelType modelType, IReadOnlyList<CsAttribute> attributes, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string parentPath, CsSecurity security, CsMemberType memberType, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description Boolean isLoaded Flag that determines if the model was loaded. Boolean hasErrors Flag that determine if errors were found creating the model. Boolean loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. CsModelType modelType The type of model that represents this member. IReadOnlyList < CsAttribute > attributes List of the attributes assigned to this model. IReadOnlyList < String > sourceFiles List of the fully qualified paths to the source code files this member is defined in. Boolean hasDocumentation Flag that determines if the model has XML documentation assigned to it. String documentation The xml documentation assigned to the model. String lookupPath The fully qualified model lookup path for this model. String name The name of the model. String parentPath THe fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. CsMemberType memberType The type of member this model represents. String sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore < ICsModel > modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList < ModelLoadException > modelErrors Optional the error that occured while creating the model. Properties | Improve this Doc View Source Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration public IReadOnlyList<CsAttribute> Attributes { get; } Property Value Type Description IReadOnlyList < CsAttribute > | Improve this Doc View Source Documentation Documentation that has been assigned to this model. Declaration public string Documentation { get; } Property Value Type Description String | Improve this Doc View Source HasAttributes Flag that determines if attributes are assigned. Declaration public bool HasAttributes { get; } Property Value Type Description Boolean | Improve this Doc View Source HasDocumentation Flag that determines if the model has code level documentation assigned to it. Declaration public bool HasDocumentation { get; } Property Value Type Description Boolean | Improve this Doc View Source LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description String | Improve this Doc View Source MemberType The type of member the model is. Declaration public CsMemberType MemberType { get; } Property Value Type Description CsMemberType | Improve this Doc View Source Name The name assigned to the member. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel | Improve this Doc View Source Security The security scope that has been assigned to the member. Declaration public CsSecurity Security { get; } Property Value Type Description CsSecurity | Improve this Doc View Source SourceFiles The source file or files in which the model was loaded from. This will be an empty enumeration if the source models were loaded from metadata only. Declaration public IReadOnlyList<string> SourceFiles { get; } Property Value Type Description IReadOnlyList < String > Methods | Improve this Doc View Source AddAfterAsync(String) Adds the source code directly after the definition of the ICsMember in the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddAfterAsync(String, String) Adds the source code directly after the definition of the ICsMember in the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String) Adds the source code directly before the definition of the ICsMember in the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String, String) Adds the source code directly before the definition of the ICsMember in the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync() Deletes the definition of the member from the source document. Declaration public abstract Task<CsSource> DeleteAsync() Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the member has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync(String) Deletes the definition of the member from the source document. Declaration public abstract Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The source document that the member is to be removed from. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the member has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source GetModel(String) Gets a ICsModel from the currently loaded source code. Declaration public CsModel GetModel(string lookupPath) Parameters Type Name Description String lookupPath The fully qualified path to the model to be loaded. Returns Type Description CsModel The loaded model or null if the model could not be found. | Improve this Doc View Source GetSourceLocationAsync() Gets the starting and ending locations within the document where the member is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task < ISourceLocation > The source location for the member. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source GetSourceLocationAsync(String) Gets the starting and ending locations within the document where the member is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The fully qualified path to the document that has the member defined in. Returns Type Description Task < ISourceLocation > The source location for the member. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source ReplaceAsync(String) Replaces the current member with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source ReplaceAsync(String, String) Replaces the current member with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Explicit Interface Implementations | Improve this Doc View Source IDotNetAttributes.Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration IReadOnlyList<IDotNetAttribute> IDotNetAttributes.Attributes { get; } Returns Type Description IReadOnlyList < IDotNetAttribute > | Improve this Doc View Source IDotNetMember.MemberType The type of member the model is. Declaration DotNetMemberType IDotNetMember.MemberType { get; } Returns Type Description DotNetMemberType | Improve this Doc View Source IDotNetMember.Security The security scope that has been assigned to the member. Declaration DotNetSecurity IDotNetMember.Security { get; } Returns Type Description DotNetSecurity | Improve this Doc View Source IParent.Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration IDotNetModel IParent.Parent { get; } Returns Type Description IDotNetModel Implements ICsMember ICsModel ICsAttributes IDotNetMember IDotNetModel IModelStatus ISourceFiles IDotNetAttributes IDocumentation ILookup IParent IParent Extension Methods DotNetMemberExtensions.FormatCSharpMemberComparisonHashCode(IDotNetMember, MemberComparisonType) CSharpModelExtensions.ToModel<T>(CsModel) CsMemberExtensions.FormatCSharpMemberComparisonHashCode(CsMember, MemberComparisonType)"
  },
  "api/CodeFactory.DotNet.CSharp.CsMemberExtensions.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsMemberExtensions.html",
    "title": "Class CsMemberExtensions | CodeFactory Guidance",
    "keywords": "Class CsMemberExtensions Extension methods that support model that implement the CsMember interface. Inheritance Object CsMemberExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public static class CsMemberExtensions Methods | Improve this Doc View Source FormatCSharpComparisonHashCode(CsEvent, Boolean, Boolean, Boolean) Gets the hash code for a formatted event signature using the C# format. Declaration public static int FormatCSharpComparisonHashCode(this CsEvent source, bool includeSecurity = false, bool includeAttributes = false, bool includeKeywords = false) Parameters Type Name Description CsEvent source The sources CsEvent model. Boolean includeSecurity Optional parameter that determines to generate security in the definition. By default this is false. Boolean includeAttributes Optional parameter that determines if the attributes should be included in the definition. By default this is false. Boolean includeKeywords Optional parameter that determines if all keywords are included in the definition. By default this is false. Returns Type Description Int32 The hash code of the formatted model. Exceptions Type Condition ArgumentNullException This is thrown if the model is null. | Improve this Doc View Source FormatCSharpComparisonHashCode(CsField, Boolean, Boolean, Boolean) Gets the hash code for a formatted field signature using the C# format. Declaration public static int FormatCSharpComparisonHashCode(this CsField source, bool includeSecurity = false, bool includeAttributes = false, bool includeKeywords = false) Parameters Type Name Description CsField source The sources CsField model. Boolean includeSecurity Optional parameter that determines to generate security in the definition. By default this is false. Boolean includeAttributes Optional parameter that determines if the attributes should be included in the definition. By default this is false. Boolean includeKeywords Optional parameter that determines if all keywords other then constant are included in the definition. By default this is false. Returns Type Description Int32 The has code of the formatted field. Exceptions Type Condition ArgumentNullException This is thrown if the model is null. | Improve this Doc View Source FormatCSharpComparisonHashCode(CsMethod, Boolean, Boolean, Boolean) Gets the hash code for a formatted method signature using the C# format. Declaration public static int FormatCSharpComparisonHashCode(this CsMethod source, bool includeSecurity = false, bool includeAttributes = false, bool includeKeywords = false) Parameters Type Name Description CsMethod source The sources CsMethod model. Boolean includeSecurity Optional parameter that determines to generate security in the definition. By default this is false. Boolean includeAttributes Optional parameter that determines if the attributes should be included in the definition. By default this is false. Boolean includeKeywords Optional parameter that determines if all keywords are included in the definition. By default this is false. Returns Type Description Int32 The hash code of the formatted model. Exceptions Type Condition ArgumentNullException This is thrown if the model is null. | Improve this Doc View Source FormatCSharpComparisonHashCode(CsProperty, Boolean, Boolean, Boolean) Gets the hash code for a formatted property signature using the C# format. Declaration public static int FormatCSharpComparisonHashCode(this CsProperty source, bool includeSecurity = false, bool includeAttributes = false, bool includeKeywords = false) Parameters Type Name Description CsProperty source The sources CsProperty model. Boolean includeSecurity Optional parameter that determines to generate security in the definition. By default this is false. Boolean includeAttributes Optional parameter that determines if the attributes should be included in the definition. By default this is false. Boolean includeKeywords Optional parameter that determines if all keywords are included in the definition. By default this is false. Returns Type Description Int32 The hash code of the formatted model. Exceptions Type Condition ArgumentNullException This is thrown if the model is null. | Improve this Doc View Source FormatCSharpDeclarationSyntax(CsEvent, Boolean, Boolean, Boolean) Generates the syntax definition of an event in c# syntax. Declaration public static string FormatCSharpDeclarationSyntax(this CsEvent source, bool includeSecurity = true, bool includeAttributes = true, bool includeKeywords = true) Parameters Type Name Description CsEvent source The source CsEvent model to generate. Boolean includeSecurity Includes the security scope which was defined in the model. Boolean includeAttributes Includes definition of the attributes assigned to the model. Boolean includeKeywords Includes all keywords assigned to the source model. Returns Type Description String Fully formatted event definition or null if the event data could not be generated. | Improve this Doc View Source FormatCSharpDeclarationSyntax(CsField, Boolean, Boolean, Boolean) Generates the syntax definition of field in c# syntax. The default definition with all options turned off will return the filed signature and constants if defined and the default values. Declaration public static string FormatCSharpDeclarationSyntax(this CsField source, bool includeSecurity = true, bool includeAttributes = true, bool includeKeywords = true) Parameters Type Name Description CsField source The source ICsField model to generate. Boolean includeSecurity Includes the security scope which the field was defined in the model. Boolean includeAttributes Includes definition of the attributes assigned to the model. Boolean includeKeywords Includes all keywords assigned to the field from the source model. Returns Type Description String Fully formatted field definition or null if the field data could not be generated. | Improve this Doc View Source FormatCSharpDeclarationSyntax(CsMethod, Boolean, Boolean, Boolean) Generates the syntax definition of an method in c# syntax. Declaration public static string FormatCSharpDeclarationSyntax(this CsMethod source, bool includeSecurity = true, bool includeAttributes = true, bool includeKeywords = true) Parameters Type Name Description CsMethod source The source CsMethod model to generate. Boolean includeSecurity Includes the security scope which was defined in the model. Boolean includeAttributes Includes definition of the attributes assigned to the model. Boolean includeKeywords Includes all keywords assigned to the source model. Returns Type Description String Fully formatted event definition or null if the event data could not be generated. | Improve this Doc View Source FormatCSharpDeclarationSyntax(CsProperty, Boolean, Boolean, Boolean) Generates the syntax definition of a default no backing fields property definition in c# syntax. Declaration public static string FormatCSharpDeclarationSyntax(this CsProperty source, bool includeSecurity = true, bool includeAttributes = true, bool includeKeywords = true) Parameters Type Name Description CsProperty source The source CsProperty model to generate. Boolean includeSecurity Includes the security scope which the property was defined in the model. Boolean includeAttributes Includes definition of the attributes assigned to the model. Boolean includeKeywords Includes all keywords assigned to the property from the source model. Returns Type Description String Fully formatted property definition or null if the property data could not be generated. | Improve this Doc View Source FormatCSharpMemberComparisonHashCode(CsMember, MemberComparisonType) Gets the hash code for a formatted model signature using the C# format. Declaration public static int FormatCSharpMemberComparisonHashCode(this CsMember source, MemberComparisonType comparisonType = MemberComparisonType.Base) Parameters Type Name Description CsMember source The sources ICsModel model. MemberComparisonType comparisonType The type of comparision format to use when generating the hashcode. Default is set to the base comparision type. Returns Type Description Int32 The has code of the formatted model. Exceptions Type Condition ArgumentNullException This is thrown if the model is null. | Improve this Doc View Source SourceMissingInterfaceMembers(ICsSource) Extension method that checks a CsSource model and determines if the classes and structures in the source have any missing interface members. Declaration public static IReadOnlyList<KeyValuePair<CsContainer, IReadOnlyList<CsMember>>> SourceMissingInterfaceMembers(this ICsSource source) Parameters Type Name Description ICsSource source The source implementation to validate. Returns Type Description IReadOnlyList < KeyValuePair < CsContainer , IReadOnlyList < CsMember >>> The list of missing members by target container, or an empty list if nothing is missing."
  },
  "api/CodeFactory.DotNet.CSharp.CsMemberType.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsMemberType.html",
    "title": "Enum CsMemberType | CodeFactory Guidance",
    "keywords": "Enum CsMemberType Enumeration of the types of members that are supported in the c# source code type. Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public enum CsMemberType Fields Name Description Event The member is a event model. Field The member is a field model. Method The member is a method model. Property The member is a property model. Unknown The member type is currently not known."
  },
  "api/CodeFactory.DotNet.CSharp.CsMethod.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsMethod.html",
    "title": "Class CsMethod | CodeFactory Guidance",
    "keywords": "Class CsMethod Data model that represents a method definition. Inheritance Object CsModel CsMember CsMethod Implements ICsMethod ICsMember ICsModel ICsAttributes IParent ICsGeneric IDotNetMethod IDotNetMember IDotNetModel IModelStatus ISourceFiles IDotNetAttributes IDocumentation IParent ILookup IDotNetGeneric Inherited Members CsMember.HasAttributes CsMember.Attributes CsMember.IDotNetAttributes.Attributes CsMember.SourceFiles CsMember.HasDocumentation CsMember.Documentation CsMember.IParent.Parent CsMember.LookupPath CsMember.Name CsMember.Security CsMember.MemberType CsMember.AddBeforeAsync(String, String) CsMember.AddBeforeAsync(String) CsMember.AddAfterAsync(String, String) CsMember.AddAfterAsync(String) CsMember.DeleteAsync(String) CsMember.DeleteAsync() CsMember.GetSourceLocationAsync(String) CsMember.GetSourceLocationAsync() CsMember.ReplaceAsync(String, String) CsMember.ReplaceAsync(String) CsMember.GetModel(String) CsMember.IDotNetMember.Security CsMember.IDotNetMember.MemberType CsMember.Parent CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.IDotNetModel.ModelType CsModel.LookupModel(String) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public abstract class CsMethod : CsMember, ICsMethod, ICsMember, ICsModel, ICsAttributes, IParent, ICsGeneric, IDotNetMethod, IDotNetMember, IDotNetModel, IModelStatus, ISourceFiles, IDotNetAttributes, IDocumentation, IParent, ILookup, IDotNetGeneric Constructors | Improve this Doc View Source CsMethod(Boolean, Boolean, Boolean, SourceCodeType, IReadOnlyList<CsAttribute>, IReadOnlyList<String>, Boolean, String, String, String, String, CsSecurity, Boolean, Boolean, IReadOnlyList<CsGenericParameter>, IReadOnlyList<CsType>, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, CsMethodType, CsType, IReadOnlyList<CsParameter>, String, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsMethod Declaration protected CsMethod(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string parentPath, CsSecurity security, bool isGeneric, bool hasStrongTypesInGenerics, IReadOnlyList<CsGenericParameter> genericParameters, IReadOnlyList<CsType> genericTypes, bool hasParameters, bool isAbstract, bool isVirtual, bool isSealed, bool isOverride, bool isStatic, bool isVoid, bool isAsync, bool isExtension, CsMethodType methodType, CsType returnType, IReadOnlyList<CsParameter> parameters, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description Boolean isLoaded Flag that determines if the model was loaded. Boolean hasErrors Flag that determine if errors were found creating the model. Boolean loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList < CsAttribute > attributes List of the attributes assigned to this model. IReadOnlyList < String > sourceFiles List of the fully qualified paths to the source code files this member is defined in. Boolean hasDocumentation Flag that determines if the model has XML documentation assigned to it. String documentation The xml documentation assigned to the model. String lookupPath The fully qualified model lookup path for this model. String name The name of the model. String parentPath THe fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. Boolean isGeneric Flag that determines if the method is a generic definition. Boolean hasStrongTypesInGenerics Flag that determines if the generics use strong type definitions. IReadOnlyList < CsGenericParameter > genericParameters Generic parameters assigned to the method. IReadOnlyList < CsType > genericTypes Target types for the generic parameters assigned to the method. Boolean hasParameters Flag that determines if the method had parameters. Boolean isAbstract Flag that determines if the model is abstract. Boolean isVirtual Flag that determines if the model is virtual. Boolean isSealed Flag that determines if the model is sealed. Boolean isOverride Flag that determines if the model is overridden. Boolean isStatic Flag that determines if the model is static. Boolean isVoid Flag that determines if the return type is void. Boolean isAsync Flag that determines if the method has the async keyword assigned. Boolean isExtension Flag that determines if the method is an extension method. CsMethodType methodType The type of method that was implemented. CsType returnType The type definition for the return type. IReadOnlyList < CsParameter > parameters The parameters assigned to the method. String sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore < ICsModel > modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList < ModelLoadException > modelErrors Optional the error that occured while creating the model. Properties | Improve this Doc View Source GenericParameters List of the generic parameters assigned. Declaration public IReadOnlyList<CsGenericParameter> GenericParameters { get; } Property Value Type Description IReadOnlyList < CsGenericParameter > | Improve this Doc View Source GenericTypes List of the strong types that are implemented for each generic parameter. This will be an empty List when there is no generic types implemented. Declaration public IReadOnlyList<CsType> GenericTypes { get; } Property Value Type Description IReadOnlyList < CsType > | Improve this Doc View Source HasParameters Flag that determines if the method has parameters assigned to it. Declaration public bool HasParameters { get; } Property Value Type Description Boolean | Improve this Doc View Source HasStrongTypesInGenerics Flag that determines if the generics implementation has strong types passed in to the generics implementation. Declaration public bool HasStrongTypesInGenerics { get; } Property Value Type Description Boolean | Improve this Doc View Source IsAbstract Flag that determines if the method has been implemented as abstract. Declaration public bool IsAbstract { get; } Property Value Type Description Boolean | Improve this Doc View Source IsAsync Flag that determines if the method implements the Async keyword. Declaration public bool IsAsync { get; } Property Value Type Description Boolean | Improve this Doc View Source IsExtension Flag that determines if the method is an extension method. Declaration public bool IsExtension { get; } Property Value Type Description Boolean | Improve this Doc View Source IsGeneric Flag the determines if this item supports generics Declaration public bool IsGeneric { get; } Property Value Type Description Boolean | Improve this Doc View Source IsOverride Flag that determines if the method has been overridden. Declaration public bool IsOverride { get; } Property Value Type Description Boolean | Improve this Doc View Source IsSealed Flag that determines if the method has been sealed. Declaration public bool IsSealed { get; } Property Value Type Description Boolean | Improve this Doc View Source IsStatic Flag that determines if this is a static method. Declaration public bool IsStatic { get; } Property Value Type Description Boolean | Improve this Doc View Source IsVirtual Flag that determines if the method has been implemented as virtual. Declaration public bool IsVirtual { get; } Property Value Type Description Boolean | Improve this Doc View Source IsVoid Flag that determines if the methods return type is void. Declaration public bool IsVoid { get; } Property Value Type Description Boolean | Improve this Doc View Source MethodType Determines the type of method that was loaded into this model. Declaration public CsMethodType MethodType { get; } Property Value Type Description CsMethodType | Improve this Doc View Source Parameters Enumeration of the parameters that have been assigned to the method. If HasParameters property is set to false this will be null. Declaration public IReadOnlyList<CsParameter> Parameters { get; } Property Value Type Description IReadOnlyList < CsParameter > | Improve this Doc View Source ReturnType The type information about the return type assigned to the method. if flag IsVoid is true then the return type will be set to null. Declaration public CsType ReturnType { get; } Property Value Type Description CsType Methods | Improve this Doc View Source GetBodySyntaxAsync() The source code syntax that is stored in the body of the method. This will be null if the method was not loaded from source code. Declaration public abstract Task<string> GetBodySyntaxAsync() Returns Type Description Task < String > Explicit Interface Implementations | Improve this Doc View Source IDotNetGeneric.GenericParameters List of the generic parameters assigned. Declaration IReadOnlyList<IDotNetGenericParameter> IDotNetGeneric.GenericParameters { get; } Returns Type Description IReadOnlyList < IDotNetGenericParameter > | Improve this Doc View Source IDotNetGeneric.GenericTypes Enumeration of the strong types that are implemented for each generic parameter. This will be an empty list when there is no generic types implemented. Declaration IReadOnlyList<IDotNetType> IDotNetGeneric.GenericTypes { get; } Returns Type Description IReadOnlyList < IDotNetType > | Improve this Doc View Source IDotNetMethod.MethodType Determines the type of method that was loaded into this model. Declaration DotNetMethodType IDotNetMethod.MethodType { get; } Returns Type Description DotNetMethodType | Improve this Doc View Source IDotNetMethod.Parameters Enumeration of the parameters that have been assigned to the method. If HasParameters property is set to false this will be null. Declaration IReadOnlyList<IDotNetParameter> IDotNetMethod.Parameters { get; } Returns Type Description IReadOnlyList < IDotNetParameter > | Improve this Doc View Source IDotNetMethod.ReturnType The type information about the return type assigned to the method. if flag IsVoid is true then the return type will be set to null. Declaration IDotNetType IDotNetMethod.ReturnType { get; } Returns Type Description IDotNetType Implements ICsMethod ICsMember ICsModel ICsAttributes IParent ICsGeneric IDotNetMethod IDotNetMember IDotNetModel IModelStatus ISourceFiles IDotNetAttributes IDocumentation IParent ILookup IDotNetGeneric Extension Methods DotNetMemberExtensions.FormatCSharpMemberComparisonHashCode(IDotNetMember, MemberComparisonType) DotNetMemberExtensions.FormatCSharpDeclarationSyntax(IDotNetMethod, Boolean, Boolean, Boolean, Boolean) DotNetMemberExtensions.FormatCSharpComparisonHashCode(IDotNetMethod, Boolean, Boolean, Boolean) CSharpModelExtensions.ToModel<T>(CsModel) CsMemberExtensions.FormatCSharpMemberComparisonHashCode(CsMember, MemberComparisonType) CsMemberExtensions.FormatCSharpDeclarationSyntax(CsMethod, Boolean, Boolean, Boolean) CsMemberExtensions.FormatCSharpComparisonHashCode(CsMethod, Boolean, Boolean, Boolean) InterfaceMemberExtensions.FormatInterfaceImplementationSignature(CsMethod, Boolean)"
  },
  "api/CodeFactory.DotNet.CSharp.CsMethodType.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsMethodType.html",
    "title": "Enum CsMethodType | CodeFactory Guidance",
    "keywords": "Enum CsMethodType Enumeration of the type of methods that are supported in C#. Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public enum CsMethodType Fields Name Description Add The method is a add method that adds subscription to a event. Constructor The method is a constructor for a supporting class or structure. Destructor The method is a destructor for a supporting class. Get The method supports the get functionality from a property. Invoke The method supports the Invoke functionality from a delegate. Local The method is a local method and imbedded in another method Member The method is a member of a supporting interface, class or structure. Raise The method supports the raise functionality from an event. Remove The method is a remove method that removes subscription from an event. Set The method supports the set functionality from a property. Unknown The type of method is unknown"
  },
  "api/CodeFactory.DotNet.CSharp.CsModel.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsModel.html",
    "title": "Class CsModel | CodeFactory Guidance",
    "keywords": "Class CsModel Base class that all C# compiler based data models derive from. Inheritance Object CsModel CsAttribute CsAttributeParameter CsAttributeParameterValue CsContainer CsDelegate CsEnum CsEnumValue CsGenericParameter CsMember CsNamespace CsParameter CsParameterDefaultValue CsSource CsTupleTypeParameter CsType CsUsingStatement Implements ICsModel IDotNetModel IModelStatus Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public abstract class CsModel : ICsModel, IDotNetModel, IModelStatus Constructors | Improve this Doc View Source CsModel(Boolean, Boolean, Boolean, SourceCodeType, CsModelType, String, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsModel Declaration protected CsModel(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, CsModelType modelType, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description Boolean isLoaded Flag that determines if the model was loaded. Boolean hasErrors Flag that determine if errors were found creating the model. Boolean loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. CsModelType modelType The type of code model created. String sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore < ICsModel > modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList < ModelLoadException > modelErrors Optional the error that occured while creating the model. Fields | Improve this Doc View Source LocalModelErrors Model field that stores the models load exceptions. Declaration protected readonly IReadOnlyList<ModelLoadException> LocalModelErrors Field Value Type Description IReadOnlyList < ModelLoadException > | Improve this Doc View Source ModelStore Model field used to lookup models that were created during the compile or reference lookup using the C# compiler. Declaration protected readonly ModelStore<ICsModel> ModelStore Field Value Type Description ModelStore < ICsModel > Properties | Improve this Doc View Source HasErrors Flag that determines if this model or one of the children of this model has an error. Declaration public bool HasErrors { get; } Property Value Type Description Boolean | Improve this Doc View Source IsLoaded Flag that determines if this model was able to load. Declaration public bool IsLoaded { get; } Property Value Type Description Boolean | Improve this Doc View Source Language The target language this model was loaded from. Declaration public SourceCodeType Language { get; } Property Value Type Description SourceCodeType | Improve this Doc View Source LoadedFromSource Flag that determines if this model was loaded from source code or was loaded through reflects or symbol libraries. Declaration public bool LoadedFromSource { get; } Property Value Type Description Boolean | Improve this Doc View Source ModelType The type of c# model that is implemented. Declaration public CsModelType ModelType { get; } Property Value Type Description CsModelType | Improve this Doc View Source SourceDocument The fully qualified path to the document that was used to load the model from source. This will be populated if the model was loaded from source. Declaration public string SourceDocument { get; } Property Value Type Description String Methods | Improve this Doc View Source GetErrors() Gets the ModelLoadException from the current model and all child models of this model. Declaration public abstract IReadOnlyList<ModelLoadException> GetErrors() Returns Type Description IReadOnlyList < ModelLoadException > Returns a IReadOnlyList<T> of the ModelLoadException exceptions or an empty list if no exceptions exist. | Improve this Doc View Source LookupModel(String) Helper method that looks up a code factory model from the model store. Declaration protected CsModel LookupModel(string path) Parameters Type Name Description String path The fully qualified path of the model to be loaded from the model store. Returns Type Description CsModel The loaded model or null if the model could not be loaded, or found. Explicit Interface Implementations | Improve this Doc View Source IDotNetModel.ModelType The type of dot net model that was loaded. Declaration DotNetModelType IDotNetModel.ModelType { get; } Returns Type Description DotNetModelType Implements ICsModel IDotNetModel IModelStatus Extension Methods CSharpModelExtensions.ToModel<T>(CsModel)"
  },
  "api/CodeFactory.DotNet.CSharp.CsModelExtensions.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsModelExtensions.html",
    "title": "Class CsModelExtensions | CodeFactory Guidance",
    "keywords": "Class CsModelExtensions Static class that stores extension methods that support all models that derive from ICsModel Inheritance Object CsModelExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public static class CsModelExtensions Methods | Improve this Doc View Source FormatCSharpArraySignatureSyntax(CsType) Extension method that creates the array portion definition of a type definition in C# syntax. Declaration public static string FormatCSharpArraySignatureSyntax(this CsType source) Parameters Type Name Description CsType source The source type to get the array information to format. Returns Type Description String The formatted array syntax for the target type, or null if no array data was provided in the type definition. | Improve this Doc View Source FormatCSharpAttributeParametersSignatureSyntax(IReadOnlyList<CsAttributeParameter>) Extension method that creates the attributes parameters list for a attribute definition in c# syntax format. Declaration public static string FormatCSharpAttributeParametersSignatureSyntax(this IReadOnlyList<CsAttributeParameter> source) Parameters Type Name Description IReadOnlyList < CsAttributeParameter > source THe source list of parameters to be created. Returns Type Description String The fully formatted parameters section of a attribute declaration. | Improve this Doc View Source FormatCSharpAttributeParameterValueSignatureSyntax(CsAttributeParameterValue) Creates the implementation of an attribute value formatted for c#. Declaration public static string FormatCSharpAttributeParameterValueSignatureSyntax(this CsAttributeParameterValue source) Parameters Type Name Description CsAttributeParameterValue source The source value to format. Returns Type Description String The formatted value, or null if the model does not exist. | Improve this Doc View Source FormatCSharpAttributeSignatureSyntax(CsAttribute) Extension method that returns a full attribute declaration in the C# language format. Declaration public static string FormatCSharpAttributeSignatureSyntax(this CsAttribute source) Parameters Type Name Description CsAttribute source The attribute toe generate the c# signature for. Returns Type Description String | Improve this Doc View Source FormatCSharpEnumTypeSyntax(CsEnum, String) Extension method that will lookup the enumeration type based on the provided value. Declaration public static string FormatCSharpEnumTypeSyntax(this CsEnum source, string value) Parameters Type Name Description CsEnum source The target CsEnum model to get the enumeration type from. String value The target numerical value to use to lookup the enumeration type. Returns Type Description String The fully qualified enumeration type or null if the enumeration type could not be found. | Improve this Doc View Source FormatCSharpEnumValueSyntax(CsEnum, String) Extension method that will lookup the value of an enumeration by the enumeration type name. Declaration public static string FormatCSharpEnumValueSyntax(this CsEnum source, string enumName) Parameters Type Name Description CsEnum source The target IDotNetEnum model to get the enumeration value from. String enumName The target numerical named item to use to lookup the enumeration value. Returns Type Description String The target enumeration value or null if it could not be found. | Improve this Doc View Source FormatCSharpFullTypeName(CsType) Extension method that generates the fully qualified type name from the ICsType model in the C# format. Declaration public static string FormatCSharpFullTypeName(this CsType source) Parameters Type Name Description CsType source The source type to get the full type name from. Returns Type Description String The fully qualified namespace and full type definition. Null if the type is missing or not loaded. | Improve this Doc View Source FormatCSharpGenericSignatureSyntax(IReadOnlyList<CsGenericParameter>) Extension method that generates the generics definition part of a signature in the c# format. Declaration public static string FormatCSharpGenericSignatureSyntax(this IReadOnlyList<CsGenericParameter> source) Parameters Type Name Description IReadOnlyList < CsGenericParameter > source The target types that make up the generics signature. Returns Type Description String The fully formatted definition of the generics signature, or null if the source is not provided. | Improve this Doc View Source FormatCSharpGenericWhereClauseSyntax(CsGenericParameter) Extension method that generates the where clause for a generic parameter if one exists. This will not generate if the generic parameter is not a place holder type, or if no where clause conditions have been provided. Declaration public static string FormatCSharpGenericWhereClauseSyntax(this CsGenericParameter source) Parameters Type Name Description CsGenericParameter source Generic parameter to generate the where clause from. Returns Type Description String Null if the where clause was not generated, or the C# syntax for the where clause. | Improve this Doc View Source FormatCSharpParameterDefaultValueSyntax(CsParameterDefaultValue, CsType) Extension method that generates the default value syntax for a parameter in the C# language. Declaration public static string FormatCSharpParameterDefaultValueSyntax(this CsParameterDefaultValue source, CsType type) Parameters Type Name Description CsParameterDefaultValue source The target default value to format. CsType type The target type of the value to be formatted. Returns Type Description String The fully formatted syntax for the default value or null if data was missing. | Improve this Doc View Source FormatCSharpParametersSignatureSyntax(IReadOnlyList<CsParameter>) Extension method that create the fully formatted parameters section in c# syntax. Declaration public static string FormatCSharpParametersSignatureSyntax(this IReadOnlyList<CsParameter> source) Parameters Type Name Description IReadOnlyList < CsParameter > source The source list of parameters to be turned into a parameters signature. Returns Type Description String The fully formatted parameters signature or null if data was missing. | Improve this Doc View Source FormatCSharpSyntax(CsSecurity) Gets the security keyword for the C# language. Declaration public static string FormatCSharpSyntax(this CsSecurity source) Parameters Type Name Description CsSecurity source The source security object to get the keyword from. Returns Type Description String The name of the security keyword or null. | Improve this Doc View Source FormatCSharpTupleSignatureSyntax(CsType) Extension method that creates a C# signature for the tuple type. Declaration public static string FormatCSharpTupleSignatureSyntax(this CsType source) Parameters Type Name Description CsType source The target declaration syntax for a tuple. Returns Type Description String The formatted tuple or null if data is missing. | Improve this Doc View Source FormatCSharpValueSyntax(CsType, String) Extension method that returns a value declaration in the c# language format. Declaration public static string FormatCSharpValueSyntax(this CsType source, string value) Parameters Type Name Description CsType source The target type to create the value definition for. String value The value to be formatted. Returns Type Description String The definition of the value formatted for C#"
  },
  "api/CodeFactory.DotNet.CSharp.CsModelStore.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsModelStore.html",
    "title": "Class CsModelStore | CodeFactory Guidance",
    "keywords": "Class CsModelStore Model storage class used to store c# code factory models, to be used to pass data to factories. Inheritance Object CsModelStore Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public class CsModelStore Constructors | Improve this Doc View Source CsModelStore() Creates a new instance of the CsModelStore and initializes the store for data to be added. Declaration public CsModelStore() | Improve this Doc View Source CsModelStore(ICsModel) Creates a new instance of the CsModelStore and sets a single model in the store. Declaration public CsModelStore(ICsModel model) Parameters Type Name Description ICsModel model The model to be added to the store. | Improve this Doc View Source CsModelStore(Dictionary<String, IEnumerable<ICsModel>>) Creates a new instance of the CsModelStore and loads all the data for all the categories. Declaration public CsModelStore(Dictionary<string, IEnumerable<ICsModel>> allModels) Parameters Type Name Description Dictionary < String , IEnumerable < ICsModel >> allModels All the model data to be added to the store. Properties | Improve this Doc View Source Model The single ICsModel that is provided for the T4 Template. Declaration public ICsModel Model { get; } Property Value Type Description ICsModel Methods | Improve this Doc View Source AddModels(String, IEnumerable<ICsModel>) Adds many C# models to the store by category. Declaration public void AddModels(string category, IEnumerable<ICsModel> models) Parameters Type Name Description String category Name used to keep track of the models that are stored together. IEnumerable < ICsModel > models The models stored by the target category. | Improve this Doc View Source Models(String) Gets the models from a target category. Declaration public IEnumerable<ICsModel> Models(string category) Parameters Type Name Description String category Category to get models for. Returns Type Description IEnumerable < ICsModel > Returns a enumeration of the models. If no models were found then an empty enumeration is returned. | Improve this Doc View Source SetModel(ICsModel) Sets the single model to be shared with a factory. Declaration public void SetModel(ICsModel model) Parameters Type Name Description ICsModel model Target model to be used in a factory."
  },
  "api/CodeFactory.DotNet.CSharp.CsModelType.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsModelType.html",
    "title": "Enum CsModelType | CodeFactory Guidance",
    "keywords": "Enum CsModelType The code factory model types that represent the C# source code type. Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public enum CsModelType Fields Name Description Attribute Model is a attribute implementation. AttributeParameter Model is a attribute parameter implementation. AttributeParameterValue Model stores a parameter value from an attribute. Class Model is a class implementation. Delegate Model is a delegate definition. DelegateParameter Model is a delegate parameter definition. DelegateParameterValue Model is a delegate parameter value. Enum Model stores enumeration definition. EnumValue Model that stores a unique value in an enumeration. Event Model is a event definition. Field Model is a field definition. GenericParameter Model is a generic parameter that belongs to a generic type. Interface Model is a interface implementation. Method Model is a method definition. Namespace Model is a namespace definition. Parameter Model is a parameter definition. ParameterDefaultValue Model that stores default value information for a parameter. Property Model is a property definition. Source Model that hosts all the source models that have been loaded. Structure Model is a structure implementation. TupleTypeParameter Model is a tuple type parameter that belongs to a tuple type. Type Model is a type definition. Unknown The model is currently not know by the C# source type. Using Model is a using statement."
  },
  "api/CodeFactory.DotNet.CSharp.CsNamespace.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsNamespace.html",
    "title": "Class CsNamespace | CodeFactory Guidance",
    "keywords": "Class CsNamespace Data model that represents the definition of a namespace. Inheritance Object CsModel CsNamespace Implements ICsNamespace IDotNetNamespace ILookup ISourceFiles ICsModel IDotNetModel IModelStatus IParent IParent Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.IDotNetModel.ModelType CsModel.LookupModel(String) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public abstract class CsNamespace : CsModel, ICsNamespace, IDotNetNamespace, ILookup, ISourceFiles, ICsModel, IDotNetModel, IModelStatus, IParent, IParent Constructors | Improve this Doc View Source CsNamespace(Boolean, Boolean, Boolean, SourceCodeType, String, IReadOnlyList<String>, String, String, String, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsNamespace Declaration protected CsNamespace(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, string lookupPath, IReadOnlyList<string> sourceFiles, string name, string parentPath, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description Boolean isLoaded Flag that determines if the model was loaded. Boolean hasErrors Flag that determine if errors were found creating the model. Boolean loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. String lookupPath The fully qualified lookup path for the model to be used in the model store. IReadOnlyList < String > sourceFiles The source files where the namespace is defined in. String name The fully qualified name of the namespace. String parentPath The fully qualified path for the model that is a parent of this model. String sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore < ICsModel > modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList < ModelLoadException > modelErrors Optional the error that occured while creating the model. Properties | Improve this Doc View Source LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description String | Improve this Doc View Source Name The name of the namespace. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel | Improve this Doc View Source SourceFiles The source file or files in which the model was loaded from. This will be an empty enumeration if the source models were loaded from metadata only. Declaration public IReadOnlyList<string> SourceFiles { get; } Property Value Type Description IReadOnlyList < String > Explicit Interface Implementations | Improve this Doc View Source IParent.Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration IDotNetModel IParent.Parent { get; } Returns Type Description IDotNetModel Implements ICsNamespace IDotNetNamespace ILookup ISourceFiles ICsModel IDotNetModel IModelStatus IParent IParent Extension Methods CSharpModelExtensions.ToModel<T>(CsModel)"
  },
  "api/CodeFactory.DotNet.CSharp.CsParameter.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsParameter.html",
    "title": "Class CsParameter | CodeFactory Guidance",
    "keywords": "Class CsParameter Data model that represents a parameter definition. Inheritance Object CsModel CsParameter Implements ICsParameter ICsModel ICsAttributes IDotNetParameter IDotNetModel IModelStatus IDotNetAttributes ILookup IParent IParent Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.IDotNetModel.ModelType CsModel.LookupModel(String) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public abstract class CsParameter : CsModel, ICsParameter, ICsModel, ICsAttributes, IDotNetParameter, IDotNetModel, IModelStatus, IDotNetAttributes, ILookup, IParent, IParent Constructors | Improve this Doc View Source CsParameter(Boolean, Boolean, Boolean, SourceCodeType, IReadOnlyList<CsAttribute>, String, String, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, String, CsType, CsParameterDefaultValue, String, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsParameter Declaration protected CsParameter(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, string lookupPath, string name, bool isOut, bool isRef, bool isParams, bool isOptional, bool isGenericParameter, bool hasDefaultValue, string parentPath, CsType parameterType, CsParameterDefaultValue defaultValue, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description Boolean isLoaded Flag that determines if the model was loaded. Boolean hasErrors Flag that determine if errors were found creating the model. Boolean loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList < CsAttribute > attributes Attributes assigned to this model. String lookupPath The fully qualified path of the model that is stored in the model store. String name The name of the parameter. Boolean isOut Parameter is assigned the out keyword. Boolean isRef Parameter is assigned the ref keyword. Boolean isParams Parameter supports a parameter array. Boolean isOptional Parameter is optional. Boolean isGenericParameter Is a generic parameter. Boolean hasDefaultValue Parameter has an assigned default value. String parentPath The fully qualified path name for the parent model to this model. CsType parameterType The type that this parameter supports. CsParameterDefaultValue defaultValue The default value assigned to this parameter. String sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore < ICsModel > modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList < ModelLoadException > modelErrors Optional the error that occured while creating the model. Properties | Improve this Doc View Source Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration public IReadOnlyList<CsAttribute> Attributes { get; } Property Value Type Description IReadOnlyList < CsAttribute > | Improve this Doc View Source DefaultValue The default value assigned to the parameter. This will be null if the HasDefaultValue property is set to false. Declaration public CsParameterDefaultValue DefaultValue { get; } Property Value Type Description CsParameterDefaultValue | Improve this Doc View Source HasAttributes Flag that determines if attributes are assigned. Declaration public bool HasAttributes { get; } Property Value Type Description Boolean | Improve this Doc View Source HasDefaultValue Flag that determines if the parameter has a default value. Declaration public bool HasDefaultValue { get; } Property Value Type Description Boolean | Improve this Doc View Source IsGenericParameter Flag that determines if the parameter is a generic place holder. Declaration public bool IsGenericParameter { get; } Property Value Type Description Boolean | Improve this Doc View Source IsOptional Flag that determines if the parameter is optional. Declaration public bool IsOptional { get; } Property Value Type Description Boolean | Improve this Doc View Source IsOut Flag that determines if the parameter is assigned the out keyword. Declaration public bool IsOut { get; } Property Value Type Description Boolean | Improve this Doc View Source IsParams Flag that determines if the parameter is an parameter array. Declaration public bool IsParams { get; } Property Value Type Description Boolean | Improve this Doc View Source IsRef Flag that determines if the parameter is assigned the ref keyword. Declaration public bool IsRef { get; } Property Value Type Description Boolean | Improve this Doc View Source LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description String | Improve this Doc View Source Name The name of the parameter. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source ParameterType The data type assigned to the parameter. Declaration public CsType ParameterType { get; } Property Value Type Description CsType | Improve this Doc View Source Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel Explicit Interface Implementations | Improve this Doc View Source IDotNetAttributes.Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration IReadOnlyList<IDotNetAttribute> IDotNetAttributes.Attributes { get; } Returns Type Description IReadOnlyList < IDotNetAttribute > | Improve this Doc View Source IDotNetParameter.DefaultValue The default value assigned to the parameter. This will be null if the HasDefaultValue property is set to false. Declaration IDotNetParameterDefaultValue IDotNetParameter.DefaultValue { get; } Returns Type Description IDotNetParameterDefaultValue | Improve this Doc View Source IDotNetParameter.ParameterType The data type assigned to the parameter. Declaration IDotNetType IDotNetParameter.ParameterType { get; } Returns Type Description IDotNetType | Improve this Doc View Source IParent.Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration IDotNetModel IParent.Parent { get; } Returns Type Description IDotNetModel Implements ICsParameter ICsModel ICsAttributes IDotNetParameter IDotNetModel IModelStatus IDotNetAttributes ILookup IParent IParent Extension Methods CSharpModelExtensions.ToModel<T>(CsModel)"
  },
  "api/CodeFactory.DotNet.CSharp.CsParameterDefaultValue.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsParameterDefaultValue.html",
    "title": "Class CsParameterDefaultValue | CodeFactory Guidance",
    "keywords": "Class CsParameterDefaultValue Data model that represents the default value for a parameter. Inheritance Object CsModel CsParameterDefaultValue Implements ICsParameterDefaultValue IDotNetParameterDefaultValue ILookup ICsModel IDotNetModel IModelStatus IParent IParent Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.IDotNetModel.ModelType CsModel.LookupModel(String) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public abstract class CsParameterDefaultValue : CsModel, ICsParameterDefaultValue, IDotNetParameterDefaultValue, ILookup, ICsModel, IDotNetModel, IModelStatus, IParent, IParent Constructors | Improve this Doc View Source CsParameterDefaultValue(Boolean, Boolean, Boolean, SourceCodeType, String, ParameterDefaultValueType, String, String, String, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsParameterDefaultValue Declaration protected CsParameterDefaultValue(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, string lookupPath, ParameterDefaultValueType valueType, string value, string parentPath, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description Boolean isLoaded Flag that determines if the model was loaded. Boolean hasErrors Flag that determine if errors were found creating the model. Boolean loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. String lookupPath The fully qualified path for the model in the model store. ParameterDefaultValueType valueType The type of default value assigned to the parameter. String value The value assigned as the default value. String parentPath The fully qualified path name for the parent model to this model. String sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore < ICsModel > modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList < ModelLoadException > modelErrors Optional the error that occured while creating the model. Properties | Improve this Doc View Source LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description String | Improve this Doc View Source Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel | Improve this Doc View Source Value If the default value is a literal value the value will be set, otherwise it will be set to null. Declaration public string Value { get; } Property Value Type Description String | Improve this Doc View Source ValueType The type of default value assigned to the parameter. Declaration public ParameterDefaultValueType ValueType { get; } Property Value Type Description ParameterDefaultValueType Explicit Interface Implementations | Improve this Doc View Source IParent.Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration IDotNetModel IParent.Parent { get; } Returns Type Description IDotNetModel Implements ICsParameterDefaultValue IDotNetParameterDefaultValue ILookup ICsModel IDotNetModel IModelStatus IParent IParent Extension Methods DotNetModelExtensions.FormatCSharpParameterDefaultValueSyntax(IDotNetParameterDefaultValue, IDotNetType) CSharpModelExtensions.ToModel<T>(CsModel) CsModelExtensions.FormatCSharpParameterDefaultValueSyntax(CsParameterDefaultValue, CsType)"
  },
  "api/CodeFactory.DotNet.CSharp.CsProperty.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsProperty.html",
    "title": "Class CsProperty | CodeFactory Guidance",
    "keywords": "Class CsProperty Data model that represents the definition of a property. Inheritance Object CsModel CsMember CsProperty Implements ICsProperty ICsMember ICsModel ICsAttributes IParent IDotNetProperty IDotNetMember IDotNetModel IModelStatus ISourceFiles IDotNetAttributes IDocumentation IParent ILookup Inherited Members CsMember.HasAttributes CsMember.Attributes CsMember.IDotNetAttributes.Attributes CsMember.SourceFiles CsMember.HasDocumentation CsMember.Documentation CsMember.IParent.Parent CsMember.LookupPath CsMember.Name CsMember.Security CsMember.MemberType CsMember.AddBeforeAsync(String, String) CsMember.AddBeforeAsync(String) CsMember.AddAfterAsync(String, String) CsMember.AddAfterAsync(String) CsMember.DeleteAsync(String) CsMember.DeleteAsync() CsMember.GetSourceLocationAsync(String) CsMember.GetSourceLocationAsync() CsMember.ReplaceAsync(String, String) CsMember.ReplaceAsync(String) CsMember.GetModel(String) CsMember.IDotNetMember.Security CsMember.IDotNetMember.MemberType CsMember.Parent CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.IDotNetModel.ModelType CsModel.LookupModel(String) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public abstract class CsProperty : CsMember, ICsProperty, ICsMember, ICsModel, ICsAttributes, IParent, IDotNetProperty, IDotNetMember, IDotNetModel, IModelStatus, ISourceFiles, IDotNetAttributes, IDocumentation, IParent, ILookup Constructors | Improve this Doc View Source CsProperty(Boolean, Boolean, Boolean, SourceCodeType, IReadOnlyList<CsAttribute>, IReadOnlyList<String>, Boolean, String, String, String, String, CsSecurity, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, CsType, CsSecurity, CsSecurity, String, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsProperty Declaration protected CsProperty(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string parentPath, CsSecurity security, bool hasGet, bool hasSet, bool isAbstract, bool isVirtual, bool isSealed, bool isOverride, bool isStatic, CsType propertyType, CsSecurity getSecurity, CsSecurity setSecurity, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description Boolean isLoaded Flag that determines if the model was loaded. Boolean hasErrors Flag that determine if errors were found creating the model. Boolean loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList < CsAttribute > attributes List of the attributes assigned to this model. IReadOnlyList < String > sourceFiles List of the fully qualified paths to the source code files this member is defined in. Boolean hasDocumentation Flag that determines if the model has XML documentation assigned to it. String documentation The xml documentation assigned to the model. String lookupPath The fully qualified model lookup path for this model. String name The name of the model. String parentPath THe fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. Boolean hasGet Flag that determines if the property implements a getter. Boolean hasSet Flag that determines if the property implements a setter. Boolean isAbstract Flag that determines if the model is abstract. Boolean isVirtual Flag that determines if the model is virtual. Boolean isSealed Flag that determines if the model is sealed. Boolean isOverride Flag that determines if the model is overridden. Boolean isStatic Flag that determines if the model is static. CsType propertyType The type the property supports. CsSecurity getSecurity The security access assigned to the getter. CsSecurity setSecurity The security access assigned to the setter. String sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore < ICsModel > modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList < ModelLoadException > modelErrors Optional the error that occured while creating the model. Properties | Improve this Doc View Source GetSecurity The security scope that is assigned to the get accessor. Make sure you check the HasGet to determine if the property supports get operations. Declaration public CsSecurity GetSecurity { get; } Property Value Type Description CsSecurity | Improve this Doc View Source HasGet Flag that determines if this property supports get access. Declaration public bool HasGet { get; } Property Value Type Description Boolean | Improve this Doc View Source HasSet Flag that determines if this property supports set access. Declaration public bool HasSet { get; } Property Value Type Description Boolean | Improve this Doc View Source IsAbstract Flag that determines if the property is implemented as an abstract property. Declaration public bool IsAbstract { get; } Property Value Type Description Boolean | Improve this Doc View Source IsOverride Flag that determines if the property has been overridden. Declaration public bool IsOverride { get; } Property Value Type Description Boolean | Improve this Doc View Source IsSealed Flag that determines if the property has been sealed. Declaration public bool IsSealed { get; } Property Value Type Description Boolean | Improve this Doc View Source IsStatic Flag that determines if the property has been implemented as static. Declaration public bool IsStatic { get; } Property Value Type Description Boolean | Improve this Doc View Source IsVirtual Flag that determines if the property is implemented as virtual. Declaration public bool IsVirtual { get; } Property Value Type Description Boolean | Improve this Doc View Source PropertyType The source data type that is managed by this property. Declaration public CsType PropertyType { get; } Property Value Type Description CsType | Improve this Doc View Source SetSecurity The security scope that is assigned to the set accessor. Make sure you check the HasSet to determine if the property supports set operations. Declaration public CsSecurity SetSecurity { get; } Property Value Type Description CsSecurity Methods | Improve this Doc View Source LoadGetBodySyntaxAsync() The source code syntax that is stored in the body of the property get. This will be null if was not loaded from source code. Declaration public abstract Task<string> LoadGetBodySyntaxAsync() Returns Type Description Task < String > | Improve this Doc View Source LoadSetBodySyntaxAsync() The source code syntax that is stored in the body of the property get. This will be null if was not loaded from source code. Declaration public abstract Task<string> LoadSetBodySyntaxAsync() Returns Type Description Task < String > Explicit Interface Implementations | Improve this Doc View Source IDotNetProperty.GetSecurity The security scope that is assigned to the get accessor. Make sure you check the HasGet to determine if the property supports get operations. Declaration DotNetSecurity IDotNetProperty.GetSecurity { get; } Returns Type Description DotNetSecurity | Improve this Doc View Source IDotNetProperty.PropertyType The source data type that is managed by this property. Declaration IDotNetType IDotNetProperty.PropertyType { get; } Returns Type Description IDotNetType | Improve this Doc View Source IDotNetProperty.SetSecurity The security scope that is assigned to the set accessor. Make sure you check the HasSet to determine if the property supports set operations. Declaration DotNetSecurity IDotNetProperty.SetSecurity { get; } Returns Type Description DotNetSecurity Implements ICsProperty ICsMember ICsModel ICsAttributes IParent IDotNetProperty IDotNetMember IDotNetModel IModelStatus ISourceFiles IDotNetAttributes IDocumentation IParent ILookup Extension Methods DotNetMemberExtensions.FormatCSharpMemberComparisonHashCode(IDotNetMember, MemberComparisonType) DotNetMemberExtensions.FormatCSharpDeclarationSyntax(IDotNetProperty, Boolean, Boolean, Boolean, Boolean) DotNetMemberExtensions.FormatCSharpComparisonHashCode(IDotNetProperty, Boolean, Boolean, Boolean) CSharpModelExtensions.ToModel<T>(CsModel) CsMemberExtensions.FormatCSharpMemberComparisonHashCode(CsMember, MemberComparisonType) CsMemberExtensions.FormatCSharpDeclarationSyntax(CsProperty, Boolean, Boolean, Boolean) CsMemberExtensions.FormatCSharpComparisonHashCode(CsProperty, Boolean, Boolean, Boolean)"
  },
  "api/CodeFactory.DotNet.CSharp.CsSecurity.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsSecurity.html",
    "title": "Enum CsSecurity | CodeFactory Guidance",
    "keywords": "Enum CsSecurity Enumeration that determines the security scope of the C# model being represented. Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public enum CsSecurity Fields Name Description Internal Security is set to internal access Private Security is set to private access Protected Security is set to protected access ProtectedInternal Security is set to protected internal access ProtectedOrInternal Security is set to projected or internal access Public Security is set to public access Unknown Security scope is unknown Extension Methods CsModelExtensions.FormatCSharpSyntax()"
  },
  "api/CodeFactory.DotNet.CSharp.CsSource.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsSource.html",
    "title": "Class CsSource | CodeFactory Guidance",
    "keywords": "Class CsSource Data model that represents source code. Inheritance Object CsModel CsSource Implements ICsSource ICsModel IDotNetSource IDotNetModel IModelStatus ILookup IParent IParent Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.IDotNetModel.ModelType CsModel.LookupModel(String) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public abstract class CsSource : CsModel, ICsSource, ICsModel, IDotNetSource, IDotNetModel, IModelStatus, ILookup, IParent, IParent Constructors | Improve this Doc View Source CsSource(Boolean, Boolean, Boolean, SourceCodeType, String, String, String, IReadOnlyList<CsUsingStatement>, IReadOnlyList<CsInterface>, IReadOnlyList<CsClass>, IReadOnlyList<CsStructure>, IReadOnlyList<CsDelegate>, IReadOnlyList<CsEnum>, IReadOnlyList<CsNamespace>, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsSource Declaration protected CsSource(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, string lookupPath, string sourceDocument, string parentPath, IReadOnlyList<CsUsingStatement> namespaceReferences, IReadOnlyList<CsInterface> interfaces, IReadOnlyList<CsClass> classes, IReadOnlyList<CsStructure> structures, IReadOnlyList<CsDelegate> delegates, IReadOnlyList<CsEnum> enums, IReadOnlyList<CsNamespace> namespaces, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description Boolean isLoaded Flag that determines if the model was loaded. Boolean hasErrors Flag that determine if errors were found creating the model. Boolean loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. String lookupPath The fully qualified name of the model to be used with the model store. String sourceDocument The fully qualified path to the source document that loaded this model. String parentPath The fully qualified path to the parent model of this model. IReadOnlyList < CsUsingStatement > namespaceReferences The namespace reference in the source. IReadOnlyList < CsInterface > interfaces The interfaces that are define in this source. IReadOnlyList < CsClass > classes The classes that are defined in this source. IReadOnlyList < CsStructure > structures The structures that are defined in this source. IReadOnlyList < CsDelegate > delegates The delegates that are defined in this source. IReadOnlyList < CsEnum > enums The enumerations defined in this source. IReadOnlyList < CsNamespace > namespaces The namespaces that are defined in this source. ModelStore < ICsModel > modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList < ModelLoadException > modelErrors Optional the error that occured while creating the model. Properties | Improve this Doc View Source Classes The classes that were defined in the source. Declaration public IReadOnlyList<CsClass> Classes { get; } Property Value Type Description IReadOnlyList < CsClass > | Improve this Doc View Source Delegates The delegates that were defined in the source. Declaration public IReadOnlyList<CsDelegate> Delegates { get; } Property Value Type Description IReadOnlyList < CsDelegate > | Improve this Doc View Source Enums The enumerations that were defined in the source. Declaration public IReadOnlyList<CsEnum> Enums { get; } Property Value Type Description IReadOnlyList < CsEnum > | Improve this Doc View Source Interfaces The interfaces that were defined in the source. Declaration public IReadOnlyList<CsInterface> Interfaces { get; } Property Value Type Description IReadOnlyList < CsInterface > | Improve this Doc View Source LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description String | Improve this Doc View Source NamespaceReferences The namespaces that are used as references to access other libraries not hosted in the source document. Declaration public IReadOnlyList<CsUsingStatement> NamespaceReferences { get; } Property Value Type Description IReadOnlyList < CsUsingStatement > | Improve this Doc View Source Namespaces The namespaces that were defined in the source. Declaration public IReadOnlyList<CsNamespace> Namespaces { get; } Property Value Type Description IReadOnlyList < CsNamespace > | Improve this Doc View Source Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel | Improve this Doc View Source Structures The structures that were defined in the source. Declaration public IReadOnlyList<CsStructure> Structures { get; } Property Value Type Description IReadOnlyList < CsStructure > Methods | Improve this Doc View Source AddToBeginningAsync(String) Adds the source code to the beginning of the ICsSource model. Declaration public abstract Task<CsSource> AddToBeginningAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddToEndAsync(String) Adds the source code the end of the ICsSource model. Declaration public abstract Task<CsSource> AddToEndAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync() Deletes the content from the ICsSource model. Declaration public abstract Task<CsSource> DeleteAsync() Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source GetModel(String) Gets a ICsModel from the currently loaded source code. Declaration public CsModel GetModel(string lookupPath) Parameters Type Name Description String lookupPath The fully qualified path to the model to be loaded. Returns Type Description CsModel The loaded model or null if the model could not be found. | Improve this Doc View Source ReplaceAsync(String) Replaces the content of the ICsSource model. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Explicit Interface Implementations | Improve this Doc View Source IDotNetSource.Classes The classes that were defined in the source. Declaration IReadOnlyList<IDotNetClass> IDotNetSource.Classes { get; } Returns Type Description IReadOnlyList < IDotNetClass > | Improve this Doc View Source IDotNetSource.Delegates The delegates that were defined in the source. Declaration IReadOnlyList<IDotNetDelegate> IDotNetSource.Delegates { get; } Returns Type Description IReadOnlyList < IDotNetDelegate > | Improve this Doc View Source IDotNetSource.Enums The enumerations that were defined in the source. Declaration IReadOnlyList<IDotNetEnum> IDotNetSource.Enums { get; } Returns Type Description IReadOnlyList < IDotNetEnum > | Improve this Doc View Source IDotNetSource.Interfaces The interfaces that were defined in the source. Declaration IReadOnlyList<IDotNetInterface> IDotNetSource.Interfaces { get; } Returns Type Description IReadOnlyList < IDotNetInterface > | Improve this Doc View Source IDotNetSource.NamespaceReferences The namespaces that are used as references to access other libraries not hosted in the source document. Declaration IReadOnlyList<IDotNetNamespaceReference> IDotNetSource.NamespaceReferences { get; } Returns Type Description IReadOnlyList < IDotNetNamespaceReference > | Improve this Doc View Source IDotNetSource.Namespaces The namespaces that were defined in the source. Declaration IReadOnlyList<IDotNetNamespace> IDotNetSource.Namespaces { get; } Returns Type Description IReadOnlyList < IDotNetNamespace > | Improve this Doc View Source IDotNetSource.Structures The structures that were defined in the source. Declaration IReadOnlyList<IDotNetStructure> IDotNetSource.Structures { get; } Returns Type Description IReadOnlyList < IDotNetStructure > | Improve this Doc View Source IParent.Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration IDotNetModel IParent.Parent { get; } Returns Type Description IDotNetModel Implements ICsSource ICsModel IDotNetSource IDotNetModel IModelStatus ILookup IParent IParent Extension Methods CSharpModelExtensions.ToModel<T>(CsModel) CsMemberExtensions.SourceMissingInterfaceMembers(ICsSource) CsSourceExtensions.HasUsingStatement(CsSource, String, String) CsSourceExtensions.AddUsingStatementAsync(CsSource, String, String) CsSourceExtensions.AddMissingNamespaces(CsSource, IEnumerable<CsMember>, String)"
  },
  "api/CodeFactory.DotNet.CSharp.CsSourceExtensions.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsSourceExtensions.html",
    "title": "Class CsSourceExtensions | CodeFactory Guidance",
    "keywords": "Class CsSourceExtensions Extensions class that provides common automation tasks rolled up under standard extension methods that support the CsSource model. Inheritance Object CsSourceExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public static class CsSourceExtensions Methods | Improve this Doc View Source AddMissingNamespaces(CsSource, IEnumerable<CsMember>, String) Scans members for types that are accessible at the member definition level. If the namespace is missing will add it to the source code file. Declaration public static Task<CsSource> AddMissingNamespaces(this CsSource source, IEnumerable<CsMember> members, string excludeNamespace = null) Parameters Type Name Description CsSource source The source model to be updated. IEnumerable < CsMember > members The members to be checked for type definitions. String excludeNamespace A target namespace that should be excluded from adding to the using statement list. This is generally the target namespace of the code file. This is optional Returns Type Description Task < CsSource > Updated Source Model with all the missing namespaces added as using statements. | Improve this Doc View Source AddUsingStatementAsync(CsSource, String, String) Extension method that will add a using statement to target source code. If the using statement already exists it will simply return the existing source. Declaration public static Task<CsSource> AddUsingStatementAsync(this CsSource source, string nameSpace, string alias = null) Parameters Type Name Description CsSource source The source code to update. String nameSpace The namespace to be added to the using statement. String alias Optional parameter to set if you want an alias assigned to the namespace. Returns Type Description Task < CsSource > The updated source code or the original source code if no changes were necessary. | Improve this Doc View Source HasUsingStatement(CsSource, String, String) Extension method that determines if the source code has a target namespace as a using statement. Declaration public static bool HasUsingStatement(this CsSource source, string nameSpace, string alias = null) Parameters Type Name Description CsSource source The source code to search through. String nameSpace The namespace to search for in the using statements. String alias Optional parameter that captures the alias of the namespace used in the using statement. Returns Type Description Boolean Flag that determines if it has the using statement."
  },
  "api/CodeFactory.DotNet.CSharp.CsStructure.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsStructure.html",
    "title": "Class CsStructure | CodeFactory Guidance",
    "keywords": "Class CsStructure Data model that represents the definition of a structure. Inheritance Object CsModel CsContainer CsStructure Implements ICsStructure ICsContainer ICsModel ICsAttributes ICsGeneric IParent IDotNetStructure IDotNetContainer IDotNetModel IModelStatus ISourceFiles IDotNetAttributes IDocumentation IDotNetGeneric IParent ILookup Inherited Members CsContainer.HasAttributes CsContainer.Attributes CsContainer.IDotNetAttributes.Attributes CsContainer.IsGeneric CsContainer.GenericParameters CsContainer.GenericTypes CsContainer.IDotNetGeneric.GenericParameters CsContainer.HasStrongTypesInGenerics CsContainer.IDotNetGeneric.GenericTypes CsContainer.SourceFiles CsContainer.HasDocumentation CsContainer.Documentation CsContainer.IParent.Parent CsContainer.LookupPath CsContainer.IDotNetContainer.ContainerType CsContainer.Security CsContainer.InheritedInterfaces CsContainer.Members CsContainer.Methods CsContainer.Properties CsContainer.Events CsContainer.GetBodySyntaxAsync() CsContainer.AddBeforeAsync(String, String) CsContainer.AddBeforeAsync(String) CsContainer.AddAfterAsync(String, String) CsContainer.AddAfterAsync(String) CsContainer.AddToBeginningAsync(String, String) CsContainer.AddToBeginningAsync(String) CsContainer.AddToEndAsync(String, String) CsContainer.AddToEndAsync(String) CsContainer.DeleteAsync(String) CsContainer.DeleteAsync() CsContainer.GetSourceLocationAsync(String) CsContainer.GetSourceLocationAsync() CsContainer.GetBodySourceLocationAsync(String) CsContainer.GetBodySourceLocationAsync() CsContainer.ReplaceAsync(String, String) CsContainer.ReplaceAsync(String) CsContainer.GetModel(String) CsContainer.ContainerType CsContainer.Name CsContainer.Namespace CsContainer.IDotNetContainer.Security CsContainer.IDotNetContainer.InheritedInterfaces CsContainer.IDotNetContainer.Members CsContainer.IDotNetContainer.Methods CsContainer.IDotNetContainer.Properties CsContainer.IDotNetContainer.Events CsContainer.Parent CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.IDotNetModel.ModelType CsModel.LookupModel(String) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public abstract class CsStructure : CsContainer, ICsStructure, ICsContainer, ICsModel, ICsAttributes, ICsGeneric, IParent, IDotNetStructure, IDotNetContainer, IDotNetModel, IModelStatus, ISourceFiles, IDotNetAttributes, IDocumentation, IDotNetGeneric, IParent, ILookup Constructors | Improve this Doc View Source CsStructure(Boolean, Boolean, Boolean, SourceCodeType, IReadOnlyList<CsAttribute>, Boolean, Boolean, IReadOnlyList<CsGenericParameter>, IReadOnlyList<CsType>, IReadOnlyList<String>, Boolean, String, String, String, String, String, CsSecurity, IReadOnlyList<CsInterface>, IReadOnlyList<CsMember>, String, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsStructure Declaration protected CsStructure(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, IReadOnlyList<CsAttribute> attributes, bool isGeneric, bool hasStrongTypesInGenerics, IReadOnlyList<CsGenericParameter> genericParameters, IReadOnlyList<CsType> genericTypes, IReadOnlyList<string> sourceFiles, bool hasDocumentation, string documentation, string lookupPath, string name, string ns, string parentPath, CsSecurity security, IReadOnlyList<CsInterface> inheritedInterfaces, IReadOnlyList<CsMember> members, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description Boolean isLoaded Flag that determines if the model was loaded. Boolean hasErrors Flag that determine if errors were found creating the model. Boolean loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. IReadOnlyList < CsAttribute > attributes List of the attributes assigned to this model. Boolean isGeneric Flag that determines if the container is a generic definition. Boolean hasStrongTypesInGenerics Flag that determines if the generics use strong type definitions. IReadOnlyList < CsGenericParameter > genericParameters Generic parameters assigned to the container. IReadOnlyList < CsType > genericTypes Target types for the generic parameters assigned to the container. IReadOnlyList < String > sourceFiles List of the fully qualified paths to the source code files this model is defined in. Boolean hasDocumentation Flag that determines if the model has XML documentation assigned to it. String documentation The xml documentation assigned to the model. String lookupPath The fully qualified model lookup path for this model. String name The name of the model. String ns The namespace the container belongs to. String parentPath The fully qualified lookup path for the parent model to this one. CsSecurity security The security scope assigned to this model. IReadOnlyList < CsInterface > inheritedInterfaces The interfaces that are inherited by this container. IReadOnlyList < CsMember > members The members assigned to this container. String sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore < ICsModel > modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList < ModelLoadException > modelErrors Optional the error that occured while creating the model. Properties | Improve this Doc View Source Constructors List of the constructors for this structure. Declaration public IReadOnlyList<CsMethod> Constructors { get; } Property Value Type Description IReadOnlyList < CsMethod > | Improve this Doc View Source Fields List of the fields for this structure. Declaration public IReadOnlyList<CsField> Fields { get; } Property Value Type Description IReadOnlyList < CsField > Explicit Interface Implementations | Improve this Doc View Source IDotNetStructure.Constructors List of the constructors for this structure. Declaration IReadOnlyList<IDotNetMethod> IDotNetStructure.Constructors { get; } Returns Type Description IReadOnlyList < IDotNetMethod > | Improve this Doc View Source IDotNetStructure.Fields List of the fields for this structure. Declaration IReadOnlyList<IDotNetField> IDotNetStructure.Fields { get; } Returns Type Description IReadOnlyList < IDotNetField > Implements ICsStructure ICsContainer ICsModel ICsAttributes ICsGeneric IParent IDotNetStructure IDotNetContainer IDotNetModel IModelStatus ISourceFiles IDotNetAttributes IDocumentation IDotNetGeneric IParent ILookup Extension Methods DotNetContainerExtensions.FormatCSharpComparisonMembers(IDotNetContainer, MemberComparisonType) DotNetContainerExtensions.MissingInterfaceMembers(IDotNetStructure) CsContainerExtensions.FormatCSharpComparisonMembers(CsContainer, MemberComparisonType) CsContainerExtensions.MissingInterfaceMembers(CsStructure) CSharpModelExtensions.ToModel<T>(CsModel)"
  },
  "api/CodeFactory.DotNet.CSharp.CsTupleTypeParameter.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsTupleTypeParameter.html",
    "title": "Class CsTupleTypeParameter | CodeFactory Guidance",
    "keywords": "Class CsTupleTypeParameter Data model that represents a tuple type parameter. Inheritance Object CsModel CsTupleTypeParameter Implements ICsTupleTypeParameter ICsModel IDotNetTupleTypeParameter IDotNetModel IModelStatus Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.IDotNetModel.ModelType CsModel.LookupModel(String) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public abstract class CsTupleTypeParameter : CsModel, ICsTupleTypeParameter, ICsModel, IDotNetTupleTypeParameter, IDotNetModel, IModelStatus Constructors | Improve this Doc View Source CsTupleTypeParameter(Boolean, Boolean, Boolean, SourceCodeType, Boolean, String, CsType, String, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsModel Declaration protected CsTupleTypeParameter(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, bool hasDefaultName, string name, CsType tupleType, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description Boolean isLoaded Flag that determines if the model was loaded. Boolean hasErrors Flag that determine if errors were found creating the model. Boolean loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. Boolean hasDefaultName Does the type parameter use a distinct name. String name The distinct name assigned to the type. CsType tupleType The type definition of the tuple type. String sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore < ICsModel > modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList < ModelLoadException > modelErrors Optional the error that occured while creating the model. Properties | Improve this Doc View Source HasDefaultName Flag that determines if the named assigned to the tuple was system generated or defined in source. Declaration public bool HasDefaultName { get; } Property Value Type Description Boolean | Improve this Doc View Source Name The name assigned to the tuple parameter. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source TupleType The model with the type definition assigned to the tuple. Declaration public CsType TupleType { get; } Property Value Type Description CsType Explicit Interface Implementations | Improve this Doc View Source IDotNetTupleTypeParameter.TupleType The model with the type definition assigned to the tuple. Declaration IDotNetType IDotNetTupleTypeParameter.TupleType { get; } Returns Type Description IDotNetType Implements ICsTupleTypeParameter ICsModel IDotNetTupleTypeParameter IDotNetModel IModelStatus Extension Methods CSharpModelExtensions.ToModel<T>(CsModel)"
  },
  "api/CodeFactory.DotNet.CSharp.CsType.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsType.html",
    "title": "Class CsType | CodeFactory Guidance",
    "keywords": "Class CsType Data model that represents the definition of a type. Inheritance Object CsModel CsType Implements ICsType ICsModel ICsGeneric IDotNetType IDotNetModel IModelStatus IDotNetGeneric Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.IDotNetModel.ModelType CsModel.LookupModel(String) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public abstract class CsType : CsModel, ICsType, ICsModel, ICsGeneric, IDotNetType, IDotNetModel, IModelStatus, IDotNetGeneric Constructors | Improve this Doc View Source CsType(Boolean, Boolean, Boolean, SourceCodeType, Boolean, Boolean, IReadOnlyList<CsGenericParameter>, IReadOnlyList<CsType>, String, String, Boolean, String, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, IReadOnlyList<Int32>, Boolean, Boolean, Boolean, Boolean, IReadOnlyList<CsTupleTypeParameter>, CsKnownLanguageType, String, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsType Declaration protected CsType(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, bool isGeneric, bool hasStrongTypesInGenerics, IReadOnlyList<CsGenericParameter> genericParameters, IReadOnlyList<CsType> genericTypes, string name, string ns, bool isWellKnownType, string valueTypeDefaultValue, bool isValueType, bool supportsDisposable, bool isInterface, bool isStructure, bool isClass, bool isArray, IReadOnlyList<int> arrayDimensions, bool isGenericPlaceHolder, bool isEnum, bool isDelegate, bool isTuple, IReadOnlyList<CsTupleTypeParameter> tupleTypes, CsKnownLanguageType wellKnownType, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description Boolean isLoaded Flag that determines if the model was loaded. Boolean hasErrors Flag that determine if errors were found creating the model. Boolean loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. Boolean isGeneric Flag that determines if the type is generic. Boolean hasStrongTypesInGenerics Flag that determines if the generics are strong types or placeholders. IReadOnlyList < CsGenericParameter > genericParameters Generic parameters assigned to the type. IReadOnlyList < CsType > genericTypes The type definitions for the generic implementation. String name The name of the type. String ns The namespace the type belongs to. Boolean isWellKnownType Is the type one of the well known types for the language. String valueTypeDefaultValue The default value if the type is a value type. Boolean isValueType Flag that determines if it is a value type. Boolean supportsDisposable Flag that determines if the type implements IDisposable interface. Boolean isInterface Flag that determines if the type is an interface definition. Boolean isStructure Flag that determines if the type is a structure definition. Boolean isClass Flag that determines if the type is a class definition. Boolean isArray Flag that determines if the type is also an array. IReadOnlyList < Int32 > arrayDimensions The dimensions assigned to the array. Boolean isGenericPlaceHolder Flag that determines if the type is a generic place holder definition. Boolean isEnum Flag that determines if the type is an enumeration. Boolean isDelegate Flag that determines if the type is a delegate definition. Boolean isTuple Flag that determines if the type is a tuple. IReadOnlyList < CsTupleTypeParameter > tupleTypes The type information for each part of the tuple. CsKnownLanguageType wellKnownType The well known type from the language if it is well known. String sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore < ICsModel > modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList < ModelLoadException > modelErrors Optional the error that occured while creating the model. Properties | Improve this Doc View Source ArrayDimensions Gets a list of the dimensions that are assigned to the array. This will contain more then one value if the array is a jagged array. This will be empty if the type is not an array. Declaration public IReadOnlyList<int> ArrayDimensions { get; } Property Value Type Description IReadOnlyList < Int32 > | Improve this Doc View Source GenericParameters List of the generic parameters assigned. Declaration public IReadOnlyList<CsGenericParameter> GenericParameters { get; } Property Value Type Description IReadOnlyList < CsGenericParameter > | Improve this Doc View Source GenericTypes List of the strong types that are implemented for each generic parameter. This will be an empty List when there is no generic types implemented. Declaration public IReadOnlyList<CsType> GenericTypes { get; } Property Value Type Description IReadOnlyList < CsType > | Improve this Doc View Source HasStrongTypesInGenerics Flag that determines if the generics implementation has strong types passed in to the generics implementation. Declaration public bool HasStrongTypesInGenerics { get; } Property Value Type Description Boolean | Improve this Doc View Source IsArray Flag that determines if the type is an array of the target type. Declaration public bool IsArray { get; } Property Value Type Description Boolean | Improve this Doc View Source IsClass Flag that determines if the type is a class. Declaration public bool IsClass { get; } Property Value Type Description Boolean | Improve this Doc View Source IsDelegate Flag that determines if the type is a delegate. Declaration public bool IsDelegate { get; } Property Value Type Description Boolean | Improve this Doc View Source IsEnum Flag that determines if the type is a enumeration. Declaration public bool IsEnum { get; } Property Value Type Description Boolean | Improve this Doc View Source IsGeneric Flag the determines if this item supports generics Declaration public bool IsGeneric { get; } Property Value Type Description Boolean | Improve this Doc View Source IsGenericPlaceHolder Flag that determines if the type is a generic place holder definition. Declaration public bool IsGenericPlaceHolder { get; } Property Value Type Description Boolean | Improve this Doc View Source IsInterface Flag that determines if the type is an interface. Declaration public bool IsInterface { get; } Property Value Type Description Boolean | Improve this Doc View Source IsStructure Flag that determines if the type is a structure. Declaration public bool IsStructure { get; } Property Value Type Description Boolean | Improve this Doc View Source IsTuple Flag that determine if the type is a Tuple Declaration public bool IsTuple { get; } Property Value Type Description Boolean | Improve this Doc View Source IsValueType Flag that determines if the type is a value type. Declaration public bool IsValueType { get; } Property Value Type Description Boolean | Improve this Doc View Source IsWellKnownType Flag that determines if the type is one of the well know data types of the language. Declaration public bool IsWellKnownType { get; } Property Value Type Description Boolean | Improve this Doc View Source Name The name of the type. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source Namespace The namespace the type belongs to. Declaration public string Namespace { get; } Property Value Type Description String | Improve this Doc View Source SupportsDisposable Flag that determines if the type supports the interface IDisposable . Declaration public bool SupportsDisposable { get; } Property Value Type Description Boolean | Improve this Doc View Source TupleTypes List of the types that are implemented in the Tuple. This will an empty list if the type is not a tuple. Declaration public IReadOnlyList<CsTupleTypeParameter> TupleTypes { get; } Property Value Type Description IReadOnlyList < CsTupleTypeParameter > | Improve this Doc View Source ValueTypeDefaultValue The default value for well known value data types. This will be null if the value is not a well known value type. Declaration public string ValueTypeDefaultValue { get; } Property Value Type Description String | Improve this Doc View Source WellKnownType Enumeration of the target well known type this type represents. Declaration public CsKnownLanguageType WellKnownType { get; } Property Value Type Description CsKnownLanguageType Methods | Improve this Doc View Source GetClassModel() Loads the full ICsClass model from the type definition. Declaration public CsClass GetClassModel() Returns Type Description CsClass Return the fully loaded model or an empty model if the type is not a class. | Improve this Doc View Source GetClassModelData() Loads the full ICsClass model from the type definition. Declaration protected abstract CsClass GetClassModelData() Returns Type Description CsClass Return the fully loaded model or an empty model if the type is not a class. | Improve this Doc View Source GetDelegateModel() Loads the full ICsDelegate model from the type definition. Declaration public CsDelegate GetDelegateModel() Returns Type Description CsDelegate Return the fully loaded model or an empty model if the type is not a delegate. | Improve this Doc View Source GetDelegateModelData() Loads the full ICsDelegate model from the type definition. Declaration protected abstract CsDelegate GetDelegateModelData() Returns Type Description CsDelegate Return the fully loaded model or an empty model if the type is not a delegate. | Improve this Doc View Source GetEnumModel() Loads the full ICsEnum model from the type definition. Declaration public CsEnum GetEnumModel() Returns Type Description CsEnum Return the fully loaded model or an empty model if the type is not an enumeration. | Improve this Doc View Source GetEnumModelData() Logic to load the full model data for an enumeration. Declaration protected abstract CsEnum GetEnumModelData() Returns Type Description CsEnum Return the fully loaded model or an empty model if the type is not an enumeration. | Improve this Doc View Source GetInterfaceModel() Loads the full CsInterface model from the type definition. Declaration public CsInterface GetInterfaceModel() Returns Type Description CsInterface Return the fully loaded model or an empty model if the type is not an interface. | Improve this Doc View Source GetInterfaceModelData() Loads the full ICsInterface model from the type definition. Declaration protected abstract CsInterface GetInterfaceModelData() Returns Type Description CsInterface Return the fully loaded model or an empty model if the type is not an interface. | Improve this Doc View Source GetStructureModel() Loads the full ICsStructure model from the type definition. Declaration public CsStructure GetStructureModel() Returns Type Description CsStructure Return the fully loaded model or an empty model if the type is not a structure. | Improve this Doc View Source GetStructureModelData() Loads the full ICsStructure model from the type definition. Declaration protected abstract CsStructure GetStructureModelData() Returns Type Description CsStructure Return the fully loaded model or an empty model if the type is not a structure. Explicit Interface Implementations | Improve this Doc View Source IDotNetGeneric.GenericParameters List of the generic parameters assigned. Declaration IReadOnlyList<IDotNetGenericParameter> IDotNetGeneric.GenericParameters { get; } Returns Type Description IReadOnlyList < IDotNetGenericParameter > | Improve this Doc View Source IDotNetGeneric.GenericTypes Enumeration of the strong types that are implemented for each generic parameter. This will be an empty list when there is no generic types implemented. Declaration IReadOnlyList<IDotNetType> IDotNetGeneric.GenericTypes { get; } Returns Type Description IReadOnlyList < IDotNetType > | Improve this Doc View Source IDotNetType.GetClassModel() Loads the full IDotNetClass model from the type definition. Declaration IDotNetClass IDotNetType.GetClassModel() Returns Type Description IDotNetClass Return the fully loaded model or an empty model if the type is not a class. | Improve this Doc View Source IDotNetType.GetDelegateModel() Loads the full IDotNetDelegate model from the type definition. Declaration IDotNetDelegate IDotNetType.GetDelegateModel() Returns Type Description IDotNetDelegate Return the fully loaded model or an empty model if the type is not a delegate. | Improve this Doc View Source IDotNetType.GetEnumModel() Loads the full IDotNetEnum model from the type definition. Declaration IDotNetEnum IDotNetType.GetEnumModel() Returns Type Description IDotNetEnum Return the fully loaded model or an empty model if the type is not an enumeration. | Improve this Doc View Source IDotNetType.GetInterfaceModel() Loads the full IDotNetInterface model from the type definition. Declaration IDotNetInterface IDotNetType.GetInterfaceModel() Returns Type Description IDotNetInterface Return the fully loaded model or an empty model if the type is not an interface. | Improve this Doc View Source IDotNetType.GetStructureModel() Loads the full IDotNetStructure model from the type definition. Declaration IDotNetStructure IDotNetType.GetStructureModel() Returns Type Description IDotNetStructure Return the fully loaded model or an empty model if the type is not a structure. | Improve this Doc View Source IDotNetType.TupleTypes List of the types that are implemented in the Tuple. This will an empty list if the type is not a tuple. Declaration IReadOnlyList<IDotNetTupleTypeParameter> IDotNetType.TupleTypes { get; } Returns Type Description IReadOnlyList < IDotNetTupleTypeParameter > | Improve this Doc View Source IDotNetType.WellKnownType Enumeration of the target well known type this type represents. Declaration WellKnownLanguageType IDotNetType.WellKnownType { get; } Returns Type Description WellKnownLanguageType Implements ICsType ICsModel ICsGeneric IDotNetType IDotNetModel IModelStatus IDotNetGeneric Extension Methods DotNetModelExtensions.FormatCSharpFullTypeName(IDotNetType) DotNetModelExtensions.FormatCSharpTupleSignatureSyntax(IDotNetType) DotNetModelExtensions.FormatCSharpArraySignatureSyntax(IDotNetType) DotNetModelExtensions.FormatCSharpValueSyntax(IDotNetType, String) CSharpModelExtensions.ToModel<T>(CsModel) CsModelExtensions.FormatCSharpFullTypeName(CsType) CsModelExtensions.FormatCSharpTupleSignatureSyntax(CsType) CsModelExtensions.FormatCSharpArraySignatureSyntax(CsType) CsModelExtensions.FormatCSharpValueSyntax(CsType, String) CsTypeExtensions.InheritsInterface(CsType, String, String) CsTypeExtensions.InheritsBaseClass(CsType, String, String)"
  },
  "api/CodeFactory.DotNet.CSharp.CsTypeExtensions.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsTypeExtensions.html",
    "title": "Class CsTypeExtensions | CodeFactory Guidance",
    "keywords": "Class CsTypeExtensions Extensions class that provides common automation tasks rolled up under standard extension methods that support the CsType model. Inheritance Object CsTypeExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public static class CsTypeExtensions Methods | Improve this Doc View Source InheritsBaseClass(CsType, String, String) Flag that determines if the type has a base class that is inherited by the type. Declaration public static bool InheritsBaseClass(this CsType source, string baseClassName, string baseClassNamespace = null) Parameters Type Name Description CsType source The target type to check for base class implementation. String baseClassName The name of the base class that is inherited. String baseClassNamespace Optional parameter for the namespace of the base class. Returns Type Description Boolean True if inherited or false if not found. | Improve this Doc View Source InheritsInterface(CsType, String, String) Checks a type definition to see if it inherits a target interface. Declaration public static bool InheritsInterface(this CsType source, string interfaceName, string interfaceNamespace = null) Parameters Type Name Description CsType source Type to check for inheritance String interfaceName The name of the interface String interfaceNamespace Optional parameter that contains the target namespace for the interface. Returns Type Description Boolean True if inherited or false if not."
  },
  "api/CodeFactory.DotNet.CSharp.CsUsingStatement.html": {
    "href": "api/CodeFactory.DotNet.CSharp.CsUsingStatement.html",
    "title": "Class CsUsingStatement | CodeFactory Guidance",
    "keywords": "Class CsUsingStatement Data model that represents a namespace reference in source code. Inheritance Object CsModel CsUsingStatement Implements ICsUsingStatement IDotNetNamespaceReference ILookup ICsModel IDotNetModel IModelStatus IParent IParent Inherited Members CsModel.LocalModelErrors CsModel.ModelStore CsModel.IsLoaded CsModel.HasErrors CsModel.GetErrors() CsModel.LoadedFromSource CsModel.Language CsModel.ModelType CsModel.SourceDocument CsModel.IDotNetModel.ModelType CsModel.LookupModel(String) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public abstract class CsUsingStatement : CsModel, ICsUsingStatement, IDotNetNamespaceReference, ILookup, ICsModel, IDotNetModel, IModelStatus, IParent, IParent Constructors | Improve this Doc View Source CsUsingStatement(Boolean, Boolean, Boolean, SourceCodeType, String, String, Boolean, String, String, String, ModelStore<ICsModel>, IReadOnlyList<ModelLoadException>) Constructor for the CsUsingStatement Declaration protected CsUsingStatement(bool isLoaded, bool hasErrors, bool loadedFromSource, SourceCodeType language, string lookupPath, string referenceNamespace, bool hasAlias, string alias, string parentPath, string sourceDocument = null, ModelStore<ICsModel> modelStore = null, IReadOnlyList<ModelLoadException> modelErrors = null) Parameters Type Name Description Boolean isLoaded Flag that determines if the model was loaded. Boolean hasErrors Flag that determine if errors were found creating the model. Boolean loadedFromSource Flag that determines if the model was loaded from source code or from an existing library. SourceCodeType language The target language the model was generated from. String lookupPath Fully qualified path for the model to be stored in the model store. String referenceNamespace The full namespace being referenced. Boolean hasAlias Flag that determines if the namespace is referenced by a alias name. String alias The alias name for the referenced namespace. this will be null when HasAlias is false String parentPath Fully qualified lookup path for the parent model to this model. String sourceDocument The source document that was used to build this model. This is optional parameter and can be null. ModelStore < ICsModel > modelStore Optional the lookup storage for models created during the compile or lookup of the model. IReadOnlyList < ModelLoadException > modelErrors Optional the error that occured while creating the model. Properties | Improve this Doc View Source Alias The alias assigned to the namespace being imported. This will be null if the HasAlias is false. Declaration public string Alias { get; } Property Value Type Description String | Improve this Doc View Source HasAlias Flag that determines if the namespace reference has an alias. Declaration public bool HasAlias { get; } Property Value Type Description Boolean | Improve this Doc View Source LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration public string LookupPath { get; } Property Value Type Description String | Improve this Doc View Source Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration public CsModel Parent { get; } Property Value Type Description CsModel | Improve this Doc View Source ReferenceNamespace The target namespace that is being imported into the sources scope. Declaration public string ReferenceNamespace { get; } Property Value Type Description String Methods | Improve this Doc View Source AddAfterAsync(String) Adds the source code directly after the definition of the ICsUsingStatement in the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddAfterAsync(String, String) Adds the source code directly after the definition of the ICsUsingStatement in the target document. Declaration public abstract Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String) Adds the source code directly before the definition of the ICsUsingStatement in the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String, String) Adds the source code directly before the definition of the ICsUsingStatement in the target document. Declaration public abstract Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync() Deletes the definition of the using statement from the source document. Declaration public abstract Task<CsSource> DeleteAsync() Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the using statement has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync(String) Deletes the definition of the using statement from the source document. Declaration public abstract Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The source document that the using statement is to be removed from. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the using statement has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source GetModel(String) Gets a ICsModel from the currently loaded source code. Declaration public ICsModel GetModel(string lookupPath) Parameters Type Name Description String lookupPath The fully qualified path to the model to be loaded. Returns Type Description ICsModel The loaded model or null if the model could not be found. | Improve this Doc View Source GetSourceLocationAsync() Gets the starting and ending locations within the document where the using statement is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task < ISourceLocation > The source location for the using statement. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source GetSourceLocationAsync(String) Gets the starting and ending locations within the document where the using statement is located. Declaration public abstract Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The fully qualified path to the document that has the using statement defined in. Returns Type Description Task < ISourceLocation > The source location for the using statement. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source ReplaceAsync(String) Replaces the current using statement with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source ReplaceAsync(String, String) Replaces the current using statement with the provided source code. Declaration public abstract Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Explicit Interface Implementations | Improve this Doc View Source IParent.Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration IDotNetModel IParent.Parent { get; } Returns Type Description IDotNetModel Implements ICsUsingStatement IDotNetNamespaceReference ILookup ICsModel IDotNetModel IModelStatus IParent IParent Extension Methods CSharpModelExtensions.ToModel<T>(CsModel)"
  },
  "api/CodeFactory.DotNet.CSharp.FormattedSyntax.CommonContextualKeywords.html": {
    "href": "api/CodeFactory.DotNet.CSharp.FormattedSyntax.CommonContextualKeywords.html",
    "title": "Class CommonContextualKeywords | CodeFactory Guidance",
    "keywords": "Class CommonContextualKeywords Syntax formatting for common keywords that are contextual in nature and not reserved words in the C# language. They will belong to one or more target libraries. Inheritance Object CommonContextualKeywords Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp.FormattedSyntax Assembly : CodeFactory.DotNet.dll Syntax public static class CommonContextualKeywords Fields | Improve this Doc View Source Add Keyword to defining a custom event accessor. Declaration public const string Add = \"add\" Field Value Type Description String | Improve this Doc View Source Alias Keyword to assign an alias name to reference types in a target assembly. Declaration public const string Alias = \"alias\" Field Value Type Description String | Improve this Doc View Source Ascending Keyword to denote an ascending sort order from smallest to largest in an order by clause in a LINQ expression. Declaration public const string Ascending = \"ascending\" Field Value Type Description String | Improve this Doc View Source Async Keyword that denotes the method is implemented as an async operation and is always paired with one or more await keywords. Declaration public const string Async = \"async\" Field Value Type Description String | Improve this Doc View Source Await Keyword that denotes an async operation is executing and waiting for the result of the operation. Always used with one Async keyword decloration. Declaration public const string Await = \"await\" Field Value Type Description String | Improve this Doc View Source By Keyword that is used in a grouping clause how the returned items should be grouped. This is used in LINQ syntax. Declaration public const string By = \"by\" Field Value Type Description String | Improve this Doc View Source Descending Keyword to denote an descending sort order from largest to smallest in an order by clause in a LINQ expression. Declaration public const string Descending = \"descending\" Field Value Type Description String | Improve this Doc View Source Dynamic Keyword that is used by variables that skips compile time checking. Declaration public const string Dynamic = \"dynamic\" Field Value Type Description String | Improve this Doc View Source From Keyword that denotes the source of a an expression. This is used in LINQ expressions. Declaration public const string From = \"from\" Field Value Type Description String | Improve this Doc View Source Get Keyword that defines an accessor method for properties or indexers. Declaration public const string Get = \"get\" Field Value Type Description String | Improve this Doc View Source Global Keyword that denotes a global scope namespace. Declaration public const string Global = \"global\" Field Value Type Description String | Improve this Doc View Source Group Keyword that defines a grouping operation in a LINQ expression. Declaration public const string Group = \"group\" Field Value Type Description String | Improve this Doc View Source Into Keyword that creates a temporary named identifier for the results of a group, join or select clause in a LINQ expression. Declaration public const string Into = \"into\" Field Value Type Description String | Improve this Doc View Source Join Keyword that defines the start of a join operation in a LINQ expression. Declaration public const string Join = \"join\" Field Value Type Description String | Improve this Doc View Source KeywordEquals Keyword that is used in join clauses to denotes the two target values are equal. This is used in LINQ expressions. Declaration public const string KeywordEquals = \"equals\" Field Value Type Description String | Improve this Doc View Source Let Keyword that stores the results of a sub expression used in LINQ expressions. Declaration public const string Let = \"let\" Field Value Type Description String | Improve this Doc View Source NameOf Keyword operation that gets the name of the variable, type, or member. Declaration public const string NameOf = \"nameof\" Field Value Type Description String | Improve this Doc View Source On Keyword using in join operations used to specify a join condition. This is used in LINQ expressions. Declaration public const string On = \"on\" Field Value Type Description String | Improve this Doc View Source OrderBy Keyword used to set the return order definition from a LINQ expression. Declaration public const string OrderBy = \"orderby\" Field Value Type Description String | Improve this Doc View Source Partial Keyword that defines that a class or method definition will be split across at least two code files. Declaration public const string Partial = \"partial\" Field Value Type Description String | Improve this Doc View Source Remove Keyword that defines an event accessor method that removes a subscription from a target event. Declaration public const string Remove = \"remove\" Field Value Type Description String | Improve this Doc View Source Select Keyword that defines the collection of data, used in LINQ expressions. Declaration public const string Select = \"select\" Field Value Type Description String | Improve this Doc View Source Set Keyword that defines an accessor method for properties and indexers. Declaration public const string Set = \"set\" Field Value Type Description String | Improve this Doc View Source Value Keyword that denotes the value that has been passed to a set accessor. Declaration public const string Value = \"value\" Field Value Type Description String | Improve this Doc View Source Var Keyword that defines a local variable used within the scope of a method body. Declaration public const string Var = \"var\" Field Value Type Description String | Improve this Doc View Source When Keyword that is used a validation condition in switch statements. (Note: Available in C# 7.0 and later). Also used as a validation condition with catch statements. (Note: Available in C# 6.0 and later). Declaration public const string When = \"when\" Field Value Type Description String | Improve this Doc View Source Where Keyword used to start the definition of constraining condition on a generic type. Also used a evaluation to determine what data will be returned from a LINQ expression. Declaration public const string Where = \"where\" Field Value Type Description String | Improve this Doc View Source Yield Keyword used to denote in an iterator. Used with return and break statements. Declaration public const string Yield = \"yield\" Field Value Type Description String"
  },
  "api/CodeFactory.DotNet.CSharp.FormattedSyntax.html": {
    "href": "api/CodeFactory.DotNet.CSharp.FormattedSyntax.html",
    "title": "Namespace CodeFactory.DotNet.CSharp.FormattedSyntax | CodeFactory Guidance",
    "keywords": "Namespace CodeFactory.DotNet.CSharp.FormattedSyntax Classes CommonContextualKeywords Syntax formatting for common keywords that are contextual in nature and not reserved words in the C# language. They will belong to one or more target libraries. Keywords Data class that contains the C# formatted syntax for keywords. Security Data class that defines the syntax for security scope within the C# language. Symbols Data class that provides the syntax to common symbols used in the definition of C# source code. WellKnownTypes Data class that holds the c# syntax definition for well know data types."
  },
  "api/CodeFactory.DotNet.CSharp.FormattedSyntax.Keywords.html": {
    "href": "api/CodeFactory.DotNet.CSharp.FormattedSyntax.Keywords.html",
    "title": "Class Keywords | CodeFactory Guidance",
    "keywords": "Class Keywords Data class that contains the C# formatted syntax for keywords. Inheritance Object Keywords Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp.FormattedSyntax Assembly : CodeFactory.DotNet.dll Syntax public static class Keywords Fields | Improve this Doc View Source Abstract Keyword for an abstraction Declaration public const string Abstract = \"abstract\" Field Value Type Description String | Improve this Doc View Source As Keyword for type conversion using an 'as' statement Declaration public const string As = \"as\" Field Value Type Description String | Improve this Doc View Source Base Keyword for usage of the base keyword used with constructors Declaration public const string Base = \"base\" Field Value Type Description String | Improve this Doc View Source Break Keyword for exiting a running loop. Declaration public const string Break = \"break\" Field Value Type Description String | Improve this Doc View Source Case Keyword for a particular item to be evaluated in a switch statement. Declaration public const string Case = \"case\" Field Value Type Description String | Improve this Doc View Source Catch Keyword that captures an exception used with a try statement. Declaration public const string Catch = \"catch\" Field Value Type Description String | Improve this Doc View Source Checked Keyword to check math operations are within bounds of the target type. Declaration public const string Checked = \"checked\" Field Value Type Description String | Improve this Doc View Source Class Keyword that defines a class. Declaration public const string Class = \"class\" Field Value Type Description String | Improve this Doc View Source Constant Keyword that denotes the field is a constant value. Declaration public const string Constant = \"const\" Field Value Type Description String | Improve this Doc View Source Continue Keyword that manages control flow in a loop and tell the control to continue operation at the beginning of the loop. Declaration public const string Continue = \"continue\" Field Value Type Description String | Improve this Doc View Source Default Keyword to denote the default label in a switch statement, also used to return the default value of a type. Declaration public const string Default = \"default\" Field Value Type Description String | Improve this Doc View Source Delegate Keyword to know the definition of a delegate method. Declaration public const string Delegate = \"delegate\" Field Value Type Description String | Improve this Doc View Source Do Keyword to define an expression check to be true in order for the loop to continue execution. Declaration public const string Do = \"do\" Field Value Type Description String | Improve this Doc View Source Else Keyword to cause execution of an alternate set of logic when an if statement is not true. Declaration public const string Else = \"else\" Field Value Type Description String | Improve this Doc View Source Enum Keyword to begin the definition of an enumeration type. Declaration public const string Enum = \"enum\" Field Value Type Description String | Improve this Doc View Source Event Keyword to begin the definition of an event. Declaration public const string Event = \"event\" Field Value Type Description String | Improve this Doc View Source Explicit Keyword that denotes a data conversion that can throw an error or lose information. Declaration public const string Explicit = \"explicit\" Field Value Type Description String | Improve this Doc View Source Extern Keyword used to declare a method that is implemented in an externally accessed library. (Used with DLL imports) Declaration public const string Extern = \"extern\" Field Value Type Description String | Improve this Doc View Source False Keyword that notes a false statement for a Boolean data type. Declaration public const string False = \"false\" Field Value Type Description String | Improve this Doc View Source Finally Keyword to force the execution of statement after try and catch blocks have executed. Declaration public const string Finally = \"finally\" Field Value Type Description String | Improve this Doc View Source Fixed Keyword to keep the garbage collector from moving a variable. Generally used with external api and unmanaged calls. Declaration public const string Fixed = \"fixed\" Field Value Type Description String | Improve this Doc View Source For Keyword to define a for loop. Declaration public const string For = \"for\" Field Value Type Description String | Improve this Doc View Source ForEach Keyword to define a for each loop. Declaration public const string ForEach = \"foreach\" Field Value Type Description String | Improve this Doc View Source Goto Keyword that informs where the logic execution will move to. Declaration public const string Goto = \"goto\" Field Value Type Description String | Improve this Doc View Source If Keyword that starts an evaluation to determine if a statement is true. Declaration public const string If = \"if\" Field Value Type Description String | Improve this Doc View Source Implicit Keyword used to declare a data conversion that is safe and will not throw an error or lose data. Declaration public const string Implicit = \"implicit\" Field Value Type Description String | Improve this Doc View Source In Keyword used in 4 cases, generic type parameters , a parameter modifer to pass arguments, define the target value in for each statements, usage in from clauses, and in join clauses. Declaration public const string In = \"in\" Field Value Type Description String | Improve this Doc View Source Interface Keyword that starts the definition of a interface type. Declaration public const string Interface = \"interface\" Field Value Type Description String | Improve this Doc View Source Is Keyword that checks if an expression is compatible with a target type. Declaration public const string Is = \"is\" Field Value Type Description String | Improve this Doc View Source Lock Keyword that starts the execution of code that can be accessed by one thread at a time. Declaration public const string Lock = \"lock\" Field Value Type Description String | Improve this Doc View Source Namespace Keyword that defines the namespace the following code definitions belong to. Declaration public const string Namespace = \"namespace\" Field Value Type Description String | Improve this Doc View Source New Keyword that defines the new instance of a data type. Declaration public const string New = \"new\" Field Value Type Description String | Improve this Doc View Source Null Keyword that defines a reference type does not exist and has no memory reference. Declaration public const string Null = \"null\" Field Value Type Description String | Improve this Doc View Source Operator Keyword that starts a custom definition of operation for the target type. Declaration public const string Operator = \"operator\" Field Value Type Description String | Improve this Doc View Source Out Keyword that signals that a passed parameter will receive an output of data. Also used with generic definitions to note the type parameter is covariant. Declaration public const string Out = \"out\" Field Value Type Description String | Improve this Doc View Source Override Keyword that signals that an extension or modification of methods, properties, indexers, or events. Declaration public const string Override = \"override\" Field Value Type Description String | Improve this Doc View Source Params Keyword that signals that a method parameter will be taking on a variable number of additional arguments of the target type. Declaration public const string Params = \"params\" Field Value Type Description String | Improve this Doc View Source Readonly Keyword that notes a field cannot be changed once the constructor has run. Declaration public const string Readonly = \"readonly\" Field Value Type Description String | Improve this Doc View Source Ref Keyword to note the value was passed by reference. Declaration public const string Ref = \"ref\" Field Value Type Description String | Improve this Doc View Source Return Keyword to return a target set of data from the executing method body. Declaration public const string Return = \"return\" Field Value Type Description String | Improve this Doc View Source Sealed Keyword to lock the definition from being inherited by other classes. Declaration public const string Sealed = \"sealed\" Field Value Type Description String | Improve this Doc View Source SizeOf Keyword operator that returns the number of bytes occupied by the variable. Declaration public const string SizeOf = \"sizeof\" Field Value Type Description String | Improve this Doc View Source StackAlloc Keyword allocates memory during execution of a method and removes at the end of the execution of the method. Allocated directly from the stack. Declaration public const string StackAlloc = \"stackalloc\" Field Value Type Description String | Improve this Doc View Source Static Keyword that declares a static member that belongs to the type and not to an instance of the type. Declaration public const string Static = \"static\" Field Value Type Description String | Improve this Doc View Source Structure Keyword that declares the creation of a structure. Declaration public const string Structure = \"struct\" Field Value Type Description String | Improve this Doc View Source Switch Keyword that declares a switch statement. Declaration public const string Switch = \"switch\" Field Value Type Description String | Improve this Doc View Source This Keyword that references the current instance of the hosting class. Declaration public const string This = \"this\" Field Value Type Description String | Improve this Doc View Source Throw Keyword that raises an instance of a target exception. Declaration public const string Throw = \"throw\" Field Value Type Description String | Improve this Doc View Source True Keyword that is a true condition in a Boolean data type. Declaration public const string True = \"true\" Field Value Type Description String | Improve this Doc View Source Try Keyword that is the start of a try block. Declaration public const string Try = \"try\" Field Value Type Description String | Improve this Doc View Source TypeOf Keyword that determines gets the type definition of the object. Declaration public const string TypeOf = \"typeof\" Field Value Type Description String | Improve this Doc View Source UnChecked Keyword to suppress overflow checking in arithmetic operations and conversions. Declaration public const string UnChecked = \"unchecked\" Field Value Type Description String | Improve this Doc View Source UnSafe Keyword to note this call access pointers and is unsafe for memory collection. Declaration public const string UnSafe = \"unsafe\" Field Value Type Description String | Improve this Doc View Source Using Keyword directive to note a target namespace that is used in the scope of a code file. Declaration public const string Using = \"using\" Field Value Type Description String | Improve this Doc View Source UsingStatic Keyword directive to a static type where the static members and nested type can be accessed without specifying the type. Declaration public const string UsingStatic = \"using static\" Field Value Type Description String | Improve this Doc View Source Virtual Keyword to note that a method, property, indexer, or event can be overridden. Declaration public const string Virtual = \"virtual\" Field Value Type Description String | Improve this Doc View Source Void Keyword that notes that the method will not return a value. Declaration public const string Void = \"void\" Field Value Type Description String | Improve this Doc View Source Volatile Keyword that determines a field can be modified by multiple threads during execution at the same time. Declaration public const string Volatile = \"volatile\" Field Value Type Description String | Improve this Doc View Source While Keyword that continues execution of a code block while the evaluation statement is true. Declaration public const string While = \"while\" Field Value Type Description String"
  },
  "api/CodeFactory.DotNet.CSharp.FormattedSyntax.Security.html": {
    "href": "api/CodeFactory.DotNet.CSharp.FormattedSyntax.Security.html",
    "title": "Class Security | CodeFactory Guidance",
    "keywords": "Class Security Data class that defines the syntax for security scope within the C# language. Inheritance Object Security Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp.FormattedSyntax Assembly : CodeFactory.DotNet.dll Syntax public static class Security Fields | Improve this Doc View Source Internal Security scope that allows access to types and members only within files in the same assembly. Declaration public const string Internal = \"internal\" Field Value Type Description String | Improve this Doc View Source Private Security scope that allows access only within the scope of the body of a class or structure. Declaration public const string Private = \"private\" Field Value Type Description String | Improve this Doc View Source PrivateProtected Security scope that allows access only within the containing class or types that derive from the containing class. (Note: Only in version 7.2 or later of the C# language) Declaration public const string PrivateProtected = \"private protected\" Field Value Type Description String | Improve this Doc View Source Protected Security scope that allows access with the target class and any classes that derived from that class. Declaration public const string Protected = \"protected\" Field Value Type Description String | Improve this Doc View Source ProtectedInternal Security scope limited access to the current assembly or types derived from the containing class. Declaration public const string ProtectedInternal = \"protected internal\" Field Value Type Description String | Improve this Doc View Source Public Security scope that allows access to types and members and is the least restrictive security type. Declaration public const string Public = \"public\" Field Value Type Description String"
  },
  "api/CodeFactory.DotNet.CSharp.FormattedSyntax.Symbols.html": {
    "href": "api/CodeFactory.DotNet.CSharp.FormattedSyntax.Symbols.html",
    "title": "Class Symbols | CodeFactory Guidance",
    "keywords": "Class Symbols Data class that provides the syntax to common symbols used in the definition of C# source code. Inheritance Object Symbols Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp.FormattedSyntax Assembly : CodeFactory.DotNet.dll Syntax public static class Symbols Fields | Improve this Doc View Source ArrayDefinitionEnd Symbol that ends the definition of an array. Declaration public const string ArrayDefinitionEnd = \"]\" Field Value Type Description String | Improve this Doc View Source ArrayDefinitionStart Symbol that starts the definition of an array. Declaration public const string ArrayDefinitionStart = \"[\" Field Value Type Description String | Improve this Doc View Source EndOfStatement Symbol that denotes the end of a C# code statement. Declaration public const string EndOfStatement = \";\" Field Value Type Description String | Improve this Doc View Source GenericDefinitionEnd Symbol that ends the definition of a generic. Declaration public const string GenericDefinitionEnd = \">\" Field Value Type Description String | Improve this Doc View Source GenericDefinitionStart Symbol that starts the definition of a generic. Declaration public const string GenericDefinitionStart = \"<\" Field Value Type Description String | Improve this Doc View Source MultipleStatementEnd Symbol that ends the definition of multiple C# statements to be executed. Declaration public const string MultipleStatementEnd = \"}\" Field Value Type Description String | Improve this Doc View Source MultipleStatementStart Symbol that starts the definition for multiple C# statements to be executed. Declaration public const string MultipleStatementStart = \"{\" Field Value Type Description String | Improve this Doc View Source ParametersDefinitionEnd Symbol that ends the definition of a parameters section. Declaration public const string ParametersDefinitionEnd = \")\" Field Value Type Description String | Improve this Doc View Source ParametersDefinitionStart Symbol that starts the definition of a parameters section. Declaration public const string ParametersDefinitionStart = \"(\" Field Value Type Description String"
  },
  "api/CodeFactory.DotNet.CSharp.FormattedSyntax.WellKnownTypes.html": {
    "href": "api/CodeFactory.DotNet.CSharp.FormattedSyntax.WellKnownTypes.html",
    "title": "Class WellKnownTypes | CodeFactory Guidance",
    "keywords": "Class WellKnownTypes Data class that holds the c# syntax definition for well know data types. Inheritance Object WellKnownTypes Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp.FormattedSyntax Assembly : CodeFactory.DotNet.dll Syntax public static class WellKnownTypes Fields | Improve this Doc View Source Boolean Syntax for a Boolean data type. Declaration public const string Boolean = \"bool\" Field Value Type Description String | Improve this Doc View Source Byte Syntax for a Byte data type. Declaration public const string Byte = \"byte\" Field Value Type Description String | Improve this Doc View Source Character Syntax for a Char data type. Declaration public const string Character = \"char\" Field Value Type Description String | Improve this Doc View Source Datetime Syntax for a DateTime data type. Declaration public const string Datetime = \"DateTime\" Field Value Type Description String | Improve this Doc View Source Decimal Syntax for a Decimal data type. Declaration public const string Decimal = \"decimal\" Field Value Type Description String | Improve this Doc View Source Double Syntax for a Double data type. Declaration public const string Double = \"double\" Field Value Type Description String | Improve this Doc View Source Float Syntax for a Single data type. Declaration public const string Float = \"float\" Field Value Type Description String | Improve this Doc View Source Int Syntax for a Int32 data type. Declaration public const string Int = \"int\" Field Value Type Description String | Improve this Doc View Source Long Syntax for a Int64 data type. Declaration public const string Long = \"long\" Field Value Type Description String | Improve this Doc View Source Object Syntax for a Object data type. Declaration public const string Object = \"object\" Field Value Type Description String | Improve this Doc View Source PlatformPointer Syntax for a UIntPtr data type. Declaration public const string PlatformPointer = \"UIntPtr\" Field Value Type Description String | Improve this Doc View Source Pointer Syntax for a IntPtr data type. Declaration public const string Pointer = \"IntPtr\" Field Value Type Description String | Improve this Doc View Source SByte Syntax for a SByte data type. Declaration public const string SByte = \"sbyte\" Field Value Type Description String | Improve this Doc View Source Short Syntax for a Int16 data type. Declaration public const string Short = \"short\" Field Value Type Description String | Improve this Doc View Source String Syntax for a String data type. Declaration public const string String = \"string\" Field Value Type Description String | Improve this Doc View Source Uint Syntax for a UInt32 data type. Declaration public const string Uint = \"uint\" Field Value Type Description String | Improve this Doc View Source Ulong Syntax for a UInt64 data type. Declaration public const string Ulong = \"ulong\" Field Value Type Description String | Improve this Doc View Source Ushort Syntax for a UInt16 data type. Declaration public const string Ushort = \"ushort\" Field Value Type Description String"
  },
  "api/CodeFactory.DotNet.CSharp.html": {
    "href": "api/CodeFactory.DotNet.CSharp.html",
    "title": "Namespace CodeFactory.DotNet.CSharp | CodeFactory Guidance",
    "keywords": "Namespace CodeFactory.DotNet.CSharp Classes CsAttribute Data model that represents an attribute. CsAttributeParameter Data model that represents a attribute parameter. CsAttributeParameterValue Data class that represents an attributes parameter value. CsClass Data model that represents a class implementation. CsClassExtensions Extensions class that provides common automation tasks rolled up under standard extension methods that support the CsClass model. CsContainer Data model that implements the base implement for all models that support members. CsContainerExtensions Extension management class that manages dot net models that implement the ICsContainer interface. CsDelegate Data model that represents the definition of a delegate. CsEnum Data model that represents an enumeration definition. CsEnumValue Data model that represents a defined value for an enumeration. CsEvent Data model that represents the definition of an event. CsField Data model that represents a field definition. CsGenericParameter Data model that represents the a generic parameter definition. CSharpModelExtensions Extension class that manages extensions for the c# models. CsInterface Data model that represents in definition of an interface. CsMember Data model that builds the base class definition for all member types. CsMemberExtensions Extension methods that support model that implement the CsMember interface. CsMethod Data model that represents a method definition. CsModel Base class that all C# compiler based data models derive from. CsModelExtensions Static class that stores extension methods that support all models that derive from ICsModel CsModelStore Model storage class used to store c# code factory models, to be used to pass data to factories. CsNamespace Data model that represents the definition of a namespace. CsParameter Data model that represents a parameter definition. CsParameterDefaultValue Data model that represents the default value for a parameter. CsProperty Data model that represents the definition of a property. CsSource Data model that represents source code. CsSourceExtensions Extensions class that provides common automation tasks rolled up under standard extension methods that support the CsSource model. CsStructure Data model that represents the definition of a structure. CsTupleTypeParameter Data model that represents a tuple type parameter. CsType Data model that represents the definition of a type. CsTypeExtensions Extensions class that provides common automation tasks rolled up under standard extension methods that support the CsType model. CsUsingStatement Data model that represents a namespace reference in source code. InterfaceMemberExtensions Extensions class that provides helper methods for implementation of member functions. Interfaces ICsAttribute Model definition for an attribute in a c# implementation. ICsAttributeParameter The model information for a attribute used for a c# implementation. ICsAttributeParameterValue The model information for an attributes parameter value for c# implementation. ICsAttributes Interface that determines if a c# model has attributes assigned. ICsClass Model definition for a class in C#. ICsContainer The base implementation all container type models must implement in C#. ICsDelegate Model definition of a delegate in C#. ICsEnum Data model that provides information on an enumeration. ICsEnumValue Data model that provides information to a specific enumeration value implemented in an enumeration. ICsEvent Model definition of a event in c#. ICsField Model definition of a Field in .net. ICsGeneric Definition that determines if the c# model implements generics. ICsGenericParameter Model contract for information about a parameter used in a generic definition. ICsInterface Model implementation of an interface in C#. ICsMember Base definition for all c# member models. ICsMethod Model definition of a method in c#. ICsModel Base implementation all C# models must implement. ICsNamespace Model definition for a namespace definition inside a code file in C#. ICsParameter The definition of a parameter used in C#. ICsParameterDefaultValue Model that represents a default value for a ICsParameter model. ICsProperty Model definition of a property in C#. ICsSource Source definition from a source that was written in C#. ICsStructure Model definition for a structure in C#. ICsT4Factory Definition of the required properties, events, and methods that are required in c# T4 factory. ICsTupleTypeParameter ICsType Model that defines a type used in a C# model definition. ICsUsingStatement Model that represents a using statement in a C# source model. IParent Defines information how to find the parent model for the model that implements this C# model. Enums CsContainerType Definition of the different types of container based members are supported by the C# source code type. CsKnownLanguageType Enumeration that identifies well know types used by the C# language. CsMemberType Enumeration of the types of members that are supported in the c# source code type. CsMethodType Enumeration of the type of methods that are supported in C#. CsModelType The code factory model types that represent the C# source code type. CsSecurity Enumeration that determines the security scope of the C# model being represented."
  },
  "api/CodeFactory.DotNet.CSharp.ICsAttribute.html": {
    "href": "api/CodeFactory.DotNet.CSharp.ICsAttribute.html",
    "title": "Interface ICsAttribute | CodeFactory Guidance",
    "keywords": "Interface ICsAttribute Model definition for an attribute in a c# implementation. Inherited Members ICsModel.ModelType IDotNetAttribute.HasParameters IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles IParent.Parent Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface ICsAttribute : ICsModel, IDotNetAttribute, IDotNetModel, IModelStatus, ISourceFiles, IParent, IParent Properties | Improve this Doc View Source Parameters Enumeration of the parameters that are assigned to the attribute. This will be an empty list if HasParameters is false. Declaration IReadOnlyList<CsAttributeParameter> Parameters { get; } Property Value Type Description IReadOnlyList < CsAttributeParameter > | Improve this Doc View Source Type The type information for the attribute itself. Declaration CsType Type { get; } Property Value Type Description CsType Methods | Improve this Doc View Source AddAfterAsync(String) Adds the source code directly after the definition of the ICsAttribute in the target document. Declaration Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddAfterAsync(String, String) Adds the source code directly after the definition of the ICsAttribute in the target document. Declaration Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String) Adds the source code directly before the definition of the ICsAttribute in the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String, String) Adds the source code directly before the definition of the ICsAttribute in the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync() Deletes the definition of the attribute from the source document. Declaration Task<CsSource> DeleteAsync() Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the attribute has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync(String) Deletes the definition of the attribute from the source document. Declaration Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The source document that the attribute is to be removed from. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the attribute has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source GetModel(String) Gets a ICsModel from the currently loaded source code. Declaration CsModel GetModel(string lookupPath) Parameters Type Name Description String lookupPath The fully qualified path to the model to be loaded. Returns Type Description CsModel The loaded model or null if the model could not be found. | Improve this Doc View Source GetSourceLocationAsync() Gets the starting and ending locations within the document where the attribute is located. Declaration Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task < ISourceLocation > The source location for the attribute. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source GetSourceLocationAsync(String) Gets the starting and ending locations within the document where the attribute is located. Declaration Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The fully qualified path to the document that has the attribute defined in. Returns Type Description Task < ISourceLocation > The source location for the attribute. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source ReplaceAsync(String) Replaces the current attribute with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source ReplaceAsync(String, String) Replaces the current attribute with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Extension Methods DotNetModelExtensions.FormatCSharpAttributeSignatureSyntax(IDotNetAttribute)"
  },
  "api/CodeFactory.DotNet.CSharp.ICsAttributeParameter.html": {
    "href": "api/CodeFactory.DotNet.CSharp.ICsAttributeParameter.html",
    "title": "Interface ICsAttributeParameter | CodeFactory Guidance",
    "keywords": "Interface ICsAttributeParameter The model information for a attribute used for a c# implementation. Inherited Members ICsModel.ModelType IDotNetAttributeParameter.HasNamedParameter IDotNetAttributeParameter.Name IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface ICsAttributeParameter : ICsModel, IDotNetAttributeParameter, IDotNetModel, IModelStatus Properties | Improve this Doc View Source Value The value that was assigned to the parameter. Declaration CsAttributeParameterValue Value { get; } Property Value Type Description CsAttributeParameterValue"
  },
  "api/CodeFactory.DotNet.CSharp.ICsAttributeParameterValue.html": {
    "href": "api/CodeFactory.DotNet.CSharp.ICsAttributeParameterValue.html",
    "title": "Interface ICsAttributeParameterValue | CodeFactory Guidance",
    "keywords": "Interface ICsAttributeParameterValue The model information for an attributes parameter value for c# implementation. Inherited Members ICsModel.ModelType IDotNetAttributeParameterValue.ParameterKind IDotNetAttributeParameterValue.Value IDotNetAttributeParameterValue.EnumValue IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface ICsAttributeParameterValue : ICsModel, IDotNetAttributeParameterValue, IDotNetModel, IModelStatus Properties | Improve this Doc View Source TypeValue The type definition of the parameter that was passed. This will be populated if the property ParameterKind is set to 'Type' Declaration CsType TypeValue { get; } Property Value Type Description CsType | Improve this Doc View Source Values Gets an enumeration of all the parameter values that were assigned to the attribute parameter. This will be populated if the property ParameterKind is set to 'Array' Declaration IReadOnlyList<CsAttributeParameterValue> Values { get; } Property Value Type Description IReadOnlyList < CsAttributeParameterValue > Extension Methods DotNetModelExtensions.FormatCSharpAttributeParameterValueSignatureSyntax(IDotNetAttributeParameterValue)"
  },
  "api/CodeFactory.DotNet.CSharp.ICsAttributes.html": {
    "href": "api/CodeFactory.DotNet.CSharp.ICsAttributes.html",
    "title": "Interface ICsAttributes | CodeFactory Guidance",
    "keywords": "Interface ICsAttributes Interface that determines if a c# model has attributes assigned. Inherited Members IDotNetAttributes.HasAttributes Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface ICsAttributes : IDotNetAttributes Properties | Improve this Doc View Source Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration IReadOnlyList<CsAttribute> Attributes { get; } Property Value Type Description IReadOnlyList < CsAttribute >"
  },
  "api/CodeFactory.DotNet.CSharp.ICsClass.html": {
    "href": "api/CodeFactory.DotNet.CSharp.ICsClass.html",
    "title": "Interface ICsClass | CodeFactory Guidance",
    "keywords": "Interface ICsClass Model definition for a class in C#. Inherited Members ICsContainer.ContainerType ICsContainer.Security ICsContainer.InheritedInterfaces ICsContainer.Members ICsContainer.Methods ICsContainer.Properties ICsContainer.Events ICsContainer.AddBeforeAsync(String, String) ICsContainer.AddBeforeAsync(String) ICsContainer.AddAfterAsync(String, String) ICsContainer.AddAfterAsync(String) ICsContainer.AddToBeginningAsync(String, String) ICsContainer.AddToBeginningAsync(String) ICsContainer.AddToEndAsync(String, String) ICsContainer.AddToEndAsync(String) ICsContainer.DeleteAsync(String) ICsContainer.DeleteAsync() ICsContainer.GetSourceLocationAsync(String) ICsContainer.GetSourceLocationAsync() ICsContainer.GetBodySourceLocationAsync(String) ICsContainer.GetBodySourceLocationAsync() ICsContainer.ReplaceAsync(String, String) ICsContainer.ReplaceAsync(String) ICsContainer.GetModel(String) ICsModel.ModelType ICsAttributes.Attributes ICsGeneric.GenericParameters ICsGeneric.GenericTypes IParent.Parent IDotNetClass.IsStatic IDotNetClass.IsAbstract IDotNetClass.IsSealed IDotNetContainer.Name IDotNetContainer.Namespace IDotNetContainer.GetBodySyntaxAsync() IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles IDotNetAttributes.HasAttributes IDocumentation.HasDocumentation IDocumentation.Documentation IDotNetGeneric.IsGeneric IDotNetGeneric.HasStrongTypesInGenerics ILookup.LookupPath Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface ICsClass : ICsContainer, ICsModel, ICsAttributes, ICsGeneric, IParent, IDotNetClass, IDotNetContainer, IDotNetModel, IModelStatus, ISourceFiles, IDotNetAttributes, IDocumentation, IDotNetGeneric, IParent, ILookup Properties | Improve this Doc View Source BaseClass The base class assigned to this class. This will be null if HasBase is false. Declaration CsClass BaseClass { get; } Property Value Type Description CsClass | Improve this Doc View Source Constructors List of the constructors implemented in this class. Declaration IReadOnlyList<CsMethod> Constructors { get; } Property Value Type Description IReadOnlyList < CsMethod > | Improve this Doc View Source Destructor The destructor implemented in this class. Declaration CsMethod Destructor { get; } Property Value Type Description CsMethod | Improve this Doc View Source Fields List of the fields implemented in this class. Declaration IReadOnlyList<CsField> Fields { get; } Property Value Type Description IReadOnlyList < CsField > Extension Methods DotNetContainerExtensions.FormatCSharpComparisonMembers(IDotNetContainer, MemberComparisonType) DotNetContainerExtensions.MissingInterfaceMembers(IDotNetClass)"
  },
  "api/CodeFactory.DotNet.CSharp.ICsContainer.html": {
    "href": "api/CodeFactory.DotNet.CSharp.ICsContainer.html",
    "title": "Interface ICsContainer | CodeFactory Guidance",
    "keywords": "Interface ICsContainer The base implementation all container type models must implement in C#. Inherited Members ICsModel.ModelType ICsAttributes.Attributes ICsGeneric.GenericParameters ICsGeneric.GenericTypes IDotNetContainer.Name IDotNetContainer.Namespace IDotNetContainer.GetBodySyntaxAsync() IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles IDotNetAttributes.HasAttributes IDocumentation.HasDocumentation IDocumentation.Documentation IDotNetGeneric.IsGeneric IDotNetGeneric.HasStrongTypesInGenerics ILookup.LookupPath IParent.Parent Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface ICsContainer : ICsModel, ICsAttributes, ICsGeneric, IDotNetContainer, IDotNetModel, IModelStatus, ISourceFiles, IDotNetAttributes, IDocumentation, IDotNetGeneric, ILookup, IParent, IParent Properties | Improve this Doc View Source ContainerType The type of container model that has been implemented. Declaration CsContainerType ContainerType { get; } Property Value Type Description CsContainerType | Improve this Doc View Source Events Enumeration of the events assigned to this container. If HasEvents is false this will be null. Declaration IReadOnlyList<CsEvent> Events { get; } Property Value Type Description IReadOnlyList < CsEvent > | Improve this Doc View Source InheritedInterfaces List of the interfaces that are inherited by this container. Declaration IReadOnlyList<CsInterface> InheritedInterfaces { get; } Property Value Type Description IReadOnlyList < CsInterface > | Improve this Doc View Source Members List of the members that are implemented in this container. Declaration IReadOnlyList<CsMember> Members { get; } Property Value Type Description IReadOnlyList < CsMember > | Improve this Doc View Source Methods List of the methods that are implemented in this container. Declaration IReadOnlyList<CsMethod> Methods { get; } Property Value Type Description IReadOnlyList < CsMethod > | Improve this Doc View Source Properties List of the properties that are implemented in this container. Declaration IReadOnlyList<CsProperty> Properties { get; } Property Value Type Description IReadOnlyList < CsProperty > | Improve this Doc View Source Security The security scope assigned to the container. Declaration CsSecurity Security { get; } Property Value Type Description CsSecurity Methods | Improve this Doc View Source AddAfterAsync(String) Adds the source code directly after the definition of the ICsContainer in the target document. Declaration Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddAfterAsync(String, String) Adds the source code directly after the definition of the ICsContainer in the target document. Declaration Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String) Adds the source code directly before the definition of the ICsContainer in the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String, String) Adds the source code directly before the definition of the ICsContainer in the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddToBeginningAsync(String) Adds the source code inside of the container at the beginning of where members are defined in the container. Declaration Task<CsSource> AddToBeginningAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. | Improve this Doc View Source AddToBeginningAsync(String, String) Adds the source code inside of the container at the beginning of where members are defined in the container. Declaration Task<CsSource> AddToBeginningAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. | Improve this Doc View Source AddToEndAsync(String) Adds the source code inside of the container at the end of where members are defined in the container. Declaration Task<CsSource> AddToEndAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. | Improve this Doc View Source AddToEndAsync(String, String) Adds the source code inside of the container at the end of where members are defined in the container. Declaration Task<CsSource> AddToEndAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. | Improve this Doc View Source DeleteAsync() Deletes the definition of the container from the source document. Declaration Task<CsSource> DeleteAsync() Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the container has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync(String) Deletes the definition of the container from the source document. Declaration Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The source document that the container is to be removed from. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the container has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source GetBodySourceLocationAsync() Gets the starting and ending locations of the body located in the container. Declaration Task<ISourceLocation> GetBodySourceLocationAsync() Returns Type Description Task < ISourceLocation > The source location in the container. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source GetBodySourceLocationAsync(String) Gets the starting and ending locations of the body located in the container. Declaration Task<ISourceLocation> GetBodySourceLocationAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The fully qualified path to the document that has the container defined in. Returns Type Description Task < ISourceLocation > The source location in the container. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source GetModel(String) Gets a ICsModel from the currently loaded source code. Declaration CsModel GetModel(string lookupPath) Parameters Type Name Description String lookupPath The fully qualified path to the model to be loaded. Returns Type Description CsModel The loaded model or null if the model could not be found. | Improve this Doc View Source GetSourceLocationAsync() Gets the starting and ending locations within the document where the container is located. Declaration Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task < ISourceLocation > The source location for the container. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source GetSourceLocationAsync(String) Gets the starting and ending locations within the document where the container is located. Declaration Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The fully qualified path to the document that has the container defined in. Returns Type Description Task < ISourceLocation > The source location for the container. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source ReplaceAsync(String) Replaces the current container with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source ReplaceAsync(String, String) Replaces the current container with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Extension Methods DotNetContainerExtensions.FormatCSharpComparisonMembers(IDotNetContainer, MemberComparisonType)"
  },
  "api/CodeFactory.DotNet.CSharp.ICsDelegate.html": {
    "href": "api/CodeFactory.DotNet.CSharp.ICsDelegate.html",
    "title": "Interface ICsDelegate | CodeFactory Guidance",
    "keywords": "Interface ICsDelegate Model definition of a delegate in C#. Inherited Members ICsModel.ModelType ICsAttributes.Attributes ICsGeneric.GenericParameters ICsGeneric.GenericTypes IDotNetDelegate.Name IDotNetDelegate.Namespace IDotNetDelegate.HasParameters IDotNetDelegate.IsVoid IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() IDotNetAttributes.HasAttributes IDotNetGeneric.IsGeneric IDotNetGeneric.HasStrongTypesInGenerics IDocumentation.HasDocumentation IDocumentation.Documentation ILookup.LookupPath ISourceFiles.SourceFiles IParent.Parent Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface ICsDelegate : ICsModel, ICsAttributes, ICsGeneric, IDotNetDelegate, IDotNetModel, IModelStatus, IDotNetAttributes, IDotNetGeneric, IDocumentation, ILookup, ISourceFiles, IParent, IParent Properties | Improve this Doc View Source BeginInvokeMethod The begin invoke method definition for this delegate. Declaration CsMethod BeginInvokeMethod { get; } Property Value Type Description CsMethod | Improve this Doc View Source EndInvokeMethod The end invoke method definition for this delegate. Declaration CsMethod EndInvokeMethod { get; } Property Value Type Description CsMethod | Improve this Doc View Source InvokeMethod The invoke method definition for this delegate. Declaration CsMethod InvokeMethod { get; } Property Value Type Description CsMethod | Improve this Doc View Source Parameters List of the parameters that have been assigned to the delegate. If HasParameters property is set to false this will be an empty list. Declaration IReadOnlyList<CsParameter> Parameters { get; } Property Value Type Description IReadOnlyList < CsParameter > | Improve this Doc View Source ReturnType The type information about the return type assigned to the method. Declaration CsType ReturnType { get; } Property Value Type Description CsType | Improve this Doc View Source Security The security scope that has been assigned to this item. Declaration CsSecurity Security { get; } Property Value Type Description CsSecurity Methods | Improve this Doc View Source AddAfterAsync(String) Adds the source code directly after the definition of the ICsDelegate in the target document. Declaration Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddAfterAsync(String, String) Adds the source code directly after the definition of the ICsDelegate in the target document. Declaration Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String) Adds the source code directly before the definition of the ICsDelegate in the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String, String) Adds the source code directly before the definition of the ICsDelegate in the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync() Deletes the definition of the delegate from the source document. Declaration Task<CsSource> DeleteAsync() Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync(String) Deletes the definition of the delegate from the source document. Declaration Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The source document that the delegate is to be removed from. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source GetModel(String) Gets a ICsModel from the currently loaded source code. Declaration CsModel GetModel(string lookupPath) Parameters Type Name Description String lookupPath The fully qualified path to the model to be loaded. Returns Type Description CsModel The loaded model or null if the model could not be found. | Improve this Doc View Source GetSourceLocationAsync() Gets the starting and ending locations within the document where the delegate is located. Declaration Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task < ISourceLocation > The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source GetSourceLocationAsync(String) Gets the starting and ending locations within the document where the delegate is located. Declaration Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The fully qualified path to the document that has the delegate defined in. Returns Type Description Task < ISourceLocation > The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source ReplaceAsync(String) Replaces the current delegate with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source ReplaceAsync(String, String) Replaces the current delegate with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document."
  },
  "api/CodeFactory.DotNet.CSharp.ICsEnum.html": {
    "href": "api/CodeFactory.DotNet.CSharp.ICsEnum.html",
    "title": "Interface ICsEnum | CodeFactory Guidance",
    "keywords": "Interface ICsEnum Data model that provides information on an enumeration. Inherited Members ICsModel.ModelType ICsAttributes.Attributes IParent.Parent IDotNetEnum.Name IDotNetEnum.Namespace IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() IDotNetAttributes.HasAttributes IDocumentation.HasDocumentation IDocumentation.Documentation ILookup.LookupPath ISourceFiles.SourceFiles Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface ICsEnum : ICsModel, ICsAttributes, IParent, IDotNetEnum, IDotNetModel, IModelStatus, IDotNetAttributes, IDocumentation, IParent, ILookup, ISourceFiles Properties | Improve this Doc View Source Security The security scope assigned to the enumeration. Declaration CsSecurity Security { get; } Property Value Type Description CsSecurity | Improve this Doc View Source Values List of the enumeration values implemented in this enumeration. Declaration IReadOnlyList<CsEnumValue> Values { get; } Property Value Type Description IReadOnlyList < CsEnumValue > Methods | Improve this Doc View Source AddAfterAsync(String) Adds the source code directly after the definition of the ICsEnum in the target document. Declaration Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddAfterAsync(String, String) Adds the source code directly after the definition of the ICsEnum in the target document. Declaration Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String) Adds the source code directly before the definition of the ICsEnum in the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String, String) Adds the source code directly before the definition of the ICsEnum in the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync() Deletes the definition of the delegate from the source document. Declaration Task<CsSource> DeleteAsync() Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync(String) Deletes the definition of the delegate from the source document. Declaration Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The source document that the delegate is to be removed from. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source GetModel(String) Gets a ICsModel from the currently loaded source code. Declaration ICsModel GetModel(string lookupPath) Parameters Type Name Description String lookupPath The fully qualified path to the model to be loaded. Returns Type Description ICsModel The loaded model or null if the model could not be found. | Improve this Doc View Source GetSourceLocationAsync() Gets the starting and ending locations within the document where the delegate is located. Declaration Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task < ISourceLocation > The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source GetSourceLocationAsync(String) Gets the starting and ending locations within the document where the delegate is located. Declaration Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The fully qualified path to the document that has the delegate defined in. Returns Type Description Task < ISourceLocation > The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source ReplaceAsync(String) Replaces the current delegate with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source ReplaceAsync(String, String) Replaces the current delegate with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Extension Methods DotNetModelExtensions.FormatCSharpEnumTypeSyntax(IDotNetEnum, String) DotNetModelExtensions.FormatCSharpEnumValueSyntax(IDotNetEnum, String)"
  },
  "api/CodeFactory.DotNet.CSharp.ICsEnumValue.html": {
    "href": "api/CodeFactory.DotNet.CSharp.ICsEnumValue.html",
    "title": "Interface ICsEnumValue | CodeFactory Guidance",
    "keywords": "Interface ICsEnumValue Data model that provides information to a specific enumeration value implemented in an enumeration. Inherited Members ICsModel.ModelType ICsAttributes.Attributes IParent.Parent IDotNetEnumValue.Name IDotNetEnumValue.Value IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() IDotNetAttributes.HasAttributes IDocumentation.HasDocumentation IDocumentation.Documentation ILookup.LookupPath ISourceFiles.SourceFiles Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface ICsEnumValue : ICsModel, ICsAttributes, IParent, IDotNetEnumValue, IDotNetModel, IModelStatus, IDotNetAttributes, IDocumentation, IParent, ILookup, ISourceFiles Properties | Improve this Doc View Source Security The security scope assigned to the enumeration value. Declaration CsSecurity Security { get; } Property Value Type Description CsSecurity Methods | Improve this Doc View Source AddAfterAsync(String) Adds the source code directly after the definition of the ICsEnumValue in the target document. Declaration Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddAfterAsync(String, String) Adds the source code directly after the definition of the ICsEnumValue in the target document. Declaration Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String) Adds the source code directly before the definition of the ICsEnumValue in the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String, String) Adds the source code directly before the definition of the ICsEnumValue in the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync() Deletes the definition of the delegate from the source document. Declaration Task<CsSource> DeleteAsync() Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync(String) Deletes the definition of the delegate from the source document. Declaration Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The source document that the delegate is to be removed from. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source GetModel(String) Gets a ICsModel from the currently loaded source code. Declaration ICsModel GetModel(string lookupPath) Parameters Type Name Description String lookupPath The fully qualified path to the model to be loaded. Returns Type Description ICsModel The loaded model or null if the model could not be found. | Improve this Doc View Source GetSourceLocationAsync() Gets the starting and ending locations within the document where the delegate is located. Declaration Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task < ISourceLocation > The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source GetSourceLocationAsync(String) Gets the starting and ending locations within the document where the delegate is located. Declaration Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The fully qualified path to the document that has the delegate defined in. Returns Type Description Task < ISourceLocation > The source location for the delegate. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source ReplaceAsync(String) Replaces the current delegate with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source ReplaceAsync(String, String) Replaces the current delegate with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document."
  },
  "api/CodeFactory.DotNet.CSharp.ICsEvent.html": {
    "href": "api/CodeFactory.DotNet.CSharp.ICsEvent.html",
    "title": "Interface ICsEvent | CodeFactory Guidance",
    "keywords": "Interface ICsEvent Model definition of a event in c#. Inherited Members ICsMember.Security ICsMember.MemberType ICsMember.AddBeforeAsync(String, String) ICsMember.AddBeforeAsync(String) ICsMember.AddAfterAsync(String, String) ICsMember.AddAfterAsync(String) ICsMember.DeleteAsync(String) ICsMember.DeleteAsync() ICsMember.GetSourceLocationAsync(String) ICsMember.GetSourceLocationAsync() ICsMember.ReplaceAsync(String, String) ICsMember.ReplaceAsync(String) ICsMember.GetModel(String) ICsModel.ModelType ICsAttributes.Attributes IParent.Parent IDotNetEvent.IsAbstract IDotNetEvent.IsVirtual IDotNetEvent.IsOverride IDotNetEvent.IsSealed IDotNetEvent.IsStatic IDotNetMember.Name IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles IDotNetAttributes.HasAttributes IDocumentation.HasDocumentation IDocumentation.Documentation ILookup.LookupPath Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface ICsEvent : ICsMember, ICsModel, ICsAttributes, IParent, IDotNetEvent, IDotNetMember, IDotNetModel, IModelStatus, ISourceFiles, IDotNetAttributes, IDocumentation, IParent, ILookup Properties | Improve this Doc View Source AddMethod The method that adds a subscription to the event. Declaration CsMethod AddMethod { get; } Property Value Type Description CsMethod | Improve this Doc View Source EventHandlerDelegate The event handler delegate used by the event. Declaration CsDelegate EventHandlerDelegate { get; } Property Value Type Description CsDelegate | Improve this Doc View Source EventType The event handler type that is assigned to the event. Declaration CsType EventType { get; } Property Value Type Description CsType | Improve this Doc View Source RaiseMethod The method definition to raise the event. Declaration CsMethod RaiseMethod { get; } Property Value Type Description CsMethod | Improve this Doc View Source RemoveMethod The method that removes a subscription to the event. Declaration CsMethod RemoveMethod { get; } Property Value Type Description CsMethod Extension Methods DotNetMemberExtensions.FormatCSharpMemberComparisonHashCode(IDotNetMember, MemberComparisonType) DotNetMemberExtensions.FormatCSharpDeclarationSyntax(IDotNetEvent, Boolean, Boolean, Boolean, Boolean) DotNetMemberExtensions.FormatCSharpComparisonHashCode(IDotNetEvent, Boolean, Boolean, Boolean)"
  },
  "api/CodeFactory.DotNet.CSharp.ICsField.html": {
    "href": "api/CodeFactory.DotNet.CSharp.ICsField.html",
    "title": "Interface ICsField | CodeFactory Guidance",
    "keywords": "Interface ICsField Model definition of a Field in .net. Inherited Members ICsMember.Security ICsMember.MemberType ICsMember.AddBeforeAsync(String, String) ICsMember.AddBeforeAsync(String) ICsMember.AddAfterAsync(String, String) ICsMember.AddAfterAsync(String) ICsMember.DeleteAsync(String) ICsMember.DeleteAsync() ICsMember.GetSourceLocationAsync(String) ICsMember.GetSourceLocationAsync() ICsMember.ReplaceAsync(String, String) ICsMember.ReplaceAsync(String) ICsMember.GetModel(String) ICsModel.ModelType ICsAttributes.Attributes IParent.Parent IDotNetField.IsReadOnly IDotNetField.IsStatic IDotNetField.IsConstant IDotNetField.ConstantValue IDotNetMember.Name IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles IDotNetAttributes.HasAttributes IDocumentation.HasDocumentation IDocumentation.Documentation ILookup.LookupPath Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface ICsField : ICsMember, ICsModel, ICsAttributes, IParent, IDotNetField, IDotNetMember, IDotNetModel, IModelStatus, ISourceFiles, IDotNetAttributes, IDocumentation, IParent, ILookup Properties | Improve this Doc View Source DataType The data type assigned to the field. Declaration CsType DataType { get; } Property Value Type Description CsType Extension Methods DotNetMemberExtensions.FormatCSharpMemberComparisonHashCode(IDotNetMember, MemberComparisonType) DotNetMemberExtensions.FormatCSharpDeclarationSyntax(IDotNetField, Boolean, Boolean, Boolean) DotNetMemberExtensions.FormatCSharpComparisonHashCode(IDotNetField, Boolean, Boolean, Boolean)"
  },
  "api/CodeFactory.DotNet.CSharp.ICsGeneric.html": {
    "href": "api/CodeFactory.DotNet.CSharp.ICsGeneric.html",
    "title": "Interface ICsGeneric | CodeFactory Guidance",
    "keywords": "Interface ICsGeneric Definition that determines if the c# model implements generics. Inherited Members IDotNetGeneric.IsGeneric IDotNetGeneric.HasStrongTypesInGenerics Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface ICsGeneric : IDotNetGeneric Properties | Improve this Doc View Source GenericParameters List of the generic parameters assigned. Declaration IReadOnlyList<CsGenericParameter> GenericParameters { get; } Property Value Type Description IReadOnlyList < CsGenericParameter > | Improve this Doc View Source GenericTypes List of the strong types that are implemented for each generic parameter. This will be an empty List when there is no generic types implemented. Declaration IReadOnlyList<CsType> GenericTypes { get; } Property Value Type Description IReadOnlyList < CsType >"
  },
  "api/CodeFactory.DotNet.CSharp.ICsGenericParameter.html": {
    "href": "api/CodeFactory.DotNet.CSharp.ICsGenericParameter.html",
    "title": "Interface ICsGenericParameter | CodeFactory Guidance",
    "keywords": "Interface ICsGenericParameter Model contract for information about a parameter used in a generic definition. Inherited Members ICsModel.ModelType IDotNetGenericParameter.HasOutKeyword IDotNetGenericParameter.HasNewConstraint IDotNetGenericParameter.HasClassConstraint IDotNetGenericParameter.HasStructConstraint IDotNetGenericParameter.HasConstraintTypes IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface ICsGenericParameter : ICsModel, IDotNetGenericParameter, IDotNetModel, IModelStatus Properties | Improve this Doc View Source ConstrainingTypes The constraining types the generic parameter must ad hear to. If there are no constraining types an empty list will be returned. Declaration IReadOnlyList<CsType> ConstrainingTypes { get; } Property Value Type Description IReadOnlyList < CsType > | Improve this Doc View Source Type The type definition of the generic parameter. Declaration CsType Type { get; } Property Value Type Description CsType Extension Methods DotNetModelExtensions.FormatCSharpGenericWhereClauseSyntax(IDotNetGenericParameter)"
  },
  "api/CodeFactory.DotNet.CSharp.ICsInterface.html": {
    "href": "api/CodeFactory.DotNet.CSharp.ICsInterface.html",
    "title": "Interface ICsInterface | CodeFactory Guidance",
    "keywords": "Interface ICsInterface Model implementation of an interface in C#. Inherited Members ICsContainer.ContainerType ICsContainer.Security ICsContainer.InheritedInterfaces ICsContainer.Members ICsContainer.Methods ICsContainer.Properties ICsContainer.Events ICsContainer.AddBeforeAsync(String, String) ICsContainer.AddBeforeAsync(String) ICsContainer.AddAfterAsync(String, String) ICsContainer.AddAfterAsync(String) ICsContainer.AddToBeginningAsync(String, String) ICsContainer.AddToBeginningAsync(String) ICsContainer.AddToEndAsync(String, String) ICsContainer.AddToEndAsync(String) ICsContainer.DeleteAsync(String) ICsContainer.DeleteAsync() ICsContainer.GetSourceLocationAsync(String) ICsContainer.GetSourceLocationAsync() ICsContainer.GetBodySourceLocationAsync(String) ICsContainer.GetBodySourceLocationAsync() ICsContainer.ReplaceAsync(String, String) ICsContainer.ReplaceAsync(String) ICsContainer.GetModel(String) ICsModel.ModelType ICsAttributes.Attributes ICsGeneric.GenericParameters ICsGeneric.GenericTypes IParent.Parent IDotNetContainer.Name IDotNetContainer.Namespace IDotNetContainer.GetBodySyntaxAsync() IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles IDotNetAttributes.HasAttributes IDocumentation.HasDocumentation IDocumentation.Documentation IDotNetGeneric.IsGeneric IDotNetGeneric.HasStrongTypesInGenerics ILookup.LookupPath Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface ICsInterface : ICsContainer, ICsModel, ICsAttributes, ICsGeneric, IParent, IDotNetInterface, IDotNetContainer, IDotNetModel, IModelStatus, ISourceFiles, IDotNetAttributes, IDocumentation, IDotNetGeneric, IParent, ILookup Extension Methods DotNetContainerExtensions.FormatCSharpComparisonMembers(IDotNetContainer, MemberComparisonType)"
  },
  "api/CodeFactory.DotNet.CSharp.ICsMember.html": {
    "href": "api/CodeFactory.DotNet.CSharp.ICsMember.html",
    "title": "Interface ICsMember | CodeFactory Guidance",
    "keywords": "Interface ICsMember Base definition for all c# member models. Inherited Members ICsModel.ModelType ICsAttributes.Attributes IDotNetMember.Name IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles IDotNetAttributes.HasAttributes IDocumentation.HasDocumentation IDocumentation.Documentation ILookup.LookupPath IParent.Parent Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface ICsMember : ICsModel, ICsAttributes, IDotNetMember, IDotNetModel, IModelStatus, ISourceFiles, IDotNetAttributes, IDocumentation, ILookup, IParent, IParent Properties | Improve this Doc View Source MemberType The type of member the model is. Declaration CsMemberType MemberType { get; } Property Value Type Description CsMemberType | Improve this Doc View Source Security The security scope that has been assigned to the member. Declaration CsSecurity Security { get; } Property Value Type Description CsSecurity Methods | Improve this Doc View Source AddAfterAsync(String) Adds the source code directly after the definition of the ICsMember in the target document. Declaration Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddAfterAsync(String, String) Adds the source code directly after the definition of the ICsMember in the target document. Declaration Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String) Adds the source code directly before the definition of the ICsMember in the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String, String) Adds the source code directly before the definition of the ICsMember in the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync() Deletes the definition of the member from the source document. Declaration Task<CsSource> DeleteAsync() Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the member has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync(String) Deletes the definition of the member from the source document. Declaration Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The source document that the member is to be removed from. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the member has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source GetModel(String) Gets a ICsModel from the currently loaded source code. Declaration CsModel GetModel(string lookupPath) Parameters Type Name Description String lookupPath The fully qualified path to the model to be loaded. Returns Type Description CsModel The loaded model or null if the model could not be found. | Improve this Doc View Source GetSourceLocationAsync() Gets the starting and ending locations within the document where the member is located. Declaration Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task < ISourceLocation > The source location for the member. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source GetSourceLocationAsync(String) Gets the starting and ending locations within the document where the member is located. Declaration Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The fully qualified path to the document that has the member defined in. Returns Type Description Task < ISourceLocation > The source location for the member. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source ReplaceAsync(String) Replaces the current member with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source ReplaceAsync(String, String) Replaces the current member with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Extension Methods DotNetMemberExtensions.FormatCSharpMemberComparisonHashCode(IDotNetMember, MemberComparisonType)"
  },
  "api/CodeFactory.DotNet.CSharp.ICsMethod.html": {
    "href": "api/CodeFactory.DotNet.CSharp.ICsMethod.html",
    "title": "Interface ICsMethod | CodeFactory Guidance",
    "keywords": "Interface ICsMethod Model definition of a method in c#. Inherited Members ICsMember.Security ICsMember.MemberType ICsMember.AddBeforeAsync(String, String) ICsMember.AddBeforeAsync(String) ICsMember.AddAfterAsync(String, String) ICsMember.AddAfterAsync(String) ICsMember.DeleteAsync(String) ICsMember.DeleteAsync() ICsMember.GetSourceLocationAsync(String) ICsMember.GetSourceLocationAsync() ICsMember.ReplaceAsync(String, String) ICsMember.ReplaceAsync(String) ICsMember.GetModel(String) ICsModel.ModelType ICsAttributes.Attributes IParent.Parent ICsGeneric.GenericParameters ICsGeneric.GenericTypes IDotNetMethod.HasParameters IDotNetMethod.IsAbstract IDotNetMethod.IsVirtual IDotNetMethod.IsSealed IDotNetMethod.IsOverride IDotNetMethod.IsStatic IDotNetMethod.IsVoid IDotNetMethod.IsAsync IDotNetMethod.IsExtension IDotNetMethod.GetBodySyntaxAsync() IDotNetMember.Name IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles IDotNetAttributes.HasAttributes IDocumentation.HasDocumentation IDocumentation.Documentation ILookup.LookupPath IDotNetGeneric.IsGeneric IDotNetGeneric.HasStrongTypesInGenerics Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface ICsMethod : ICsMember, ICsModel, ICsAttributes, IParent, ICsGeneric, IDotNetMethod, IDotNetMember, IDotNetModel, IModelStatus, ISourceFiles, IDotNetAttributes, IDocumentation, IParent, ILookup, IDotNetGeneric Properties | Improve this Doc View Source MethodType Determines the type of method that was loaded into this model. Declaration CsMethodType MethodType { get; } Property Value Type Description CsMethodType | Improve this Doc View Source Parameters Enumeration of the parameters that have been assigned to the method. If HasParameters property is set to false this will be null. Declaration IReadOnlyList<CsParameter> Parameters { get; } Property Value Type Description IReadOnlyList < CsParameter > | Improve this Doc View Source ReturnType The type information about the return type assigned to the method. if flag is true then the return type will be set to null. Declaration CsType ReturnType { get; } Property Value Type Description CsType Extension Methods DotNetMemberExtensions.FormatCSharpMemberComparisonHashCode(IDotNetMember, MemberComparisonType) DotNetMemberExtensions.FormatCSharpDeclarationSyntax(IDotNetMethod, Boolean, Boolean, Boolean, Boolean) DotNetMemberExtensions.FormatCSharpComparisonHashCode(IDotNetMethod, Boolean, Boolean, Boolean)"
  },
  "api/CodeFactory.DotNet.CSharp.ICsModel.html": {
    "href": "api/CodeFactory.DotNet.CSharp.ICsModel.html",
    "title": "Interface ICsModel | CodeFactory Guidance",
    "keywords": "Interface ICsModel Base implementation all C# models must implement. Inherited Members IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface ICsModel : IDotNetModel, IModelStatus Properties | Improve this Doc View Source ModelType The type of c# model that is implemented. Declaration CsModelType ModelType { get; } Property Value Type Description CsModelType"
  },
  "api/CodeFactory.DotNet.CSharp.ICsNamespace.html": {
    "href": "api/CodeFactory.DotNet.CSharp.ICsNamespace.html",
    "title": "Interface ICsNamespace | CodeFactory Guidance",
    "keywords": "Interface ICsNamespace Model definition for a namespace definition inside a code file in C#. Inherited Members IDotNetNamespace.Name ILookup.LookupPath ISourceFiles.SourceFiles ICsModel.ModelType IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() IParent.Parent Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface ICsNamespace : IDotNetNamespace, ILookup, ISourceFiles, ICsModel, IDotNetModel, IModelStatus, IParent, IParent"
  },
  "api/CodeFactory.DotNet.CSharp.ICsParameter.html": {
    "href": "api/CodeFactory.DotNet.CSharp.ICsParameter.html",
    "title": "Interface ICsParameter | CodeFactory Guidance",
    "keywords": "Interface ICsParameter The definition of a parameter used in C#. Inherited Members ICsModel.ModelType ICsAttributes.Attributes IDotNetParameter.Name IDotNetParameter.IsOut IDotNetParameter.IsRef IDotNetParameter.IsParams IDotNetParameter.IsOptional IDotNetParameter.IsGenericParameter IDotNetParameter.HasDefaultValue IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() IDotNetAttributes.HasAttributes ILookup.LookupPath IParent.Parent Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface ICsParameter : ICsModel, ICsAttributes, IDotNetParameter, IDotNetModel, IModelStatus, IDotNetAttributes, ILookup, IParent, IParent Properties | Improve this Doc View Source DefaultValue The default value assigned to the parameter. This will be null if the HasDefaultValue property is set to false. Declaration CsParameterDefaultValue DefaultValue { get; } Property Value Type Description CsParameterDefaultValue | Improve this Doc View Source ParameterType The data type assigned to the parameter. Declaration CsType ParameterType { get; } Property Value Type Description CsType"
  },
  "api/CodeFactory.DotNet.CSharp.ICsParameterDefaultValue.html": {
    "href": "api/CodeFactory.DotNet.CSharp.ICsParameterDefaultValue.html",
    "title": "Interface ICsParameterDefaultValue | CodeFactory Guidance",
    "keywords": "Interface ICsParameterDefaultValue Model that represents a default value for a ICsParameter model. Inherited Members IDotNetParameterDefaultValue.ValueType IDotNetParameterDefaultValue.Value ILookup.LookupPath ICsModel.ModelType IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() IParent.Parent Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface ICsParameterDefaultValue : IDotNetParameterDefaultValue, ILookup, ICsModel, IDotNetModel, IModelStatus, IParent, IParent Extension Methods DotNetModelExtensions.FormatCSharpParameterDefaultValueSyntax(IDotNetParameterDefaultValue, IDotNetType)"
  },
  "api/CodeFactory.DotNet.CSharp.ICsProperty.html": {
    "href": "api/CodeFactory.DotNet.CSharp.ICsProperty.html",
    "title": "Interface ICsProperty | CodeFactory Guidance",
    "keywords": "Interface ICsProperty Model definition of a property in C#. Inherited Members ICsMember.Security ICsMember.MemberType ICsMember.AddBeforeAsync(String, String) ICsMember.AddBeforeAsync(String) ICsMember.AddAfterAsync(String, String) ICsMember.AddAfterAsync(String) ICsMember.DeleteAsync(String) ICsMember.DeleteAsync() ICsMember.GetSourceLocationAsync(String) ICsMember.GetSourceLocationAsync() ICsMember.ReplaceAsync(String, String) ICsMember.ReplaceAsync(String) ICsMember.GetModel(String) ICsModel.ModelType ICsAttributes.Attributes IParent.Parent IDotNetProperty.HasGet IDotNetProperty.HasSet IDotNetProperty.IsAbstract IDotNetProperty.IsVirtual IDotNetProperty.IsSealed IDotNetProperty.IsOverride IDotNetProperty.IsStatic IDotNetProperty.LoadGetBodySyntaxAsync() IDotNetProperty.LoadSetBodySyntaxAsync() IDotNetMember.Name IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles IDotNetAttributes.HasAttributes IDocumentation.HasDocumentation IDocumentation.Documentation ILookup.LookupPath Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface ICsProperty : ICsMember, ICsModel, ICsAttributes, IParent, IDotNetProperty, IDotNetMember, IDotNetModel, IModelStatus, ISourceFiles, IDotNetAttributes, IDocumentation, IParent, ILookup Properties | Improve this Doc View Source GetSecurity The security scope that is assigned to the get accessor. Make sure you check the HasGet to determine if the property supports get operations. Declaration CsSecurity GetSecurity { get; } Property Value Type Description CsSecurity | Improve this Doc View Source PropertyType The source data type that is managed by this property. Declaration CsType PropertyType { get; } Property Value Type Description CsType | Improve this Doc View Source SetSecurity The security scope that is assigned to the set accessor. Make sure you check the HasSet to determine if the property supports set operations. Declaration CsSecurity SetSecurity { get; } Property Value Type Description CsSecurity Extension Methods DotNetMemberExtensions.FormatCSharpMemberComparisonHashCode(IDotNetMember, MemberComparisonType) DotNetMemberExtensions.FormatCSharpDeclarationSyntax(IDotNetProperty, Boolean, Boolean, Boolean, Boolean) DotNetMemberExtensions.FormatCSharpComparisonHashCode(IDotNetProperty, Boolean, Boolean, Boolean)"
  },
  "api/CodeFactory.DotNet.CSharp.ICsSource.html": {
    "href": "api/CodeFactory.DotNet.CSharp.ICsSource.html",
    "title": "Interface ICsSource | CodeFactory Guidance",
    "keywords": "Interface ICsSource Source definition from a source that was written in C#. Inherited Members ICsModel.ModelType IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ILookup.LookupPath IParent.Parent Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface ICsSource : ICsModel, IDotNetSource, IDotNetModel, IModelStatus, ILookup, IParent, IParent Properties | Improve this Doc View Source Classes The classes that were defined in the source. Declaration IReadOnlyList<CsClass> Classes { get; } Property Value Type Description IReadOnlyList < CsClass > | Improve this Doc View Source Delegates The delegates that were defined in the source. Declaration IReadOnlyList<CsDelegate> Delegates { get; } Property Value Type Description IReadOnlyList < CsDelegate > | Improve this Doc View Source Enums The enumerations that were defined in the source. Declaration IReadOnlyList<CsEnum> Enums { get; } Property Value Type Description IReadOnlyList < CsEnum > | Improve this Doc View Source Interfaces The interfaces that were defined in the source. Declaration IReadOnlyList<CsInterface> Interfaces { get; } Property Value Type Description IReadOnlyList < CsInterface > | Improve this Doc View Source NamespaceReferences The namespaces that are used as references to access other libraries not hosted in the source document. Declaration IReadOnlyList<CsUsingStatement> NamespaceReferences { get; } Property Value Type Description IReadOnlyList < CsUsingStatement > | Improve this Doc View Source Namespaces The namespaces that were defined in the source. Declaration IReadOnlyList<CsNamespace> Namespaces { get; } Property Value Type Description IReadOnlyList < CsNamespace > | Improve this Doc View Source Structures The structures that were defined in the source. Declaration IReadOnlyList<CsStructure> Structures { get; } Property Value Type Description IReadOnlyList < CsStructure > Methods | Improve this Doc View Source AddToBeginningAsync(String) Adds the source code to the beginning of the ICsSource model. Declaration Task<CsSource> AddToBeginningAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddToEndAsync(String) Adds the source code the end of the ICsSource model. Declaration Task<CsSource> AddToEndAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync() Deletes the content from the ICsSource model. Declaration Task<CsSource> DeleteAsync() Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the delegate has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source GetModel(String) Gets a ICsModel from the currently loaded source code. Declaration CsModel GetModel(string lookupPath) Parameters Type Name Description String lookupPath The fully qualified path to the model to be loaded. Returns Type Description CsModel The loaded model or null if the model could not be found. | Improve this Doc View Source ReplaceAsync(String) Replaces the content of the ICsSource model. Declaration Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. Extension Methods CsMemberExtensions.SourceMissingInterfaceMembers(ICsSource)"
  },
  "api/CodeFactory.DotNet.CSharp.ICsStructure.html": {
    "href": "api/CodeFactory.DotNet.CSharp.ICsStructure.html",
    "title": "Interface ICsStructure | CodeFactory Guidance",
    "keywords": "Interface ICsStructure Model definition for a structure in C#. Inherited Members ICsContainer.ContainerType ICsContainer.Security ICsContainer.InheritedInterfaces ICsContainer.Members ICsContainer.Methods ICsContainer.Properties ICsContainer.Events ICsContainer.AddBeforeAsync(String, String) ICsContainer.AddBeforeAsync(String) ICsContainer.AddAfterAsync(String, String) ICsContainer.AddAfterAsync(String) ICsContainer.AddToBeginningAsync(String, String) ICsContainer.AddToBeginningAsync(String) ICsContainer.AddToEndAsync(String, String) ICsContainer.AddToEndAsync(String) ICsContainer.DeleteAsync(String) ICsContainer.DeleteAsync() ICsContainer.GetSourceLocationAsync(String) ICsContainer.GetSourceLocationAsync() ICsContainer.GetBodySourceLocationAsync(String) ICsContainer.GetBodySourceLocationAsync() ICsContainer.ReplaceAsync(String, String) ICsContainer.ReplaceAsync(String) ICsContainer.GetModel(String) ICsModel.ModelType ICsAttributes.Attributes ICsGeneric.GenericParameters ICsGeneric.GenericTypes IParent.Parent IDotNetContainer.Name IDotNetContainer.Namespace IDotNetContainer.GetBodySyntaxAsync() IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles IDotNetAttributes.HasAttributes IDocumentation.HasDocumentation IDocumentation.Documentation IDotNetGeneric.IsGeneric IDotNetGeneric.HasStrongTypesInGenerics ILookup.LookupPath Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface ICsStructure : ICsContainer, ICsModel, ICsAttributes, ICsGeneric, IParent, IDotNetStructure, IDotNetContainer, IDotNetModel, IModelStatus, ISourceFiles, IDotNetAttributes, IDocumentation, IDotNetGeneric, IParent, ILookup Properties | Improve this Doc View Source Constructors List of the constructors for this structure. Declaration IReadOnlyList<CsMethod> Constructors { get; } Property Value Type Description IReadOnlyList < CsMethod > | Improve this Doc View Source Fields List of the fields for this structure. Declaration IReadOnlyList<CsField> Fields { get; } Property Value Type Description IReadOnlyList < CsField > Extension Methods DotNetContainerExtensions.FormatCSharpComparisonMembers(IDotNetContainer, MemberComparisonType) DotNetContainerExtensions.MissingInterfaceMembers(IDotNetStructure)"
  },
  "api/CodeFactory.DotNet.CSharp.ICsT4Factory.html": {
    "href": "api/CodeFactory.DotNet.CSharp.ICsT4Factory.html",
    "title": "Interface ICsT4Factory | CodeFactory Guidance",
    "keywords": "Interface ICsT4Factory Definition of the required properties, events, and methods that are required in c# T4 factory. Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface ICsT4Factory Properties | Improve this Doc View Source CsModels C# models to be used by the T4 code factory. Declaration CsModelStore CsModels { get; set; } Property Value Type Description CsModelStore"
  },
  "api/CodeFactory.DotNet.CSharp.ICsTupleTypeParameter.html": {
    "href": "api/CodeFactory.DotNet.CSharp.ICsTupleTypeParameter.html",
    "title": "Interface ICsTupleTypeParameter | CodeFactory Guidance",
    "keywords": "Interface ICsTupleTypeParameter Inherited Members ICsModel.ModelType IDotNetTupleTypeParameter.HasDefaultName IDotNetTupleTypeParameter.Name IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface ICsTupleTypeParameter : ICsModel, IDotNetTupleTypeParameter, IDotNetModel, IModelStatus Properties | Improve this Doc View Source TupleType The model with the type definition assigned to the tuple. Declaration CsType TupleType { get; } Property Value Type Description CsType"
  },
  "api/CodeFactory.DotNet.CSharp.ICsType.html": {
    "href": "api/CodeFactory.DotNet.CSharp.ICsType.html",
    "title": "Interface ICsType | CodeFactory Guidance",
    "keywords": "Interface ICsType Model that defines a type used in a C# model definition. Inherited Members ICsModel.ModelType ICsGeneric.GenericParameters ICsGeneric.GenericTypes IDotNetType.Name IDotNetType.Namespace IDotNetType.IsWellKnownType IDotNetType.ValueTypeDefaultValue IDotNetType.IsValueType IDotNetType.SupportsDisposable IDotNetType.IsInterface IDotNetType.IsStructure IDotNetType.IsClass IDotNetType.IsArray IDotNetType.ArrayDimensions IDotNetType.IsGenericPlaceHolder IDotNetType.IsEnum IDotNetType.IsDelegate IDotNetType.IsTuple IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() IDotNetGeneric.IsGeneric IDotNetGeneric.HasStrongTypesInGenerics Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface ICsType : ICsModel, ICsGeneric, IDotNetType, IDotNetModel, IModelStatus, IDotNetGeneric Properties | Improve this Doc View Source TupleTypes List of the types that are implemented in the Tuple. This will an empty list if the type is not a tuple. Declaration IReadOnlyList<CsTupleTypeParameter> TupleTypes { get; } Property Value Type Description IReadOnlyList < CsTupleTypeParameter > | Improve this Doc View Source WellKnownType Enumeration of the target well known type this type represents. Declaration CsKnownLanguageType WellKnownType { get; } Property Value Type Description CsKnownLanguageType Methods | Improve this Doc View Source GetClassModel() Loads the full ICsClass model from the type definition. Declaration CsClass GetClassModel() Returns Type Description CsClass Return the fully loaded model or an empty model if the type is not a class. | Improve this Doc View Source GetDelegateModel() Loads the full ICsDelegate model from the type definition. Declaration CsDelegate GetDelegateModel() Returns Type Description CsDelegate Return the fully loaded model or an empty model if the type is not a delegate. | Improve this Doc View Source GetEnumModel() Loads the full ICsEnum model from the type definition. Declaration CsEnum GetEnumModel() Returns Type Description CsEnum Return the fully loaded model or an empty model if the type is not an enumeration. | Improve this Doc View Source GetInterfaceModel() Loads the full ICsInterface model from the type definition. Declaration CsInterface GetInterfaceModel() Returns Type Description CsInterface Return the fully loaded model or an empty model if the type is not an interface. | Improve this Doc View Source GetStructureModel() Loads the full ICsStructure model from the type definition. Declaration CsStructure GetStructureModel() Returns Type Description CsStructure Return the fully loaded model or an empty model if the type is not a structure. Extension Methods DotNetModelExtensions.FormatCSharpFullTypeName(IDotNetType) DotNetModelExtensions.FormatCSharpTupleSignatureSyntax(IDotNetType) DotNetModelExtensions.FormatCSharpArraySignatureSyntax(IDotNetType) DotNetModelExtensions.FormatCSharpValueSyntax(IDotNetType, String)"
  },
  "api/CodeFactory.DotNet.CSharp.ICsUsingStatement.html": {
    "href": "api/CodeFactory.DotNet.CSharp.ICsUsingStatement.html",
    "title": "Interface ICsUsingStatement | CodeFactory Guidance",
    "keywords": "Interface ICsUsingStatement Model that represents a using statement in a C# source model. Inherited Members IDotNetNamespaceReference.ReferenceNamespace IDotNetNamespaceReference.HasAlias IDotNetNamespaceReference.Alias ILookup.LookupPath ICsModel.ModelType IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() IParent.Parent Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface ICsUsingStatement : IDotNetNamespaceReference, ILookup, ICsModel, IDotNetModel, IModelStatus, IParent, IParent Methods | Improve this Doc View Source AddAfterAsync(String) Adds the source code directly after the definition of the ICsUsingStatement in the target document. Declaration Task<CsSource> AddAfterAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddAfterAsync(String, String) Adds the source code directly after the definition of the ICsUsingStatement in the target document. Declaration Task<CsSource> AddAfterAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String) Adds the source code directly before the definition of the ICsUsingStatement in the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source AddBeforeAsync(String, String) Adds the source code directly before the definition of the ICsUsingStatement in the target document. Declaration Task<CsSource> AddBeforeAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be added to the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync() Deletes the definition of the using statement from the source document. Declaration Task<CsSource> DeleteAsync() Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the using statement has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source DeleteAsync(String) Deletes the definition of the using statement from the source document. Declaration Task<CsSource> DeleteAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The source document that the using statement is to be removed from. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the using statement has been removed from the document. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source GetModel(String) Gets a ICsModel from the currently loaded source code. Declaration ICsModel GetModel(string lookupPath) Parameters Type Name Description String lookupPath The fully qualified path to the model to be loaded. Returns Type Description ICsModel The loaded model or null if the model could not be found. | Improve this Doc View Source GetSourceLocationAsync() Gets the starting and ending locations within the document where the using statement is located. Declaration Task<ISourceLocation> GetSourceLocationAsync() Returns Type Description Task < ISourceLocation > The source location for the using statement. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source GetSourceLocationAsync(String) Gets the starting and ending locations within the document where the using statement is located. Declaration Task<ISourceLocation> GetSourceLocationAsync(string sourceDocument) Parameters Type Name Description String sourceDocument The fully qualified path to the document that has the using statement defined in. Returns Type Description Task < ISourceLocation > The source location for the using statement. Exceptions Type Condition DocumentException Raised when an error occurs getting the location from the document. | Improve this Doc View Source ReplaceAsync(String) Replaces the current using statement with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceCode) Parameters Type Name Description String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document. | Improve this Doc View Source ReplaceAsync(String, String) Replaces the current using statement with the provided source code. Declaration Task<CsSource> ReplaceAsync(string sourceDocument, string sourceCode) Parameters Type Name Description String sourceDocument The fully qualified path to the source code document to be updated. String sourceCode The source code that is to be used to replace the original definition in the document. Returns Type Description Task < CsSource > A newly loaded copy of the ICsSource model after the changes have been applied. Exceptions Type Condition DocumentException Error is raised when errors occur updating the source document."
  },
  "api/CodeFactory.DotNet.CSharp.InterfaceMemberExtensions.html": {
    "href": "api/CodeFactory.DotNet.CSharp.InterfaceMemberExtensions.html",
    "title": "Class InterfaceMemberExtensions | CodeFactory Guidance",
    "keywords": "Class InterfaceMemberExtensions Extensions class that provides helper methods for implementation of member functions. Inheritance Object InterfaceMemberExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public static class InterfaceMemberExtensions Methods | Improve this Doc View Source FormatInterfaceImplementationSignature(CsMethod, Boolean) Create a fully formatted method signature that also supports implementation of Async Await formatting. Declaration public static string FormatInterfaceImplementationSignature(this CsMethod methodData, bool supportAsyncKeyword = true) Parameters Type Name Description CsMethod methodData The method data used to build the signature Boolean supportAsyncKeyword Optional parameter that determines if the async keyword will be added to the method signature. Default is true. Returns Type Description String Fully formatted method signature for a method implementation from an interface assignment."
  },
  "api/CodeFactory.DotNet.CSharp.IParent.html": {
    "href": "api/CodeFactory.DotNet.CSharp.IParent.html",
    "title": "Interface IParent | CodeFactory Guidance",
    "keywords": "Interface IParent Defines information how to find the parent model for the model that implements this C# model. Namespace : CodeFactory.DotNet.CSharp Assembly : CodeFactory.DotNet.dll Syntax public interface IParent : IParent Properties | Improve this Doc View Source Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration CsModel Parent { get; } Property Value Type Description CsModel"
  },
  "api/CodeFactory.DotNet.DotNetContainerExtensions.html": {
    "href": "api/CodeFactory.DotNet.DotNetContainerExtensions.html",
    "title": "Class DotNetContainerExtensions | CodeFactory Guidance",
    "keywords": "Class DotNetContainerExtensions Extension management class that manages dot net models that implement the IDotNetContainer interface. Inheritance Object DotNetContainerExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public static class DotNetContainerExtensions Methods | Improve this Doc View Source FormatCSharpComparisonMembers(IDotNetContainer, MemberComparisonType) Loads all members from a target model that implements IDotNetContainer and returns all members and the comparison hash code for each member. Declaration public static IReadOnlyList<KeyValuePair<int, IDotNetMember>> FormatCSharpComparisonMembers(this IDotNetContainer source, MemberComparisonType comparisonType = MemberComparisonType.Base) Parameters Type Name Description IDotNetContainer source The target container to load members from. MemberComparisonType comparisonType The type of hash code to build for comparision. Default comparison type is set to the base comparison. Returns Type Description IReadOnlyList < KeyValuePair < Int32 , IDotNetMember >> List of all the hash codes and the members for each hashcode. Exceptions Type Condition ArgumentNullException Thrown if the source container is null. | Improve this Doc View Source MissingInterfaceMembers(IDotNetClass) Creates a list of the interface members that are not implemented in the IDotNetClass model. Declaration public static IReadOnlyList<IDotNetMember> MissingInterfaceMembers(this IDotNetClass source) Parameters Type Name Description IDotNetClass source The source model to check. Returns Type Description IReadOnlyList < IDotNetMember > List of models that are missing or an empty list if there are no missing members. Exceptions Type Condition ArgumentNullException Throws an argument null exception if the model does not exist. | Improve this Doc View Source MissingInterfaceMembers(IDotNetStructure) Creates a list of the interface members that are not implemented in the IDotNetStructure model. Declaration public static IReadOnlyList<IDotNetMember> MissingInterfaceMembers(this IDotNetStructure source) Parameters Type Name Description IDotNetStructure source The source model to check. Returns Type Description IReadOnlyList < IDotNetMember > List of models that are missing or an empty list if there are no missing members. Exceptions Type Condition ArgumentNullException Throws an argument null exception if the model does not exist."
  },
  "api/CodeFactory.DotNet.DotNetContainerType.html": {
    "href": "api/CodeFactory.DotNet.DotNetContainerType.html",
    "title": "Enum DotNetContainerType | CodeFactory Guidance",
    "keywords": "Enum DotNetContainerType Enumeration that determines the type of dot net container. Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public enum DotNetContainerType Fields Name Description Class The container implements a class model. Interface The container implements a interface model. Structure The container implements a structure model. Unknown The container is of an unknown type."
  },
  "api/CodeFactory.DotNet.DotNetMemberExtensions.html": {
    "href": "api/CodeFactory.DotNet.DotNetMemberExtensions.html",
    "title": "Class DotNetMemberExtensions | CodeFactory Guidance",
    "keywords": "Class DotNetMemberExtensions Extension methods that support model that implement the IDotNetMember interface. Inheritance Object DotNetMemberExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public static class DotNetMemberExtensions Methods | Improve this Doc View Source FormatCSharpComparisonHashCode(IDotNetEvent, Boolean, Boolean, Boolean) Gets the hash code for a formatted event signature using the C# format. Declaration public static int FormatCSharpComparisonHashCode(this IDotNetEvent source, bool includeSecurity = false, bool includeAttributes = false, bool includeKeywords = false) Parameters Type Name Description IDotNetEvent source The sources IDotNetEvent model. Boolean includeSecurity Optional parameter that determines to generate security in the definition. By default this is false. Boolean includeAttributes Optional parameter that determines if the attributes should be included in the definition. By default this is false. Boolean includeKeywords Optional parameter that determines if all keywords are included in the definition. By default this is false. Returns Type Description Int32 The hash code of the formatted model. Exceptions Type Condition ArgumentNullException This is thrown if the model is null. | Improve this Doc View Source FormatCSharpComparisonHashCode(IDotNetField, Boolean, Boolean, Boolean) Gets the hash code for a formatted field signature using the C# format. Declaration public static int FormatCSharpComparisonHashCode(this IDotNetField source, bool includeSecurity = false, bool includeAttributes = false, bool includeKeywords = false) Parameters Type Name Description IDotNetField source The sources IDotNetField model. Boolean includeSecurity Optional parameter that determines to generate security in the definition. By default this is false. Boolean includeAttributes Optional parameter that determines if the attributes should be included in the definition. By default this is false. Boolean includeKeywords Optional parameter that determines if all keywords other then constant are included in the definition. By default this is false. Returns Type Description Int32 The has code of the formatted field. Exceptions Type Condition ArgumentNullException This is thrown if the model is null. | Improve this Doc View Source FormatCSharpComparisonHashCode(IDotNetMethod, Boolean, Boolean, Boolean) Gets the hash code for a formatted method signature using the C# format. Declaration public static int FormatCSharpComparisonHashCode(this IDotNetMethod source, bool includeSecurity = false, bool includeAttributes = false, bool includeKeywords = false) Parameters Type Name Description IDotNetMethod source The sources IDotNetMethod model. Boolean includeSecurity Optional parameter that determines to generate security in the definition. By default this is false. Boolean includeAttributes Optional parameter that determines if the attributes should be included in the definition. By default this is false. Boolean includeKeywords Optional parameter that determines if all keywords are included in the definition. By default this is false. Returns Type Description Int32 The hash code of the formatted model. Exceptions Type Condition ArgumentNullException This is thrown if the model is null. | Improve this Doc View Source FormatCSharpComparisonHashCode(IDotNetProperty, Boolean, Boolean, Boolean) Gets the hash code for a formatted property signature using the C# format. Declaration public static int FormatCSharpComparisonHashCode(this IDotNetProperty source, bool includeSecurity = false, bool includeAttributes = false, bool includeKeywords = false) Parameters Type Name Description IDotNetProperty source The sources IDotNetProperty model. Boolean includeSecurity Optional parameter that determines to generate security in the definition. By default this is false. Boolean includeAttributes Optional parameter that determines if the attributes should be included in the definition. By default this is false. Boolean includeKeywords Optional parameter that determines if all keywords are included in the definition. By default this is false. Returns Type Description Int32 The hash code of the formatted model. Exceptions Type Condition ArgumentNullException This is thrown if the model is null. | Improve this Doc View Source FormatCSharpDeclarationSyntax(IDotNetEvent, Boolean, Boolean, Boolean, Boolean) Generates the syntax definition of an event in c# syntax. Declaration public static string FormatCSharpDeclarationSyntax(this IDotNetEvent source, bool includeSecurity = true, bool includeAttributes = true, bool includeKeywords = true, bool includeAbstractKeyword = false) Parameters Type Name Description IDotNetEvent source The source IDotNetEvent model to generate. Boolean includeSecurity Includes the security scope which was defined in the model. Boolean includeAttributes Includes definition of the attributes assigned to the model. Boolean includeKeywords Includes all keywords assigned to the source model. Boolean includeAbstractKeyword Will include the definition for the abstract keyword in the definition if it is defined. default is false. Returns Type Description String Fully formatted event definition or null if the event data could not be generated. | Improve this Doc View Source FormatCSharpDeclarationSyntax(IDotNetField, Boolean, Boolean, Boolean) Generates the syntax definition of field in c# syntax. The default definition with all options turned off will return the filed signature and constants if defined and the default values. Declaration public static string FormatCSharpDeclarationSyntax(this IDotNetField source, bool includeSecurity = true, bool includeAttributes = true, bool includeKeywords = true) Parameters Type Name Description IDotNetField source The source IDotNetField model to generate. Boolean includeSecurity Includes the security scope which the field was defined in the model. Boolean includeAttributes Includes definition of the attributes assigned to the model. Boolean includeKeywords Includes all keywords assigned to the field from the source model. Returns Type Description String Fully formatted field definition or null if the field data could not be generated. | Improve this Doc View Source FormatCSharpDeclarationSyntax(IDotNetMethod, Boolean, Boolean, Boolean, Boolean) Generates the syntax definition of an method in c# syntax. Declaration public static string FormatCSharpDeclarationSyntax(this IDotNetMethod source, bool includeSecurity = true, bool includeAttributes = true, bool includeKeywords = true, bool includeAbstractKeyword = false) Parameters Type Name Description IDotNetMethod source The source IDotNetMethod model to generate. Boolean includeSecurity Includes the security scope which was defined in the model. Boolean includeAttributes Includes definition of the attributes assigned to the model. Boolean includeKeywords Includes all keywords assigned to the source model. Boolean includeAbstractKeyword Will include the definition for the abstract keyword in the definition if it is defined. default is false. Returns Type Description String Fully formatted event definition or null if the event data could not be generated. | Improve this Doc View Source FormatCSharpDeclarationSyntax(IDotNetProperty, Boolean, Boolean, Boolean, Boolean) Generates the syntax definition of a default no backing fields property definition in c# syntax. Declaration public static string FormatCSharpDeclarationSyntax(this IDotNetProperty source, bool includeSecurity = true, bool includeAttributes = true, bool includeKeywords = true, bool includeAbstractKeyword = false) Parameters Type Name Description IDotNetProperty source The source IDotNetProperty model to generate. Boolean includeSecurity Includes the security scope which the property was defined in the model. Boolean includeAttributes Includes definition of the attributes assigned to the model. Boolean includeKeywords Includes all keywords assigned to the property from the source model. Boolean includeAbstractKeyword Will include the definition for the abstract keyword in the definition if it is defined. default is false. Returns Type Description String Fully formatted property definition or null if the property data could not be generated. | Improve this Doc View Source FormatCSharpMemberComparisonHashCode(IDotNetMember, MemberComparisonType) Gets the hash code for a formatted model signature using the C# format. Declaration public static int FormatCSharpMemberComparisonHashCode(this IDotNetMember source, MemberComparisonType comparisonType = MemberComparisonType.Base) Parameters Type Name Description IDotNetMember source The sources IDotNetModel model. MemberComparisonType comparisonType The type of comparision format to use when generating the hashcode. Default is set to the base comparision type. Returns Type Description Int32 The has code of the formatted model. Exceptions Type Condition ArgumentNullException This is thrown if the model is null."
  },
  "api/CodeFactory.DotNet.DotNetMemberType.html": {
    "href": "api/CodeFactory.DotNet.DotNetMemberType.html",
    "title": "Enum DotNetMemberType | CodeFactory Guidance",
    "keywords": "Enum DotNetMemberType The type of dot net member. Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public enum DotNetMemberType Fields Name Description Event The member is a event model. Field The member is a field model. Method The member is a method model. Property The member is a property model. Unknown The member type is currently not known."
  },
  "api/CodeFactory.DotNet.DotNetMethodType.html": {
    "href": "api/CodeFactory.DotNet.DotNetMethodType.html",
    "title": "Enum DotNetMethodType | CodeFactory Guidance",
    "keywords": "Enum DotNetMethodType Enumeration of the type of methods that are supported in .Net Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public enum DotNetMethodType Fields Name Description Add The method is a add method that adds subscription to a event. Constructor The method is a constructor for a supporting class or structure. Destructor The method is a destructor for a supporting class. Get The method supports the get functionality from a property. Invoke The method supports the Invoke functionality from a delegate. Local The method is a local method and imbedded in another method Member The method is a member of a supporting interface, class or structure. Raise The method supports the raise functionality from an event. Remove The method is a remove method that removes subscription from an event. Set The method supports the set functionality from a property. Unknown The type of method is unknown"
  },
  "api/CodeFactory.DotNet.DotNetModelExtensions.html": {
    "href": "api/CodeFactory.DotNet.DotNetModelExtensions.html",
    "title": "Class DotNetModelExtensions | CodeFactory Guidance",
    "keywords": "Class DotNetModelExtensions Extension methods that support models that implement IDotNetModel Inheritance Object DotNetModelExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public static class DotNetModelExtensions Methods | Improve this Doc View Source FormatCSharpArraySignatureSyntax(IDotNetType) Extension method that creates the array portion definition of a type definition in C# syntax. Declaration public static string FormatCSharpArraySignatureSyntax(this IDotNetType source) Parameters Type Name Description IDotNetType source The source type to get the array information to format. Returns Type Description String The formatted array syntax for the target type, or null if no array data was provided in the type definition. | Improve this Doc View Source FormatCSharpAttributeParametersSignatureSyntax(IReadOnlyList<IDotNetAttributeParameter>) Extension method that creates the attributes parameters list for a attribute definition in c# syntax format. Declaration public static string FormatCSharpAttributeParametersSignatureSyntax(this IReadOnlyList<IDotNetAttributeParameter> source) Parameters Type Name Description IReadOnlyList < IDotNetAttributeParameter > source THe source list of parameters to be created. Returns Type Description String The fully formatted parameters section of a attribute declaration. | Improve this Doc View Source FormatCSharpAttributeParameterValueSignatureSyntax(IDotNetAttributeParameterValue) Creates the implementation of an attribute value formatted for C#. Declaration public static string FormatCSharpAttributeParameterValueSignatureSyntax(this IDotNetAttributeParameterValue source) Parameters Type Name Description IDotNetAttributeParameterValue source The source value to format. Returns Type Description String The formatted value, or null if the model does not exist. | Improve this Doc View Source FormatCSharpAttributeSignatureSyntax(IDotNetAttribute) Extension method that returns a full attribute declaration in the C# language format. Declaration public static string FormatCSharpAttributeSignatureSyntax(this IDotNetAttribute source) Parameters Type Name Description IDotNetAttribute source The attribute toe generate the c# signature for. Returns Type Description String | Improve this Doc View Source FormatCSharpEnumTypeSyntax(IDotNetEnum, String) Extension method that will lookup the enumeration type based on the provided value. Declaration public static string FormatCSharpEnumTypeSyntax(this IDotNetEnum source, string value) Parameters Type Name Description IDotNetEnum source The target IDotNetEnum model to get the enumeration type from. String value The target numerical value to use to lookup the enumeration type. Returns Type Description String The fully qualified enumeration type or null if the enumeration type could not be found. | Improve this Doc View Source FormatCSharpEnumValueSyntax(IDotNetEnum, String) Extension method that will lookup the value of an enumeration by the enumeration type name. Declaration public static string FormatCSharpEnumValueSyntax(this IDotNetEnum source, string enumName) Parameters Type Name Description IDotNetEnum source The target IDotNetEnum model to get the enumeration value from. String enumName The target numerical named item to use to lookup the enumeration value. Returns Type Description String The target enumeration value or null if it could not be found. | Improve this Doc View Source FormatCSharpFullTypeName(IDotNetType) Extension method that generates the fully qualified type name from the IDotNetType model in the C# format. Declaration public static string FormatCSharpFullTypeName(this IDotNetType source) Parameters Type Name Description IDotNetType source The source type to get the full type name from. Returns Type Description String The fully qualified namespace and full type definition. Null if the type is missing or not loaded. | Improve this Doc View Source FormatCSharpGenericSignatureSyntax(IReadOnlyList<IDotNetGenericParameter>) Extension method that generates the generics definition part of a signature in the C# format. Declaration public static string FormatCSharpGenericSignatureSyntax(this IReadOnlyList<IDotNetGenericParameter> source) Parameters Type Name Description IReadOnlyList < IDotNetGenericParameter > source The target types that make up the generics signature. Returns Type Description String The fully formatted definition of the generics signature, or null if the source is not provided. | Improve this Doc View Source FormatCSharpGenericWhereClauseSyntax(IDotNetGenericParameter) Extension method that generates the where clause for a generic parameter if one exists. This will not generate if the generic parameter is not a place holder type, or if no where clause conditions have been provided. Declaration public static string FormatCSharpGenericWhereClauseSyntax(this IDotNetGenericParameter source) Parameters Type Name Description IDotNetGenericParameter source Generic parameter to generate the where clause from. Returns Type Description String Null if the where clause was not generated, or the C# syntax for the where clause. | Improve this Doc View Source FormatCSharpParameterDefaultValueSyntax(IDotNetParameterDefaultValue, IDotNetType) Extension method that generates the default value syntax for a parameter in the C# language. Declaration public static string FormatCSharpParameterDefaultValueSyntax(this IDotNetParameterDefaultValue source, IDotNetType type) Parameters Type Name Description IDotNetParameterDefaultValue source The target default value to format. IDotNetType type The target type of the value to be formatted. Returns Type Description String The fully formatted syntax for the default value or null if data was missing. | Improve this Doc View Source FormatCSharpParametersSignatureSyntax(IReadOnlyList<IDotNetParameter>) Extension method that create the fully formatted parameters section in c# syntax. Declaration public static string FormatCSharpParametersSignatureSyntax(this IReadOnlyList<IDotNetParameter> source) Parameters Type Name Description IReadOnlyList < IDotNetParameter > source The source list of parameters to be turned into a parameters signature. Returns Type Description String The fully formatted parameters signature or null if data was missing. | Improve this Doc View Source FormatCSharpSyntax(DotNetSecurity) Gets the security keyword for the C# language. Declaration public static string FormatCSharpSyntax(this DotNetSecurity source) Parameters Type Name Description DotNetSecurity source The source security object to get the keyword from. Returns Type Description String The name of the security keyword or null. | Improve this Doc View Source FormatCSharpTupleSignatureSyntax(IDotNetType) Extension method that creates a C# signature for the tuple type. Declaration public static string FormatCSharpTupleSignatureSyntax(this IDotNetType source) Parameters Type Name Description IDotNetType source The target declaration syntax for a tuple. Returns Type Description String The formatted tuple or null if data is missing. | Improve this Doc View Source FormatCSharpValueSyntax(IDotNetType, String) Extension method that returns a value declaration in the C# language format. Declaration public static string FormatCSharpValueSyntax(this IDotNetType source, string value) Parameters Type Name Description IDotNetType source The target type to create the value definition for. String value The value to be formatted. Returns Type Description String The definition of the value formatted for C#"
  },
  "api/CodeFactory.DotNet.DotNetModelType.html": {
    "href": "api/CodeFactory.DotNet.DotNetModelType.html",
    "title": "Enum DotNetModelType | CodeFactory Guidance",
    "keywords": "Enum DotNetModelType The models types that implemented at the dot net level and not at a target language level. Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public enum DotNetModelType Fields Name Description Attribute Model is a attribute implementation. AttributeParameter Model is a attribute parameter implementation. AttributeParameterValue Model stores a parameter value from an attribute. Class Model is a class implementation. Delegate Model is a delegate definition. DelegateParameter Model is a delegate parameter definition. DelegateParameterValue Model is a delegate parameter value. Enum Model stores a enumeration. EnumValue Model stores a value for an enumeration. Event Model is a event definition. Field Model is a field definition. GenericParameter Model is a generic parameter that belongs to a generic type. Interface Model is a interface implementation. Method Model is a method definition. Namespace Model is a namespace definition. NamespaceReference Model is a namespace reference. Parameter Model is a parameter definition. ParameterDefaultValue Model stores information about a default value assigned to a parameter. Property Model is a property definition. Source The source code that hosts the dot net models. Structure Model is a structure implementation. TupleTypeParameter Model is a tuple type parameter that belongs to a tuple type. Type Model is a type definition. Unknown The model is currently not know by the C# source type."
  },
  "api/CodeFactory.DotNet.DotNetSecurity.html": {
    "href": "api/CodeFactory.DotNet.DotNetSecurity.html",
    "title": "Enum DotNetSecurity | CodeFactory Guidance",
    "keywords": "Enum DotNetSecurity Enumeration of the security scope the target .net model is set to. Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public enum DotNetSecurity Fields Name Description Internal Security is set to internal access Private Security is set to private access Protected Security is set to protected access ProtectedInternal Security is set to protected internal access ProtectedOrInternal Security is set to projected or internal access Public Security is set to public access Unknown Security scope is unknown Extension Methods DotNetModelExtensions.FormatCSharpSyntax()"
  },
  "api/CodeFactory.DotNet.html": {
    "href": "api/CodeFactory.DotNet.html",
    "title": "Namespace CodeFactory.DotNet | CodeFactory Guidance",
    "keywords": "Namespace CodeFactory.DotNet Classes DotNetContainerExtensions Extension management class that manages dot net models that implement the IDotNetContainer interface. DotNetMemberExtensions Extension methods that support model that implement the IDotNetMember interface. DotNetModelExtensions Extension methods that support models that implement IDotNetModel PathBuilderConstants Data constants that are used when building the unique path for a dot net model. Interfaces IDocumentation Interface that determines if a model has code level documentation. IDotNetAttribute Model definition for an attribute in a .net implementation. IDotNetAttributeParameter The model information for a attribute used for a .net implementation. IDotNetAttributeParameterValue The model information for an attributes parameter value for .net implementation. IDotNetAttributes Interface that determines if a .net model has attributes assigned. IDotNetClass Model definition for a class in .net. IDotNetContainer The base implementation all container type models must implement in .net. IDotNetDelegate Model definition of a delegate in .net. IDotNetEnum Data model that provides information on an enumeration. IDotNetEnumValue Data model that provides information to a specific enumeration value implemented in an enumeration. IDotNetEvent Model definition of a event in .net. IDotNetField Model definition of a field in .net. IDotNetGeneric Definition that determines if the .net model implements generics. IDotNetGenericParameter Model contract for information about a parameter used in a generic definition. IDotNetInterface Mode definition for an interface in .net. IDotNetMember Base definition for all .net member models. IDotNetMethod Model definition of a method in .net. IDotNetModel Base implementation all dot net models must implement. IDotNetNamespace Model definition for a namespace definition inside a code file in .net. IDotNetNamespaceReference A namespace that is being referenced by dot net source code. This will determine which external library resources will be available in the source control document. IDotNetParameter The definition of a parameter used in .Net. IDotNetParameterDefaultValue Model that represents a default value for a IDotNetParameter model. IDotNetProperty Model definition of a property in .net. IDotNetSource The source point in which dot net models are loaded. IDotNetStructure Model definition for a structure in .net. IDotNetTupleTypeParameter Data model that tracks an individual part of a tuple definition. IDotNetType Model that defines a .net type. ILookup Defines lookup information for a model that supports being searched for. IParent Defines information how to find the parent model for the model that implements this dot net model. IT4Factory Definition of data that will be provided to all T4 factories. Enums AttributeParameterKind Enumeration that determines the type of attribute parameter data that is being returned. DotNetContainerType Enumeration that determines the type of dot net container. DotNetMemberType The type of dot net member. DotNetMethodType Enumeration of the type of methods that are supported in .Net DotNetModelType The models types that implemented at the dot net level and not at a target language level. DotNetSecurity Enumeration of the security scope the target .net model is set to. Language The target .net language for code factory. MemberComparisonType Enumeration of the types of member comparison ParameterDefaultValueType WellKnownLanguageType Enumeration that identifies well know types used by various .net languages."
  },
  "api/CodeFactory.DotNet.IDocumentation.html": {
    "href": "api/CodeFactory.DotNet.IDocumentation.html",
    "title": "Interface IDocumentation | CodeFactory Guidance",
    "keywords": "Interface IDocumentation Interface that determines if a model has code level documentation. Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IDocumentation Properties | Improve this Doc View Source Documentation Documentation that has been assigned to this model. Declaration string Documentation { get; } Property Value Type Description String | Improve this Doc View Source HasDocumentation Flag that determines if the model has code level documentation assigned to it. Declaration bool HasDocumentation { get; } Property Value Type Description Boolean"
  },
  "api/CodeFactory.DotNet.IDotNetAttribute.html": {
    "href": "api/CodeFactory.DotNet.IDotNetAttribute.html",
    "title": "Interface IDotNetAttribute | CodeFactory Guidance",
    "keywords": "Interface IDotNetAttribute Model definition for an attribute in a .net implementation. Inherited Members IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.ModelType IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() IParent.Parent ISourceFiles.SourceFiles Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IDotNetAttribute : IDotNetModel, IModelStatus, IParent, ISourceFiles Properties | Improve this Doc View Source HasParameters Flag that determines if the attribute has parameters Declaration bool HasParameters { get; } Property Value Type Description Boolean | Improve this Doc View Source Parameters Enumeration of the parameters that are assigned to the attribute. This will be an empty list if HasParameters is false. Declaration IReadOnlyList<IDotNetAttributeParameter> Parameters { get; } Property Value Type Description IReadOnlyList < IDotNetAttributeParameter > | Improve this Doc View Source Type The type information for the attribute itself. Declaration IDotNetType Type { get; } Property Value Type Description IDotNetType Extension Methods DotNetModelExtensions.FormatCSharpAttributeSignatureSyntax(IDotNetAttribute)"
  },
  "api/CodeFactory.DotNet.IDotNetAttributeParameter.html": {
    "href": "api/CodeFactory.DotNet.IDotNetAttributeParameter.html",
    "title": "Interface IDotNetAttributeParameter | CodeFactory Guidance",
    "keywords": "Interface IDotNetAttributeParameter The model information for a attribute used for a .net implementation. Inherited Members IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.ModelType IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IDotNetAttributeParameter : IDotNetModel, IModelStatus Properties | Improve this Doc View Source HasNamedParameter Flag that determines if the attribute parameter is a named value, or just part of the attributes constructor. Declaration bool HasNamedParameter { get; } Property Value Type Description Boolean | Improve this Doc View Source Name The name of the parameter, if this is not a named parameter then it will be set to null Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source Value The value that was assigned to the parameter. Declaration IDotNetAttributeParameterValue Value { get; } Property Value Type Description IDotNetAttributeParameterValue"
  },
  "api/CodeFactory.DotNet.IDotNetAttributeParameterValue.html": {
    "href": "api/CodeFactory.DotNet.IDotNetAttributeParameterValue.html",
    "title": "Interface IDotNetAttributeParameterValue | CodeFactory Guidance",
    "keywords": "Interface IDotNetAttributeParameterValue The model information for an attributes parameter value for .net implementation. Inherited Members IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.ModelType IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IDotNetAttributeParameterValue : IDotNetModel, IModelStatus Properties | Improve this Doc View Source EnumValue The enum value provides the name of the enumeration value that was provided. This will be populated if the property ParameterKind is set to 'Enum' Declaration string EnumValue { get; } Property Value Type Description String | Improve this Doc View Source ParameterKind Determines the kind of parameter that has been returned. Declaration AttributeParameterKind ParameterKind { get; } Property Value Type Description AttributeParameterKind | Improve this Doc View Source TypeValue The type definition of the parameter that was passed. This will be populated if the property ParameterKind is set to 'Type' Declaration IDotNetType TypeValue { get; } Property Value Type Description IDotNetType | Improve this Doc View Source Value Gets the raw value assigned to the parameter. This will be populated if the property ParameterKind is not set to 'Array' Declaration string Value { get; } Property Value Type Description String | Improve this Doc View Source Values Gets an enumeration of all the parameter values that were assigned to the attribute parameter. This will be populated if the property ParameterKind is set to 'Array' Declaration IReadOnlyList<IDotNetAttributeParameterValue> Values { get; } Property Value Type Description IReadOnlyList < IDotNetAttributeParameterValue > Extension Methods DotNetModelExtensions.FormatCSharpAttributeParameterValueSignatureSyntax(IDotNetAttributeParameterValue)"
  },
  "api/CodeFactory.DotNet.IDotNetAttributes.html": {
    "href": "api/CodeFactory.DotNet.IDotNetAttributes.html",
    "title": "Interface IDotNetAttributes | CodeFactory Guidance",
    "keywords": "Interface IDotNetAttributes Interface that determines if a .net model has attributes assigned. Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IDotNetAttributes Properties | Improve this Doc View Source Attributes The attributes assigned to this item. If the HasAttributes is false this will be an empty list. Declaration IReadOnlyList<IDotNetAttribute> Attributes { get; } Property Value Type Description IReadOnlyList < IDotNetAttribute > | Improve this Doc View Source HasAttributes Flag that determines if attributes are assigned. Declaration bool HasAttributes { get; } Property Value Type Description Boolean"
  },
  "api/CodeFactory.DotNet.IDotNetClass.html": {
    "href": "api/CodeFactory.DotNet.IDotNetClass.html",
    "title": "Interface IDotNetClass | CodeFactory Guidance",
    "keywords": "Interface IDotNetClass Model definition for a class in .net. Inherited Members IDotNetContainer.ContainerType IDotNetContainer.Name IDotNetContainer.Namespace IDotNetContainer.Security IDotNetContainer.InheritedInterfaces IDotNetContainer.Members IDotNetContainer.Methods IDotNetContainer.Properties IDotNetContainer.Events IDotNetContainer.GetBodySyntaxAsync() IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.ModelType IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles IDotNetAttributes.HasAttributes IDotNetAttributes.Attributes IDocumentation.HasDocumentation IDocumentation.Documentation IDotNetGeneric.IsGeneric IDotNetGeneric.GenericParameters IDotNetGeneric.HasStrongTypesInGenerics IDotNetGeneric.GenericTypes IParent.Parent ILookup.LookupPath Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IDotNetClass : IDotNetContainer, IDotNetModel, IModelStatus, ISourceFiles, IDotNetAttributes, IDocumentation, IDotNetGeneric, IParent, ILookup Properties | Improve this Doc View Source BaseClass The base class assigned to this class. This will be null if HasBase is false. Declaration IDotNetClass BaseClass { get; } Property Value Type Description IDotNetClass | Improve this Doc View Source Constructors List of the constructors implemented in this class. Declaration IReadOnlyList<IDotNetMethod> Constructors { get; } Property Value Type Description IReadOnlyList < IDotNetMethod > | Improve this Doc View Source Destructor The destructor implemented in this class. Declaration IDotNetMethod Destructor { get; } Property Value Type Description IDotNetMethod | Improve this Doc View Source Fields List of the fields implemented in this class. Declaration IReadOnlyList<IDotNetField> Fields { get; } Property Value Type Description IReadOnlyList < IDotNetField > | Improve this Doc View Source IsAbstract Flat that determines if this is an abstract class. Declaration bool IsAbstract { get; } Property Value Type Description Boolean | Improve this Doc View Source IsSealed Flag that determines if this class has been sealed. Declaration bool IsSealed { get; } Property Value Type Description Boolean | Improve this Doc View Source IsStatic Flag that determines if this class is static. Declaration bool IsStatic { get; } Property Value Type Description Boolean Extension Methods DotNetContainerExtensions.FormatCSharpComparisonMembers(IDotNetContainer, MemberComparisonType) DotNetContainerExtensions.MissingInterfaceMembers(IDotNetClass)"
  },
  "api/CodeFactory.DotNet.IDotNetContainer.html": {
    "href": "api/CodeFactory.DotNet.IDotNetContainer.html",
    "title": "Interface IDotNetContainer | CodeFactory Guidance",
    "keywords": "Interface IDotNetContainer The base implementation all container type models must implement in .net. Inherited Members IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.ModelType IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles IDotNetAttributes.HasAttributes IDotNetAttributes.Attributes IDocumentation.HasDocumentation IDocumentation.Documentation IDotNetGeneric.IsGeneric IDotNetGeneric.GenericParameters IDotNetGeneric.HasStrongTypesInGenerics IDotNetGeneric.GenericTypes IParent.Parent ILookup.LookupPath Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IDotNetContainer : IDotNetModel, IModelStatus, ISourceFiles, IDotNetAttributes, IDocumentation, IDotNetGeneric, IParent, ILookup Properties | Improve this Doc View Source ContainerType The type of container model that has been implemented. Declaration DotNetContainerType ContainerType { get; } Property Value Type Description DotNetContainerType | Improve this Doc View Source Events Enumeration of the events assigned to this container. If HasEvents is false this will be null. Declaration IReadOnlyList<IDotNetEvent> Events { get; } Property Value Type Description IReadOnlyList < IDotNetEvent > | Improve this Doc View Source InheritedInterfaces List of the interfaces that are inherited by this container. Declaration IReadOnlyList<IDotNetInterface> InheritedInterfaces { get; } Property Value Type Description IReadOnlyList < IDotNetInterface > | Improve this Doc View Source Members List of the members that are implemented in this container. Declaration IReadOnlyList<IDotNetMember> Members { get; } Property Value Type Description IReadOnlyList < IDotNetMember > | Improve this Doc View Source Methods List of the methods that are implemented in this container. Declaration IReadOnlyList<IDotNetMethod> Methods { get; } Property Value Type Description IReadOnlyList < IDotNetMethod > | Improve this Doc View Source Name The name of the container. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source Namespace The namespace the container objects belongs to. Declaration string Namespace { get; } Property Value Type Description String | Improve this Doc View Source Properties List of the properties that are implemented in this container. Declaration IReadOnlyList<IDotNetProperty> Properties { get; } Property Value Type Description IReadOnlyList < IDotNetProperty > | Improve this Doc View Source Security The security scope assigned to the container. Declaration DotNetSecurity Security { get; } Property Value Type Description DotNetSecurity Methods | Improve this Doc View Source GetBodySyntaxAsync() The source code syntax that is stored in the body of the container model. This will be null if the container was not loaded from source code. Declaration Task<string> GetBodySyntaxAsync() Returns Type Description Task < String > Extension Methods DotNetContainerExtensions.FormatCSharpComparisonMembers(IDotNetContainer, MemberComparisonType)"
  },
  "api/CodeFactory.DotNet.IDotNetDelegate.html": {
    "href": "api/CodeFactory.DotNet.IDotNetDelegate.html",
    "title": "Interface IDotNetDelegate | CodeFactory Guidance",
    "keywords": "Interface IDotNetDelegate Model definition of a delegate in .net. Inherited Members IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.ModelType IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() IDotNetAttributes.HasAttributes IDotNetAttributes.Attributes IDotNetGeneric.IsGeneric IDotNetGeneric.GenericParameters IDotNetGeneric.HasStrongTypesInGenerics IDotNetGeneric.GenericTypes IDocumentation.HasDocumentation IDocumentation.Documentation IParent.Parent ILookup.LookupPath ISourceFiles.SourceFiles Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IDotNetDelegate : IDotNetModel, IModelStatus, IDotNetAttributes, IDotNetGeneric, IDocumentation, IParent, ILookup, ISourceFiles Properties | Improve this Doc View Source BeginInvokeMethod The begin invoke method definition for this delegate. Declaration IDotNetMethod BeginInvokeMethod { get; } Property Value Type Description IDotNetMethod | Improve this Doc View Source EndInvokeMethod The end invoke method definition for this delegate. Declaration IDotNetMethod EndInvokeMethod { get; } Property Value Type Description IDotNetMethod | Improve this Doc View Source HasParameters Flag that determines if the method has parameters assigned to it. Declaration bool HasParameters { get; } Property Value Type Description Boolean | Improve this Doc View Source InvokeMethod The invoke method definition for this delegate. Declaration IDotNetMethod InvokeMethod { get; } Property Value Type Description IDotNetMethod | Improve this Doc View Source IsVoid Flag that determines if the delegate return is a void. Declaration bool IsVoid { get; } Property Value Type Description Boolean | Improve this Doc View Source Name The name assigned to the this item. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source Namespace The namespace the delegate is assigned to. Declaration string Namespace { get; } Property Value Type Description String | Improve this Doc View Source Parameters List of the parameters that have been assigned to the delegate. If HasParameters property is set to false this will be an empty list. Declaration IReadOnlyList<IDotNetParameter> Parameters { get; } Property Value Type Description IReadOnlyList < IDotNetParameter > | Improve this Doc View Source ReturnType The type information about the return type assigned to the method. Declaration IDotNetType ReturnType { get; } Property Value Type Description IDotNetType | Improve this Doc View Source Security The security scope that has been assigned to this item. Declaration DotNetSecurity Security { get; } Property Value Type Description DotNetSecurity"
  },
  "api/CodeFactory.DotNet.IDotNetEnum.html": {
    "href": "api/CodeFactory.DotNet.IDotNetEnum.html",
    "title": "Interface IDotNetEnum | CodeFactory Guidance",
    "keywords": "Interface IDotNetEnum Data model that provides information on an enumeration. Inherited Members IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.ModelType IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() IDotNetAttributes.HasAttributes IDotNetAttributes.Attributes IDocumentation.HasDocumentation IDocumentation.Documentation IParent.Parent ILookup.LookupPath ISourceFiles.SourceFiles Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IDotNetEnum : IDotNetModel, IModelStatus, IDotNetAttributes, IDocumentation, IParent, ILookup, ISourceFiles Properties | Improve this Doc View Source Name The name of the enumeration. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source Namespace The namespace the enumeration belongs to. Declaration string Namespace { get; } Property Value Type Description String | Improve this Doc View Source Security The security scope assigned to the enumeration. Declaration DotNetSecurity Security { get; } Property Value Type Description DotNetSecurity | Improve this Doc View Source Values List of the enumeration values implemented in this enumeration. Declaration IReadOnlyList<IDotNetEnumValue> Values { get; } Property Value Type Description IReadOnlyList < IDotNetEnumValue > Extension Methods DotNetModelExtensions.FormatCSharpEnumTypeSyntax(IDotNetEnum, String) DotNetModelExtensions.FormatCSharpEnumValueSyntax(IDotNetEnum, String)"
  },
  "api/CodeFactory.DotNet.IDotNetEnumValue.html": {
    "href": "api/CodeFactory.DotNet.IDotNetEnumValue.html",
    "title": "Interface IDotNetEnumValue | CodeFactory Guidance",
    "keywords": "Interface IDotNetEnumValue Data model that provides information to a specific enumeration value implemented in an enumeration. Inherited Members IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.ModelType IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() IDotNetAttributes.HasAttributes IDotNetAttributes.Attributes IDocumentation.HasDocumentation IDocumentation.Documentation IParent.Parent ILookup.LookupPath ISourceFiles.SourceFiles Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IDotNetEnumValue : IDotNetModel, IModelStatus, IDotNetAttributes, IDocumentation, IParent, ILookup, ISourceFiles Properties | Improve this Doc View Source Name The name of the enumeration value. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source Security The security scope assigned to the enumeration value. Declaration DotNetSecurity Security { get; } Property Value Type Description DotNetSecurity | Improve this Doc View Source Value The value that has been assigned to the enumeration value. Declaration string Value { get; } Property Value Type Description String"
  },
  "api/CodeFactory.DotNet.IDotNetEvent.html": {
    "href": "api/CodeFactory.DotNet.IDotNetEvent.html",
    "title": "Interface IDotNetEvent | CodeFactory Guidance",
    "keywords": "Interface IDotNetEvent Model definition of a event in .net. Inherited Members IDotNetMember.Name IDotNetMember.Security IDotNetMember.MemberType IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.ModelType IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles IDotNetAttributes.HasAttributes IDotNetAttributes.Attributes IDocumentation.HasDocumentation IDocumentation.Documentation IParent.Parent ILookup.LookupPath Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IDotNetEvent : IDotNetMember, IDotNetModel, IModelStatus, ISourceFiles, IDotNetAttributes, IDocumentation, IParent, ILookup Properties | Improve this Doc View Source AddMethod The method that adds a subscription to the event. Declaration IDotNetMethod AddMethod { get; } Property Value Type Description IDotNetMethod | Improve this Doc View Source EventHandlerDelegate The event handler delegate used by the event. Declaration IDotNetDelegate EventHandlerDelegate { get; } Property Value Type Description IDotNetDelegate | Improve this Doc View Source EventType The event handler type that is assigned to the event. Declaration IDotNetType EventType { get; } Property Value Type Description IDotNetType | Improve this Doc View Source IsAbstract Flag that determines if the event has been implemented as an abstract event. Declaration bool IsAbstract { get; } Property Value Type Description Boolean | Improve this Doc View Source IsOverride Flag that determines if the event has been overridden. Declaration bool IsOverride { get; } Property Value Type Description Boolean | Improve this Doc View Source IsSealed Flag that determines if the event has been sealed. Declaration bool IsSealed { get; } Property Value Type Description Boolean | Improve this Doc View Source IsStatic Flag that determines if the event is static. Declaration bool IsStatic { get; } Property Value Type Description Boolean | Improve this Doc View Source IsVirtual Flag that determines if the event is implemented as virtual. Declaration bool IsVirtual { get; } Property Value Type Description Boolean | Improve this Doc View Source RaiseMethod The method definition to raise the event. Declaration IDotNetMethod RaiseMethod { get; } Property Value Type Description IDotNetMethod | Improve this Doc View Source RemoveMethod The method that removes a subscription to the event. Declaration IDotNetMethod RemoveMethod { get; } Property Value Type Description IDotNetMethod Extension Methods DotNetMemberExtensions.FormatCSharpMemberComparisonHashCode(IDotNetMember, MemberComparisonType) DotNetMemberExtensions.FormatCSharpDeclarationSyntax(IDotNetEvent, Boolean, Boolean, Boolean, Boolean) DotNetMemberExtensions.FormatCSharpComparisonHashCode(IDotNetEvent, Boolean, Boolean, Boolean)"
  },
  "api/CodeFactory.DotNet.IDotNetField.html": {
    "href": "api/CodeFactory.DotNet.IDotNetField.html",
    "title": "Interface IDotNetField | CodeFactory Guidance",
    "keywords": "Interface IDotNetField Model definition of a field in .net. Inherited Members IDotNetMember.Name IDotNetMember.Security IDotNetMember.MemberType IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.ModelType IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles IDotNetAttributes.HasAttributes IDotNetAttributes.Attributes IDocumentation.HasDocumentation IDocumentation.Documentation IParent.Parent ILookup.LookupPath Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IDotNetField : IDotNetMember, IDotNetModel, IModelStatus, ISourceFiles, IDotNetAttributes, IDocumentation, IParent, ILookup Properties | Improve this Doc View Source ConstantValue The value that was assigned to the constant. Will return as the string representation of the value. Declaration string ConstantValue { get; } Property Value Type Description String | Improve this Doc View Source DataType The data type assigned to the field. Declaration IDotNetType DataType { get; } Property Value Type Description IDotNetType | Improve this Doc View Source IsConstant Flag that determines if the field is a constant. Declaration bool IsConstant { get; } Property Value Type Description Boolean | Improve this Doc View Source IsReadOnly Flag that determines if this field is set to readonly. Declaration bool IsReadOnly { get; } Property Value Type Description Boolean | Improve this Doc View Source IsStatic Flag that determines if the field is set to be static. Declaration bool IsStatic { get; } Property Value Type Description Boolean Extension Methods DotNetMemberExtensions.FormatCSharpMemberComparisonHashCode(IDotNetMember, MemberComparisonType) DotNetMemberExtensions.FormatCSharpDeclarationSyntax(IDotNetField, Boolean, Boolean, Boolean) DotNetMemberExtensions.FormatCSharpComparisonHashCode(IDotNetField, Boolean, Boolean, Boolean)"
  },
  "api/CodeFactory.DotNet.IDotNetGeneric.html": {
    "href": "api/CodeFactory.DotNet.IDotNetGeneric.html",
    "title": "Interface IDotNetGeneric | CodeFactory Guidance",
    "keywords": "Interface IDotNetGeneric Definition that determines if the .net model implements generics. Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IDotNetGeneric Properties | Improve this Doc View Source GenericParameters List of the generic parameters assigned. Declaration IReadOnlyList<IDotNetGenericParameter> GenericParameters { get; } Property Value Type Description IReadOnlyList < IDotNetGenericParameter > | Improve this Doc View Source GenericTypes Enumeration of the strong types that are implemented for each generic parameter. This will be an empty list when there is no generic types implemented. Declaration IReadOnlyList<IDotNetType> GenericTypes { get; } Property Value Type Description IReadOnlyList < IDotNetType > | Improve this Doc View Source HasStrongTypesInGenerics Flag that determines if the generics implementation has strong types passed in to the generics implementation. Declaration bool HasStrongTypesInGenerics { get; } Property Value Type Description Boolean | Improve this Doc View Source IsGeneric Flag the determines if this item supports generics Declaration bool IsGeneric { get; } Property Value Type Description Boolean"
  },
  "api/CodeFactory.DotNet.IDotNetGenericParameter.html": {
    "href": "api/CodeFactory.DotNet.IDotNetGenericParameter.html",
    "title": "Interface IDotNetGenericParameter | CodeFactory Guidance",
    "keywords": "Interface IDotNetGenericParameter Model contract for information about a parameter used in a generic definition. Inherited Members IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.ModelType IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IDotNetGenericParameter : IDotNetModel, IModelStatus Properties | Improve this Doc View Source ConstrainingTypes The constraining types the generic parameter must ad hear to. If there are no constraining types an empty list will be returned. Declaration IReadOnlyList<IDotNetType> ConstrainingTypes { get; } Property Value Type Description IReadOnlyList < IDotNetType > | Improve this Doc View Source HasClassConstraint Flag that determines if the generic parameter has a constraint that it must implement from a class. Declaration bool HasClassConstraint { get; } Property Value Type Description Boolean | Improve this Doc View Source HasConstraintTypes Flag that determines if the generic parameter has constraining types the parameter must ad hear to. Declaration bool HasConstraintTypes { get; } Property Value Type Description Boolean | Improve this Doc View Source HasNewConstraint Flag that determines if the generic parameter has a constraint that is must support construction of a new type. Declaration bool HasNewConstraint { get; } Property Value Type Description Boolean | Improve this Doc View Source HasOutKeyword Flag that determines if the generic parameter uses the out keyword. Declaration bool HasOutKeyword { get; } Property Value Type Description Boolean | Improve this Doc View Source HasStructConstraint Flag that determines if the generic parameter has a constraint that is must implement from a structure. Declaration bool HasStructConstraint { get; } Property Value Type Description Boolean | Improve this Doc View Source Type The type definition of the generic parameter. Declaration IDotNetType Type { get; } Property Value Type Description IDotNetType Extension Methods DotNetModelExtensions.FormatCSharpGenericWhereClauseSyntax(IDotNetGenericParameter)"
  },
  "api/CodeFactory.DotNet.IDotNetInterface.html": {
    "href": "api/CodeFactory.DotNet.IDotNetInterface.html",
    "title": "Interface IDotNetInterface | CodeFactory Guidance",
    "keywords": "Interface IDotNetInterface Mode definition for an interface in .net. Inherited Members IDotNetContainer.ContainerType IDotNetContainer.Name IDotNetContainer.Namespace IDotNetContainer.Security IDotNetContainer.InheritedInterfaces IDotNetContainer.Members IDotNetContainer.Methods IDotNetContainer.Properties IDotNetContainer.Events IDotNetContainer.GetBodySyntaxAsync() IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.ModelType IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles IDotNetAttributes.HasAttributes IDotNetAttributes.Attributes IDocumentation.HasDocumentation IDocumentation.Documentation IDotNetGeneric.IsGeneric IDotNetGeneric.GenericParameters IDotNetGeneric.HasStrongTypesInGenerics IDotNetGeneric.GenericTypes IParent.Parent ILookup.LookupPath Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IDotNetInterface : IDotNetContainer, IDotNetModel, IModelStatus, ISourceFiles, IDotNetAttributes, IDocumentation, IDotNetGeneric, IParent, ILookup Extension Methods DotNetContainerExtensions.FormatCSharpComparisonMembers(IDotNetContainer, MemberComparisonType)"
  },
  "api/CodeFactory.DotNet.IDotNetMember.html": {
    "href": "api/CodeFactory.DotNet.IDotNetMember.html",
    "title": "Interface IDotNetMember | CodeFactory Guidance",
    "keywords": "Interface IDotNetMember Base definition for all .net member models. Inherited Members IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.ModelType IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles IDotNetAttributes.HasAttributes IDotNetAttributes.Attributes IDocumentation.HasDocumentation IDocumentation.Documentation IParent.Parent ILookup.LookupPath Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IDotNetMember : IDotNetModel, IModelStatus, ISourceFiles, IDotNetAttributes, IDocumentation, IParent, ILookup Properties | Improve this Doc View Source MemberType The type of member the model is. Declaration DotNetMemberType MemberType { get; } Property Value Type Description DotNetMemberType | Improve this Doc View Source Name The name assigned to the member. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source Security The security scope that has been assigned to the member. Declaration DotNetSecurity Security { get; } Property Value Type Description DotNetSecurity Extension Methods DotNetMemberExtensions.FormatCSharpMemberComparisonHashCode(IDotNetMember, MemberComparisonType)"
  },
  "api/CodeFactory.DotNet.IDotNetMethod.html": {
    "href": "api/CodeFactory.DotNet.IDotNetMethod.html",
    "title": "Interface IDotNetMethod | CodeFactory Guidance",
    "keywords": "Interface IDotNetMethod Model definition of a method in .net. Inherited Members IDotNetMember.Name IDotNetMember.Security IDotNetMember.MemberType IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.ModelType IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles IDotNetAttributes.HasAttributes IDotNetAttributes.Attributes IDocumentation.HasDocumentation IDocumentation.Documentation IParent.Parent ILookup.LookupPath IDotNetGeneric.IsGeneric IDotNetGeneric.GenericParameters IDotNetGeneric.HasStrongTypesInGenerics IDotNetGeneric.GenericTypes Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IDotNetMethod : IDotNetMember, IDotNetModel, IModelStatus, ISourceFiles, IDotNetAttributes, IDocumentation, IParent, ILookup, IDotNetGeneric Properties | Improve this Doc View Source HasParameters Flag that determines if the method has parameters assigned to it. Declaration bool HasParameters { get; } Property Value Type Description Boolean | Improve this Doc View Source IsAbstract Flag that determines if the method has been implemented as abstract. Declaration bool IsAbstract { get; } Property Value Type Description Boolean | Improve this Doc View Source IsAsync Flag that determines if the method implements the Async keyword. Declaration bool IsAsync { get; } Property Value Type Description Boolean | Improve this Doc View Source IsExtension Flag that determines if the method is an extension method. Declaration bool IsExtension { get; } Property Value Type Description Boolean | Improve this Doc View Source IsOverride Flag that determines if the method has been overridden. Declaration bool IsOverride { get; } Property Value Type Description Boolean | Improve this Doc View Source IsSealed Flag that determines if the method has been sealed. Declaration bool IsSealed { get; } Property Value Type Description Boolean | Improve this Doc View Source IsStatic Flag that determines if this is a static method. Declaration bool IsStatic { get; } Property Value Type Description Boolean | Improve this Doc View Source IsVirtual Flag that determines if the method has been implemented as virtual. Declaration bool IsVirtual { get; } Property Value Type Description Boolean | Improve this Doc View Source IsVoid Flag that determines if the methods return type is void. Declaration bool IsVoid { get; } Property Value Type Description Boolean | Improve this Doc View Source MethodType Determines the type of method that was loaded into this model. Declaration DotNetMethodType MethodType { get; } Property Value Type Description DotNetMethodType | Improve this Doc View Source Parameters Enumeration of the parameters that have been assigned to the method. If HasParameters property is set to false this will be null. Declaration IReadOnlyList<IDotNetParameter> Parameters { get; } Property Value Type Description IReadOnlyList < IDotNetParameter > | Improve this Doc View Source ReturnType The type information about the return type assigned to the method. if flag IsVoid is true then the return type will be set to null. Declaration IDotNetType ReturnType { get; } Property Value Type Description IDotNetType Methods | Improve this Doc View Source GetBodySyntaxAsync() The source code syntax that is stored in the body of the method. This will be null if the method was not loaded from source code. Declaration Task<string> GetBodySyntaxAsync() Returns Type Description Task < String > Extension Methods DotNetMemberExtensions.FormatCSharpMemberComparisonHashCode(IDotNetMember, MemberComparisonType) DotNetMemberExtensions.FormatCSharpDeclarationSyntax(IDotNetMethod, Boolean, Boolean, Boolean, Boolean) DotNetMemberExtensions.FormatCSharpComparisonHashCode(IDotNetMethod, Boolean, Boolean, Boolean)"
  },
  "api/CodeFactory.DotNet.IDotNetModel.html": {
    "href": "api/CodeFactory.DotNet.IDotNetModel.html",
    "title": "Interface IDotNetModel | CodeFactory Guidance",
    "keywords": "Interface IDotNetModel Base implementation all dot net models must implement. Inherited Members IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IDotNetModel : IModelStatus Properties | Improve this Doc View Source Language The target language this model was loaded from. Declaration SourceCodeType Language { get; } Property Value Type Description SourceCodeType | Improve this Doc View Source LoadedFromSource Flag that determines if this model was loaded from source code or was loaded through reflects or symbol libraries. Declaration bool LoadedFromSource { get; } Property Value Type Description Boolean | Improve this Doc View Source ModelType The type of dot net model that was loaded. Declaration DotNetModelType ModelType { get; } Property Value Type Description DotNetModelType | Improve this Doc View Source SourceDocument The fully qualified path to the document that was used to load the model from source. This will be populated if the model was loaded from source. Declaration string SourceDocument { get; } Property Value Type Description String"
  },
  "api/CodeFactory.DotNet.IDotNetNamespace.html": {
    "href": "api/CodeFactory.DotNet.IDotNetNamespace.html",
    "title": "Interface IDotNetNamespace | CodeFactory Guidance",
    "keywords": "Interface IDotNetNamespace Model definition for a namespace definition inside a code file in .net. Inherited Members IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.ModelType IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() IParent.Parent ILookup.LookupPath ISourceFiles.SourceFiles Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IDotNetNamespace : IDotNetModel, IModelStatus, IParent, ILookup, ISourceFiles Properties | Improve this Doc View Source Name The name of the namespace. Declaration string Name { get; } Property Value Type Description String"
  },
  "api/CodeFactory.DotNet.IDotNetNamespaceReference.html": {
    "href": "api/CodeFactory.DotNet.IDotNetNamespaceReference.html",
    "title": "Interface IDotNetNamespaceReference | CodeFactory Guidance",
    "keywords": "Interface IDotNetNamespaceReference A namespace that is being referenced by dot net source code. This will determine which external library resources will be available in the source control document. Inherited Members IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.ModelType IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() IParent.Parent ILookup.LookupPath Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IDotNetNamespaceReference : IDotNetModel, IModelStatus, IParent, ILookup Properties | Improve this Doc View Source Alias The alias assigned to the namespace being imported. This will be null if the HasAlias is false. Declaration string Alias { get; } Property Value Type Description String | Improve this Doc View Source HasAlias Flag that determines if the namespace reference has an alias. Declaration bool HasAlias { get; } Property Value Type Description Boolean | Improve this Doc View Source ReferenceNamespace The target namespace that is being imported into the sources scope. Declaration string ReferenceNamespace { get; } Property Value Type Description String"
  },
  "api/CodeFactory.DotNet.IDotNetParameter.html": {
    "href": "api/CodeFactory.DotNet.IDotNetParameter.html",
    "title": "Interface IDotNetParameter | CodeFactory Guidance",
    "keywords": "Interface IDotNetParameter The definition of a parameter used in .Net. Inherited Members IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.ModelType IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() IDotNetAttributes.HasAttributes IDotNetAttributes.Attributes IParent.Parent ILookup.LookupPath Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IDotNetParameter : IDotNetModel, IModelStatus, IDotNetAttributes, IParent, ILookup Properties | Improve this Doc View Source DefaultValue The default value assigned to the parameter. This will be null if the HasDefaultValue property is set to false. Declaration IDotNetParameterDefaultValue DefaultValue { get; } Property Value Type Description IDotNetParameterDefaultValue | Improve this Doc View Source HasDefaultValue Flag that determines if the parameter has a default value. Declaration bool HasDefaultValue { get; } Property Value Type Description Boolean | Improve this Doc View Source IsGenericParameter Flag that determines if the parameter is a generic place holder. Declaration bool IsGenericParameter { get; } Property Value Type Description Boolean | Improve this Doc View Source IsOptional Flag that determines if the parameter is optional. Declaration bool IsOptional { get; } Property Value Type Description Boolean | Improve this Doc View Source IsOut Flag that determines if the parameter is assigned the out keyword. Declaration bool IsOut { get; } Property Value Type Description Boolean | Improve this Doc View Source IsParams Flag that determines if the parameter is an parameter array. Declaration bool IsParams { get; } Property Value Type Description Boolean | Improve this Doc View Source IsRef Flag that determines if the parameter is assigned the ref keyword. Declaration bool IsRef { get; } Property Value Type Description Boolean | Improve this Doc View Source Name The name of the parameter. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source ParameterType The data type assigned to the parameter. Declaration IDotNetType ParameterType { get; } Property Value Type Description IDotNetType"
  },
  "api/CodeFactory.DotNet.IDotNetParameterDefaultValue.html": {
    "href": "api/CodeFactory.DotNet.IDotNetParameterDefaultValue.html",
    "title": "Interface IDotNetParameterDefaultValue | CodeFactory Guidance",
    "keywords": "Interface IDotNetParameterDefaultValue Model that represents a default value for a IDotNetParameter model. Inherited Members IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.ModelType IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() IParent.Parent ILookup.LookupPath Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IDotNetParameterDefaultValue : IDotNetModel, IModelStatus, IParent, ILookup Properties | Improve this Doc View Source Value If the default value is a literal value the value will be set, otherwise it will be set to null. Declaration string Value { get; } Property Value Type Description String | Improve this Doc View Source ValueType The type of default value assigned to the parameter. Declaration ParameterDefaultValueType ValueType { get; } Property Value Type Description ParameterDefaultValueType Extension Methods DotNetModelExtensions.FormatCSharpParameterDefaultValueSyntax(IDotNetParameterDefaultValue, IDotNetType)"
  },
  "api/CodeFactory.DotNet.IDotNetProperty.html": {
    "href": "api/CodeFactory.DotNet.IDotNetProperty.html",
    "title": "Interface IDotNetProperty | CodeFactory Guidance",
    "keywords": "Interface IDotNetProperty Model definition of a property in .net. Inherited Members IDotNetMember.Name IDotNetMember.Security IDotNetMember.MemberType IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.ModelType IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles IDotNetAttributes.HasAttributes IDotNetAttributes.Attributes IDocumentation.HasDocumentation IDocumentation.Documentation IParent.Parent ILookup.LookupPath Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IDotNetProperty : IDotNetMember, IDotNetModel, IModelStatus, ISourceFiles, IDotNetAttributes, IDocumentation, IParent, ILookup Properties | Improve this Doc View Source GetSecurity The security scope that is assigned to the get accessor. Make sure you check the HasGet to determine if the property supports get operations. Declaration DotNetSecurity GetSecurity { get; } Property Value Type Description DotNetSecurity | Improve this Doc View Source HasGet Flag that determines if this property supports get access. Declaration bool HasGet { get; } Property Value Type Description Boolean | Improve this Doc View Source HasSet Flag that determines if this property supports set access. Declaration bool HasSet { get; } Property Value Type Description Boolean | Improve this Doc View Source IsAbstract Flag that determines if the property is implemented as an abstract property. Declaration bool IsAbstract { get; } Property Value Type Description Boolean | Improve this Doc View Source IsOverride Flag that determines if the property has been overridden. Declaration bool IsOverride { get; } Property Value Type Description Boolean | Improve this Doc View Source IsSealed Flag that determines if the property has been sealed. Declaration bool IsSealed { get; } Property Value Type Description Boolean | Improve this Doc View Source IsStatic Flag that determines if the property has been implemented as static. Declaration bool IsStatic { get; } Property Value Type Description Boolean | Improve this Doc View Source IsVirtual Flag that determines if the property is implemented as virtual. Declaration bool IsVirtual { get; } Property Value Type Description Boolean | Improve this Doc View Source PropertyType The source data type that is managed by this property. Declaration IDotNetType PropertyType { get; } Property Value Type Description IDotNetType | Improve this Doc View Source SetSecurity The security scope that is assigned to the set accessor. Make sure you check the HasSet to determine if the property supports set operations. Declaration DotNetSecurity SetSecurity { get; } Property Value Type Description DotNetSecurity Methods | Improve this Doc View Source LoadGetBodySyntaxAsync() The source code syntax that is stored in the body of the property get. This will be null if was not loaded from source code. Declaration Task<string> LoadGetBodySyntaxAsync() Returns Type Description Task < String > | Improve this Doc View Source LoadSetBodySyntaxAsync() The source code syntax that is stored in the body of the property get. This will be null if was not loaded from source code. Declaration Task<string> LoadSetBodySyntaxAsync() Returns Type Description Task < String > Extension Methods DotNetMemberExtensions.FormatCSharpMemberComparisonHashCode(IDotNetMember, MemberComparisonType) DotNetMemberExtensions.FormatCSharpDeclarationSyntax(IDotNetProperty, Boolean, Boolean, Boolean, Boolean) DotNetMemberExtensions.FormatCSharpComparisonHashCode(IDotNetProperty, Boolean, Boolean, Boolean)"
  },
  "api/CodeFactory.DotNet.IDotNetSource.html": {
    "href": "api/CodeFactory.DotNet.IDotNetSource.html",
    "title": "Interface IDotNetSource | CodeFactory Guidance",
    "keywords": "Interface IDotNetSource The source point in which dot net models are loaded. Inherited Members IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.ModelType IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() IParent.Parent ILookup.LookupPath Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IDotNetSource : IDotNetModel, IModelStatus, IParent, ILookup Properties | Improve this Doc View Source Classes The classes that were defined in the source. Declaration IReadOnlyList<IDotNetClass> Classes { get; } Property Value Type Description IReadOnlyList < IDotNetClass > | Improve this Doc View Source Delegates The delegates that were defined in the source. Declaration IReadOnlyList<IDotNetDelegate> Delegates { get; } Property Value Type Description IReadOnlyList < IDotNetDelegate > | Improve this Doc View Source Enums The enumerations that were defined in the source. Declaration IReadOnlyList<IDotNetEnum> Enums { get; } Property Value Type Description IReadOnlyList < IDotNetEnum > | Improve this Doc View Source Interfaces The interfaces that were defined in the source. Declaration IReadOnlyList<IDotNetInterface> Interfaces { get; } Property Value Type Description IReadOnlyList < IDotNetInterface > | Improve this Doc View Source NamespaceReferences The namespaces that are used as references to access other libraries not hosted in the source document. Declaration IReadOnlyList<IDotNetNamespaceReference> NamespaceReferences { get; } Property Value Type Description IReadOnlyList < IDotNetNamespaceReference > | Improve this Doc View Source Namespaces The namespaces that were defined in the source. Declaration IReadOnlyList<IDotNetNamespace> Namespaces { get; } Property Value Type Description IReadOnlyList < IDotNetNamespace > | Improve this Doc View Source Structures The structures that were defined in the source. Declaration IReadOnlyList<IDotNetStructure> Structures { get; } Property Value Type Description IReadOnlyList < IDotNetStructure >"
  },
  "api/CodeFactory.DotNet.IDotNetStructure.html": {
    "href": "api/CodeFactory.DotNet.IDotNetStructure.html",
    "title": "Interface IDotNetStructure | CodeFactory Guidance",
    "keywords": "Interface IDotNetStructure Model definition for a structure in .net. Inherited Members IDotNetContainer.ContainerType IDotNetContainer.Name IDotNetContainer.Namespace IDotNetContainer.Security IDotNetContainer.InheritedInterfaces IDotNetContainer.Members IDotNetContainer.Methods IDotNetContainer.Properties IDotNetContainer.Events IDotNetContainer.GetBodySyntaxAsync() IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.ModelType IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() ISourceFiles.SourceFiles IDotNetAttributes.HasAttributes IDotNetAttributes.Attributes IDocumentation.HasDocumentation IDocumentation.Documentation IDotNetGeneric.IsGeneric IDotNetGeneric.GenericParameters IDotNetGeneric.HasStrongTypesInGenerics IDotNetGeneric.GenericTypes IParent.Parent ILookup.LookupPath Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IDotNetStructure : IDotNetContainer, IDotNetModel, IModelStatus, ISourceFiles, IDotNetAttributes, IDocumentation, IDotNetGeneric, IParent, ILookup Properties | Improve this Doc View Source Constructors List of the constructors for this structure. Declaration IReadOnlyList<IDotNetMethod> Constructors { get; } Property Value Type Description IReadOnlyList < IDotNetMethod > | Improve this Doc View Source Fields List of the fields for this structure. Declaration IReadOnlyList<IDotNetField> Fields { get; } Property Value Type Description IReadOnlyList < IDotNetField > Extension Methods DotNetContainerExtensions.FormatCSharpComparisonMembers(IDotNetContainer, MemberComparisonType) DotNetContainerExtensions.MissingInterfaceMembers(IDotNetStructure)"
  },
  "api/CodeFactory.DotNet.IDotNetTupleTypeParameter.html": {
    "href": "api/CodeFactory.DotNet.IDotNetTupleTypeParameter.html",
    "title": "Interface IDotNetTupleTypeParameter | CodeFactory Guidance",
    "keywords": "Interface IDotNetTupleTypeParameter Data model that tracks an individual part of a tuple definition. Inherited Members IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.ModelType IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IDotNetTupleTypeParameter : IDotNetModel, IModelStatus Properties | Improve this Doc View Source HasDefaultName Flag that determines if the named assigned to the tuple was system generated or defined in source. Declaration bool HasDefaultName { get; } Property Value Type Description Boolean | Improve this Doc View Source Name The name assigned to the tuple parameter. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source TupleType The model with the type definition assigned to the tuple. Declaration IDotNetType TupleType { get; } Property Value Type Description IDotNetType"
  },
  "api/CodeFactory.DotNet.IDotNetType.html": {
    "href": "api/CodeFactory.DotNet.IDotNetType.html",
    "title": "Interface IDotNetType | CodeFactory Guidance",
    "keywords": "Interface IDotNetType Model that defines a .net type. Inherited Members IDotNetModel.LoadedFromSource IDotNetModel.Language IDotNetModel.ModelType IDotNetModel.SourceDocument IModelStatus.IsLoaded IModelStatus.HasErrors IModelStatus.GetErrors() IDotNetGeneric.IsGeneric IDotNetGeneric.GenericParameters IDotNetGeneric.HasStrongTypesInGenerics IDotNetGeneric.GenericTypes Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IDotNetType : IDotNetModel, IModelStatus, IDotNetGeneric Properties | Improve this Doc View Source ArrayDimensions Gets a list of the dimensions that are assigned to the array. This will contain more then one value if the array is a jagged array. This will be empty if the type is not an array. Declaration IReadOnlyList<int> ArrayDimensions { get; } Property Value Type Description IReadOnlyList < Int32 > | Improve this Doc View Source IsArray Flag that determines if the type is an array of the target type. Declaration bool IsArray { get; } Property Value Type Description Boolean | Improve this Doc View Source IsClass Flag that determines if the type is a class. Declaration bool IsClass { get; } Property Value Type Description Boolean | Improve this Doc View Source IsDelegate Flag that determines if the type is a delegate. Declaration bool IsDelegate { get; } Property Value Type Description Boolean | Improve this Doc View Source IsEnum Flag that determines if the type is a enumeration. Declaration bool IsEnum { get; } Property Value Type Description Boolean | Improve this Doc View Source IsGenericPlaceHolder Flag that determines if the type is a generic place holder definition. Declaration bool IsGenericPlaceHolder { get; } Property Value Type Description Boolean | Improve this Doc View Source IsInterface Flag that determines if the type is an interface. Declaration bool IsInterface { get; } Property Value Type Description Boolean | Improve this Doc View Source IsStructure Flag that determines if the type is a structure. Declaration bool IsStructure { get; } Property Value Type Description Boolean | Improve this Doc View Source IsTuple Flag that determine if the type is a Tuple Declaration bool IsTuple { get; } Property Value Type Description Boolean | Improve this Doc View Source IsValueType Flag that determines if the type is a value type. Declaration bool IsValueType { get; } Property Value Type Description Boolean | Improve this Doc View Source IsWellKnownType Flag that determines if the type is one of the well know data types of the language. Declaration bool IsWellKnownType { get; } Property Value Type Description Boolean | Improve this Doc View Source Name The name of the type. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source Namespace The namespace the type belongs to. Declaration string Namespace { get; } Property Value Type Description String | Improve this Doc View Source SupportsDisposable Flag that determines if the type supports the interface IDisposable . Declaration bool SupportsDisposable { get; } Property Value Type Description Boolean | Improve this Doc View Source TupleTypes List of the types that are implemented in the Tuple. This will an empty list if the type is not a tuple. Declaration IReadOnlyList<IDotNetTupleTypeParameter> TupleTypes { get; } Property Value Type Description IReadOnlyList < IDotNetTupleTypeParameter > | Improve this Doc View Source ValueTypeDefaultValue The default value for well known value data types. This will be null if the value is not a well known value type. Declaration string ValueTypeDefaultValue { get; } Property Value Type Description String | Improve this Doc View Source WellKnownType Enumeration of the target well known type this type represents. Declaration WellKnownLanguageType WellKnownType { get; } Property Value Type Description WellKnownLanguageType Methods | Improve this Doc View Source GetClassModel() Loads the full IDotNetClass model from the type definition. Declaration IDotNetClass GetClassModel() Returns Type Description IDotNetClass Return the fully loaded model or an empty model if the type is not a class. | Improve this Doc View Source GetDelegateModel() Loads the full IDotNetDelegate model from the type definition. Declaration IDotNetDelegate GetDelegateModel() Returns Type Description IDotNetDelegate Return the fully loaded model or an empty model if the type is not a delegate. | Improve this Doc View Source GetEnumModel() Loads the full IDotNetEnum model from the type definition. Declaration IDotNetEnum GetEnumModel() Returns Type Description IDotNetEnum Return the fully loaded model or an empty model if the type is not an enumeration. | Improve this Doc View Source GetInterfaceModel() Loads the full IDotNetInterface model from the type definition. Declaration IDotNetInterface GetInterfaceModel() Returns Type Description IDotNetInterface Return the fully loaded model or an empty model if the type is not an interface. | Improve this Doc View Source GetStructureModel() Loads the full IDotNetStructure model from the type definition. Declaration IDotNetStructure GetStructureModel() Returns Type Description IDotNetStructure Return the fully loaded model or an empty model if the type is not a structure. Extension Methods DotNetModelExtensions.FormatCSharpFullTypeName(IDotNetType) DotNetModelExtensions.FormatCSharpTupleSignatureSyntax(IDotNetType) DotNetModelExtensions.FormatCSharpArraySignatureSyntax(IDotNetType) DotNetModelExtensions.FormatCSharpValueSyntax(IDotNetType, String)"
  },
  "api/CodeFactory.DotNet.ILookup.html": {
    "href": "api/CodeFactory.DotNet.ILookup.html",
    "title": "Interface ILookup | CodeFactory Guidance",
    "keywords": "Interface ILookup Defines lookup information for a model that supports being searched for. Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface ILookup Properties | Improve this Doc View Source LookupPath The fully qualified path for this model that can be used when searching the source for the model. Declaration string LookupPath { get; } Property Value Type Description String"
  },
  "api/CodeFactory.DotNet.IParent.html": {
    "href": "api/CodeFactory.DotNet.IParent.html",
    "title": "Interface IParent | CodeFactory Guidance",
    "keywords": "Interface IParent Defines information how to find the parent model for the model that implements this dot net model. Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IParent Properties | Improve this Doc View Source Parent The parent to the current model. This will return null if there is no parent for this model, or the parent could not be located. Declaration IDotNetModel Parent { get; } Property Value Type Description IDotNetModel"
  },
  "api/CodeFactory.DotNet.IT4Factory.html": {
    "href": "api/CodeFactory.DotNet.IT4Factory.html",
    "title": "Interface IT4Factory | CodeFactory Guidance",
    "keywords": "Interface IT4Factory Definition of data that will be provided to all T4 factories. Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public interface IT4Factory Properties | Improve this Doc View Source ModelData Custom model data that has been assigned to the T4 factory. Declaration object ModelData { get; set; } Property Value Type Description Object"
  },
  "api/CodeFactory.DotNet.Language.html": {
    "href": "api/CodeFactory.DotNet.Language.html",
    "title": "Enum Language | CodeFactory Guidance",
    "keywords": "Enum Language The target .net language for code factory. Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public enum Language Fields Name Description CSharp Model was built from the C# language Unknown The language was unknown"
  },
  "api/CodeFactory.DotNet.MemberComparisonType.html": {
    "href": "api/CodeFactory.DotNet.MemberComparisonType.html",
    "title": "Enum MemberComparisonType | CodeFactory Guidance",
    "keywords": "Enum MemberComparisonType Enumeration of the types of member comparison Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public enum MemberComparisonType Fields Name Description Base Member is compared by the base signature only, no key words, instance scoping , or security added. Full Member is compared by the full signature including scoping and target keywords Security Member is compared by the base signature and the security assigned to the member."
  },
  "api/CodeFactory.DotNet.ParameterDefaultValueType.html": {
    "href": "api/CodeFactory.DotNet.ParameterDefaultValueType.html",
    "title": "Enum ParameterDefaultValueType | CodeFactory Guidance",
    "keywords": "Enum ParameterDefaultValueType Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public enum ParameterDefaultValueType Fields Name Description DefaultKeyWord The default keyword for the type should be used. None There is no default value or it is unknown NullKeyword The keyword that represents a null implementation of the type should be used. Value The provided literal value should be used for the default type."
  },
  "api/CodeFactory.DotNet.PathBuilderConstants.html": {
    "href": "api/CodeFactory.DotNet.PathBuilderConstants.html",
    "title": "Class PathBuilderConstants | CodeFactory Guidance",
    "keywords": "Class PathBuilderConstants Data constants that are used when building the unique path for a dot net model. Inheritance Object PathBuilderConstants Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public static class PathBuilderConstants Fields | Improve this Doc View Source Attribute Definition of a attribute model in the path for a dot net model. Declaration public const string Attribute = \"/A:\" Field Value Type Description String | Improve this Doc View Source Class Definition of a class model in the path for a dot net model. Declaration public const string Class = \"/C:\" Field Value Type Description String | Improve this Doc View Source Delegate Definition of a delegate model in the path for a dot net model. Declaration public const string Delegate = \"/D:\" Field Value Type Description String | Improve this Doc View Source Enum Definition of a enumeration model in the path for a dot net model. Declaration public const string Enum = \"/EN:\" Field Value Type Description String | Improve this Doc View Source EnumValue Definition of a enumeration value model in the path for a dot net model. Declaration public const string EnumValue = \"/ENV:\" Field Value Type Description String | Improve this Doc View Source Event Definition of a event model in the path for a dot net model. Declaration public const string Event = \"/E:\" Field Value Type Description String | Improve this Doc View Source Field Definition of a field model in the path for a dot net model. Declaration public const string Field = \"/F:\" Field Value Type Description String | Improve this Doc View Source Interface Definition of a interface model in the path for a dot net model. Declaration public const string Interface = \"/I:\" Field Value Type Description String | Improve this Doc View Source Method Definition of a method model in the path for a dot net model. Declaration public const string Method = \"/M:\" Field Value Type Description String | Improve this Doc View Source Namespace Definition of a namespace path for a dot net model. Declaration public const string Namespace = \"/NS:\" Field Value Type Description String | Improve this Doc View Source NamespaceReference Reference to a namespace that is used in a dot net model. Declaration public const string NamespaceReference = \"/NSREF:\" Field Value Type Description String | Improve this Doc View Source Parameter Definition of a parameter model in the path for a dot net model. Declaration public const string Parameter = \"/PARM:\" Field Value Type Description String | Improve this Doc View Source ParameterDefaultValue Definition of a parameter model default value in the path for a dot net model. Declaration public const string ParameterDefaultValue = \"/PARMDV:\" Field Value Type Description String | Improve this Doc View Source Property Definition of a property model in the path for a dot net model. Declaration public const string Property = \"/P:\" Field Value Type Description String | Improve this Doc View Source Source Definition of the source entry point that holds all dot net models. Declaration public const string Source = \"//SRC:\" Field Value Type Description String | Improve this Doc View Source Structure Definition of a structure model in the path for a dot net model. Declaration public const string Structure = \"/S:\" Field Value Type Description String"
  },
  "api/CodeFactory.DotNet.WellKnownLanguageType.html": {
    "href": "api/CodeFactory.DotNet.WellKnownLanguageType.html",
    "title": "Enum WellKnownLanguageType | CodeFactory Guidance",
    "keywords": "Enum WellKnownLanguageType Enumeration that identifies well know types used by various .net languages. Namespace : CodeFactory.DotNet Assembly : CodeFactory.DotNet.dll Syntax public enum WellKnownLanguageType Fields Name Description Boolean The well known data type of Boolean Character The well know data type of Char that stores a character. DateTime Well known type that holds a date and a time DateTime Decimal The well known data type is a decimal floating point number ±1.0 x 10-28 to ±7.9228 x 10 to the 28 power Decimal Double The well known data type is a double precision floating point number ±5.0 × 10−324 to ±1.7 × 10 to the 308 power Double NotWellKnown The language type definition is not well known (Default Value) Object Implements the well known type Object . PlatformPointer Well known type that represents a pointer that is platform specific UIntPtr Pointer Well known type that is used to represent the location of a pointer or handle IntPtr Signed16BitInteger The well known data type is a signed 16 bit integer -32,768 to 32,767 Int16 Signed32BitInteger The well known data type is a signed 32 bit integer -2,147,483,648 to 2,147,483,647 Int32 Signed64BitInteger The well known data type is a signed 64 bit integer -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 Int64 Signed8BitInteger The well know data type is a signed 8 bit integer -128 to 127 SByte . Single The well known data type is a single precision floating point number ±1.5 x 10−45 to ±3.4 x 10 to the 38 power Single String Well know type that contains an immutable sequence of UTF-16 code units String Unsigned16BitInteger The well know data type is a unsigned 16 bit integer 0 to 65,535 UInt16 Unsigned32BitInteger The well know data type is a unsigned 32 bit integer 0 to 4,294,967,295 UInt32 Unsigned64BitInteger The well known data type is a unsigned 64 bit integer 0 to 18,446,744,073,709,551,615 UInt64 UnSigned8BitInteger The well know data type is an unsigned 8 bit integer 0 to 255 Byte Void Is a special return type that specifies no value will be returned. Void"
  },
  "api/CodeFactory.html": {
    "href": "api/CodeFactory.html",
    "title": "Namespace CodeFactory | CodeFactory Guidance",
    "keywords": "Namespace CodeFactory Classes ActionException Exception that is raised when an error occured that kept a code factory command from finishing execution. CodeFactoryException Base exception class all code factory generated exceptions are based on. CodeFactoryMessages A strongly-typed resource class, for looking up localized strings, etc. ModelException<TModelTypes> Exception class that is designed to capture exception information during the creation of a model. ModelLoadException Exception class that captures information about errors during the creation of a code factory model. ModelStore<T> Stores code factory models so they can be extracted when needed. SourceFormatter Base implementation of source code formatting. This allows for control of formatted output from CodeFactory. Interfaces ICommand<TModel> Base implementation for all code factory commands. IModel<TModelTypes> Base implementation of a code factory model. All models will be derived from this base model definition. IModelStatus Status information about a code factory model that has been created. ISourceFormatter Base implementation all source formatters that support CodeFactory must implement."
  },
  "api/CodeFactory.ICommand-1.html": {
    "href": "api/CodeFactory.ICommand-1.html",
    "title": "Interface ICommand<TModel> | CodeFactory Guidance",
    "keywords": "Interface ICommand<TModel> Base implementation for all code factory commands. Namespace : CodeFactory Assembly : CodeFactory.dll Syntax public interface ICommand<TModel> where TModel : class Type Parameters Name Description TModel Target code factory model to be provided for the command. Methods | Improve this Doc View Source EnableCommandAsync(TModel) Validation logic that will determine if this command should be enabled for execution. Declaration Task<bool> EnableCommandAsync(TModel result) Parameters Type Name Description TModel result The target model data that will be used to determine if this command should be enabled. Returns Type Description Task < Boolean > Boolean flag that will tell code factory to enable this command or disable it. | Improve this Doc View Source ExecuteCommandAsync(TModel) Code factory framework calls this method when the command has been executed. Declaration Task ExecuteCommandAsync(TModel result) Parameters Type Name Description TModel result The code factory model that has generated and provided to the command to process. Returns Type Description Task"
  },
  "api/CodeFactory.IModel-1.html": {
    "href": "api/CodeFactory.IModel-1.html",
    "title": "Interface IModel<TModelTypes> | CodeFactory Guidance",
    "keywords": "Interface IModel<TModelTypes> Base implementation of a code factory model. All models will be derived from this base model definition. Namespace : CodeFactory Assembly : CodeFactory.dll Syntax public interface IModel<TModelTypes> where TModelTypes : struct, IComparable, IFormattable, IConvertible Type Parameters Name Description TModelTypes Enumeration of the model types that this model supports. Properties | Improve this Doc View Source HasErrors Flag that determines if this model has errors. Declaration bool HasErrors { get; } Property Value Type Description Boolean | Improve this Doc View Source IsLoaded Flag that determines if this model was able to load. Declaration bool IsLoaded { get; } Property Value Type Description Boolean | Improve this Doc View Source ModelErrors List of all errors that occurred in this model. Declaration IReadOnlyList<ModelException<TModelTypes>> ModelErrors { get; } Property Value Type Description IReadOnlyList < ModelException <TModelTypes>> | Improve this Doc View Source ModelType Determines the type of model that has been loaded. Declaration TModelTypes ModelType { get; } Property Value Type Description TModelTypes"
  },
  "api/CodeFactory.IModelStatus.html": {
    "href": "api/CodeFactory.IModelStatus.html",
    "title": "Interface IModelStatus | CodeFactory Guidance",
    "keywords": "Interface IModelStatus Status information about a code factory model that has been created. Namespace : CodeFactory Assembly : CodeFactory.dll Syntax public interface IModelStatus Properties | Improve this Doc View Source HasErrors Flag that determines if this model or one of the children of this model has an error. Declaration bool HasErrors { get; } Property Value Type Description Boolean | Improve this Doc View Source IsLoaded Flag that determines if this model was able to load. Declaration bool IsLoaded { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source GetErrors() Gets the ModelLoadException from the current model and all child models of this model. Declaration IReadOnlyList<ModelLoadException> GetErrors() Returns Type Description IReadOnlyList < ModelLoadException > Returns a IReadOnlyList<T> of the ModelLoadException exceptions or an empty list if no exceptions exist."
  },
  "api/CodeFactory.ISourceFormatter.html": {
    "href": "api/CodeFactory.ISourceFormatter.html",
    "title": "Interface ISourceFormatter | CodeFactory Guidance",
    "keywords": "Interface ISourceFormatter Base implementation all source formatters that support CodeFactory must implement. Namespace : CodeFactory Assembly : CodeFactory.dll Syntax public interface ISourceFormatter Methods | Improve this Doc View Source AppendCode(String) Appends code to the end of the current line in the formatter. Declaration void AppendCode(string code) Parameters Type Name Description String code The code to append. | Improve this Doc View Source AppendCodeBlock(Int32, IEnumerable<String>) Appends a target indent level to a already formatted block of code. Declaration void AppendCodeBlock(int indentLevel, IEnumerable<string> codeBlock) Parameters Type Name Description Int32 indentLevel The target indent level to be added to the existing code block. IEnumerable < String > codeBlock The block of code to append to. | Improve this Doc View Source AppendCodeBlock(Int32, String) Appends a target indent level to a already formatted block of code. Declaration void AppendCodeBlock(int indentLevel, string codeBlock) Parameters Type Name Description Int32 indentLevel The target indent level to be added to the existing code block. String codeBlock The block of code to append to. | Improve this Doc View Source AppendCodeLine(Int32) Appends a new line of code to the formatter. Declaration void AppendCodeLine(int indentLevel) Parameters Type Name Description Int32 indentLevel The number of indent levels to add to the source code. | Improve this Doc View Source AppendCodeLine(Int32, String) Appends a new line of code to the formatter. Declaration void AppendCodeLine(int indentLevel, string code) Parameters Type Name Description Int32 indentLevel The number of indent levels to add to the source code. String code The code to add to the formatter. | Improve this Doc View Source ResetFormatter() Clears the formatter to be reused. Declaration void ResetFormatter() | Improve this Doc View Source ReturnSource() Returns the formatted source code. Declaration string ReturnSource() Returns Type Description String Formatted SourceCode."
  },
  "api/CodeFactory.Logging.html": {
    "href": "api/CodeFactory.Logging.html",
    "title": "Namespace CodeFactory.Logging | CodeFactory Guidance",
    "keywords": "Namespace CodeFactory.Logging Classes LoggingProperties The name of the properties that are included in logging. LogManager Manager class that returns the correct instance of the logger managed by code factory. Interfaces ILogger Standard logging interface used by Code factory to log information about the execution of code factory."
  },
  "api/CodeFactory.Logging.ILogger.html": {
    "href": "api/CodeFactory.Logging.ILogger.html",
    "title": "Interface ILogger | CodeFactory Guidance",
    "keywords": "Interface ILogger Standard logging interface used by Code factory to log information about the execution of code factory. Namespace : CodeFactory.Logging Assembly : CodeFactory.Logging.dll Syntax public interface ILogger Methods | Improve this Doc View Source Critical(String, Exception, String, Int32) Logs critical level information about the executing code base. This level is always logged when enabled. Declaration void Critical(string message, Exception exception, string memberName = null, int lineNumber = 0) Parameters Type Name Description String message Message to be logged. Exception exception The exception that occured that needs to be logged. String memberName The name of the member being logged.Important the compiler will populate this value automatically. Int32 lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. | Improve this Doc View Source Critical(String, String, Int32) Logs critical level information about the executing code base. This level is always logged when enabled. Declaration void Critical(string message, string memberName = null, int lineNumber = 0) Parameters Type Name Description String message Message to be logged. String memberName The name of the member being logged.Important the compiler will populate this value automatically. Int32 lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. | Improve this Doc View Source Debug(String, String, Int32) Logs debug level information. This level is used for application debugging. Declaration void Debug(string message, string memberName = null, int lineNumber = 0) Parameters Type Name Description String message Message to be logged. String memberName The name of the member being logged.Important the compiler will populate this value automatically. Int32 lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. | Improve this Doc View Source DebugEnter(String, Int32) Logs the entering into a member. This is an debuglevel log message. Declaration void DebugEnter(string memberName = null, int lineNumber = 0) Parameters Type Name Description String memberName The name of the member being logged. Important the compiler will populate this value automatically. Int32 lineNumber The line number where the logging event occurs. Important the compiler will populate this value automatically. | Improve this Doc View Source DebugExit(String, Int32) Logs the exiting of a member. This is an debug level log message. Declaration void DebugExit(string memberName = null, int lineNumber = 0) Parameters Type Name Description String memberName The name of the member being logged.Important the compiler will populate this value automatically. Int32 lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. | Improve this Doc View Source Error(String, Exception, String, Int32) Logs error level information about the executing code base. This level is always logged when enabled. Declaration void Error(string message, Exception exception, string memberName = null, int lineNumber = 0) Parameters Type Name Description String message Message to be logged. Exception exception The exception that occured that needs to be logged. String memberName The name of the member being logged.Important the compiler will populate this value automatically. Int32 lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. | Improve this Doc View Source Error(String, String, Int32) Logs error level information about the executing code base. This level is always logged when enabled. Declaration void Error(string message, string memberName = null, int lineNumber = 0) Parameters Type Name Description String message Message to be logged. String memberName The name of the member being logged.Important the compiler will populate this value automatically. Int32 lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. | Improve this Doc View Source InfoEnter(String, Int32) Logs the entering into a member. This is an information level log message. Declaration void InfoEnter(string memberName = null, int lineNumber = 0) Parameters Type Name Description String memberName The name of the member being logged. Important the compiler will populate this value automatically. Int32 lineNumber The line number where the logging event occurs. Important the compiler will populate this value automatically. | Improve this Doc View Source InfoExit(String, Int32) Logs the exiting of a member. This is an information level log message. Declaration void InfoExit(string memberName = null, int lineNumber = 0) Parameters Type Name Description String memberName The name of the member being logged.Important the compiler will populate this value automatically. Int32 lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. | Improve this Doc View Source Information(String, String, Int32) Logs general information about the executing code base. This is the default logging level. Declaration void Information(string message, string memberName = null, int lineNumber = 0) Parameters Type Name Description String message Message to be logged. String memberName The name of the member being logged.Important the compiler will populate this value automatically. Int32 lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. | Improve this Doc View Source Trace(String, String, Int32) Logs detailed execution information. This level is used for application tracing. Declaration void Trace(string message, string memberName = null, int lineNumber = 0) Parameters Type Name Description String message Message to be logged. String memberName The name of the member being logged.Important the compiler will populate this value automatically. Int32 lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. | Improve this Doc View Source TraceEnter(String, Int32) Logs the entering into a member. This is an trace level log message. Declaration void TraceEnter(string memberName = null, int lineNumber = 0) Parameters Type Name Description String memberName The name of the member being logged. Important the compiler will populate this value automatically. Int32 lineNumber The line number where the logging event occurs. Important the compiler will populate this value automatically. | Improve this Doc View Source TraceExit(String, Int32) Logs the exiting of a member. This is an trace level log message. Declaration void TraceExit(string memberName = null, int lineNumber = 0) Parameters Type Name Description String memberName The name of the member being logged.Important the compiler will populate this value automatically. Int32 lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. | Improve this Doc View Source Warning(String, Exception, String, Int32) Logs warning level information about the executing code base. This level is always logged when enabled. Declaration void Warning(string message, Exception exception, string memberName = null, int lineNumber = 0) Parameters Type Name Description String message Message to be logged. Exception exception The exception that occured that needs to be logged. String memberName The name of the member being logged.Important the compiler will populate this value automatically. Int32 lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically. | Improve this Doc View Source Warning(String, String, Int32) Logs warning level information about the executing code base. This level is always logged when enabled. Declaration void Warning(string message, string memberName = null, int lineNumber = 0) Parameters Type Name Description String message Message to be logged. String memberName The name of the member being logged.Important the compiler will populate this value automatically. Int32 lineNumber The line number where the logging event occurs.Important the compiler will populate this value automatically."
  },
  "api/CodeFactory.Logging.LoggingProperties.html": {
    "href": "api/CodeFactory.Logging.LoggingProperties.html",
    "title": "Class LoggingProperties | CodeFactory Guidance",
    "keywords": "Class LoggingProperties The name of the properties that are included in logging. Inheritance Object LoggingProperties Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.Logging Assembly : CodeFactory.Logging.dll Syntax public static class LoggingProperties Fields | Improve this Doc View Source LineNumber Constant that stores the property name to log a line number. Declaration public const string LineNumber = \"LineNumber\" Field Value Type Description String | Improve this Doc View Source MemberName Constant that stores the property name to log a member name. Declaration public const string MemberName = \"MemberName\" Field Value Type Description String"
  },
  "api/CodeFactory.Logging.LogManager.html": {
    "href": "api/CodeFactory.Logging.LogManager.html",
    "title": "Class LogManager | CodeFactory Guidance",
    "keywords": "Class LogManager Manager class that returns the correct instance of the logger managed by code factory. Inheritance Object LogManager Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.Logging Assembly : CodeFactory.Logging.dll Syntax public static class LogManager Methods | Improve this Doc View Source GetLogger(String) Loads the target logger instance. Declaration public static ILogger GetLogger(string loggerName) Parameters Type Name Description String loggerName The name of the logger to be loaded. Returns Type Description ILogger Instance of the target code factory logger. | Improve this Doc View Source GetLogger(Type) Loads the target logger instance. Declaration public static ILogger GetLogger(Type targetType) Parameters Type Name Description Type targetType The target type to load the logger for. Returns Type Description ILogger Instance of the target code factory logger. | Improve this Doc View Source GetLogger<T>() Loads the target logger instance. Declaration public static ILogger GetLogger<T>() where T : class Returns Type Description ILogger Instance of the target code factory logger. Type Parameters Name Description T The target class type to be logged."
  },
  "api/CodeFactory.ModelException-1.html": {
    "href": "api/CodeFactory.ModelException-1.html",
    "title": "Class ModelException<TModelTypes> | CodeFactory Guidance",
    "keywords": "Class ModelException<TModelTypes> Exception class that is designed to capture exception information during the creation of a model. Inheritance Object Exception CodeFactoryException ModelException<TModelTypes> Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : CodeFactory Assembly : CodeFactory.dll Syntax public class ModelException<TModelTypes> : CodeFactoryException, ISerializable, _Exception where TModelTypes : struct, IComparable, IFormattable, IConvertible Type Parameters Name Description TModelTypes Target enumeration of model types that this exception will support. Constructors | Improve this Doc View Source ModelException(TModelTypes) Creates a model exception. Declaration public ModelException(TModelTypes modelType) Parameters Type Name Description TModelTypes modelType The type of model that had issues | Improve this Doc View Source ModelException(TModelTypes, String) Creates a model exception. Declaration public ModelException(TModelTypes modelType, string message) Parameters Type Name Description TModelTypes modelType The type of model that had issues String message The error message to be captured by the exception | Improve this Doc View Source ModelException(TModelTypes, String, Exception) Creates a model exception. Declaration public ModelException(TModelTypes modelType, string message, Exception innerException) Parameters Type Name Description TModelTypes modelType The type of model that had issues String message The error message to be captured by the exception Exception innerException The inner exception that occurred and to be added to this exception. Properties | Improve this Doc View Source ModelType The source type of the model that had an error when loading. Declaration public TModelTypes ModelType { get; } Property Value Type Description TModelTypes Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/CodeFactory.ModelLoadException.html": {
    "href": "api/CodeFactory.ModelLoadException.html",
    "title": "Class ModelLoadException | CodeFactory Guidance",
    "keywords": "Class ModelLoadException Exception class that captures information about errors during the creation of a code factory model. Inheritance Object Exception CodeFactoryException ModelLoadException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : CodeFactory Assembly : CodeFactory.dll Syntax public class ModelLoadException : CodeFactoryException, ISerializable, _Exception Constructors | Improve this Doc View Source ModelLoadException(String) Creates a model load exception. Declaration public ModelLoadException(string modelType = null) Parameters Type Name Description String modelType Optional parameter that stores the name of the target model type. | Improve this Doc View Source ModelLoadException(String, Exception, String) Creates a model load exception. Declaration public ModelLoadException(string message, Exception innerException, string modelType = null) Parameters Type Name Description String message The error message to be captured by the exception Exception innerException The inner exception that occurred and to be added to this exception. String modelType Optional parameter that stores the name of the target model type. | Improve this Doc View Source ModelLoadException(String, String) Creates a model load exception. Declaration public ModelLoadException(string message, string modelType = null) Parameters Type Name Description String message The error message to be captured by the exception String modelType Optional parameter that stores the name of the target model type. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/CodeFactory.ModelStore-1.html": {
    "href": "api/CodeFactory.ModelStore-1.html",
    "title": "Class ModelStore<T> | CodeFactory Guidance",
    "keywords": "Class ModelStore<T> Stores code factory models so they can be extracted when needed. Inheritance Object ModelStore<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory Assembly : CodeFactory.dll Syntax public class ModelStore<T> where T : class Type Parameters Name Description T The type of model that is being stored. Constructors | Improve this Doc View Source ModelStore() Initialization of the model store Declaration public ModelStore() Methods | Improve this Doc View Source AddModel(String, T) Adds a model to the model store. Declaration public void AddModel(string index, T model) Parameters Type Name Description String index The unique index for the model. T model The model to be added to the store. The model cannot be null otherwise it will not be added. | Improve this Doc View Source GetModel(String) Gets a target model from the store. Declaration public T GetModel(string index) Parameters Type Name Description String index Index number of the model to load. Returns Type Description T The stored model or null if the model could not be returned. Remarks Thread safe operation."
  },
  "api/CodeFactory.SourceCode.html": {
    "href": "api/CodeFactory.SourceCode.html",
    "title": "Namespace CodeFactory.SourceCode | CodeFactory Guidance",
    "keywords": "Namespace CodeFactory.SourceCode Classes SourceLocation Data model that implements the contract ISourceLocation Interfaces ISourceFiles Interface that stores where target source code originated from. ISourceLocation Notes the location in a source document where the model starts and ends in definition. Enums SourceCodeType Enumeration of the source code types that are supported by code factory."
  },
  "api/CodeFactory.SourceCode.ISourceFiles.html": {
    "href": "api/CodeFactory.SourceCode.ISourceFiles.html",
    "title": "Interface ISourceFiles | CodeFactory Guidance",
    "keywords": "Interface ISourceFiles Interface that stores where target source code originated from. Namespace : CodeFactory.SourceCode Assembly : CodeFactory.dll Syntax public interface ISourceFiles Properties | Improve this Doc View Source SourceFiles The source file or files in which the model was loaded from. This will be an empty enumeration if the source models were loaded from metadata only. Declaration IReadOnlyList<string> SourceFiles { get; } Property Value Type Description IReadOnlyList < String >"
  },
  "api/CodeFactory.SourceCode.ISourceLocation.html": {
    "href": "api/CodeFactory.SourceCode.ISourceLocation.html",
    "title": "Interface ISourceLocation | CodeFactory Guidance",
    "keywords": "Interface ISourceLocation Notes the location in a source document where the model starts and ends in definition. Namespace : CodeFactory.SourceCode Assembly : CodeFactory.dll Syntax public interface ISourceLocation Properties | Improve this Doc View Source EndLocation The ending location for the definition of the source. Declaration DocumentLocation EndLocation { get; } Property Value Type Description DocumentLocation | Improve this Doc View Source StartLocation The starting location for the definition of the source. Declaration DocumentLocation StartLocation { get; } Property Value Type Description DocumentLocation"
  },
  "api/CodeFactory.SourceCode.SourceCodeType.html": {
    "href": "api/CodeFactory.SourceCode.SourceCodeType.html",
    "title": "Enum SourceCodeType | CodeFactory Guidance",
    "keywords": "Enum SourceCodeType Enumeration of the source code types that are supported by code factory. Namespace : CodeFactory.SourceCode Assembly : CodeFactory.dll Syntax public enum SourceCodeType Fields Name Description CSharp The source code is implemented in the C# programming language. Unknown The source code type is not supported or unknown to code factory. VisualBasic The source code is implemented in the visual basic programming language."
  },
  "api/CodeFactory.SourceCode.SourceLocation.html": {
    "href": "api/CodeFactory.SourceCode.SourceLocation.html",
    "title": "Class SourceLocation | CodeFactory Guidance",
    "keywords": "Class SourceLocation Data model that implements the contract ISourceLocation Inheritance Object SourceLocation Implements ISourceLocation Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.SourceCode Assembly : CodeFactory.dll Syntax public class SourceLocation : ISourceLocation Properties | Improve this Doc View Source EndLocation The ending location for the definition of the source. Declaration public DocumentLocation EndLocation { get; } Property Value Type Description DocumentLocation | Improve this Doc View Source StartLocation The starting location for the definition of the source. Declaration public DocumentLocation StartLocation { get; } Property Value Type Description DocumentLocation Methods | Improve this Doc View Source Init(Int32, Int32, Int32, Int32) Declaration public static ISourceLocation Init(int startLine, int startPosition, int endLine, int endPosition) Parameters Type Name Description Int32 startLine Int32 startPosition Int32 endLine Int32 endPosition Returns Type Description ISourceLocation Implements ISourceLocation"
  },
  "api/CodeFactory.SourceFormatter.html": {
    "href": "api/CodeFactory.SourceFormatter.html",
    "title": "Class SourceFormatter | CodeFactory Guidance",
    "keywords": "Class SourceFormatter Base implementation of source code formatting. This allows for control of formatted output from CodeFactory. Inheritance Object SourceFormatter Implements ISourceFormatter Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory Assembly : CodeFactory.dll Syntax public class SourceFormatter : ISourceFormatter Constructors | Improve this Doc View Source SourceFormatter(String) Creates a new instance of the SourceFormatter Declaration public SourceFormatter(string indentStatement = \"\\t\") Parameters Type Name Description String indentStatement Optional parameter that allows you to set the target type of indent that will occur with each code statement. Methods | Improve this Doc View Source AppendCode(String) Appends code to the end of the current line in the formatter. Declaration public void AppendCode(string code) Parameters Type Name Description String code The code to append. | Improve this Doc View Source AppendCodeBlock(Int32, IEnumerable<String>) Appends a target indent level to a already formatted block of code. Declaration public void AppendCodeBlock(int indentLevel, IEnumerable<string> codeBlock) Parameters Type Name Description Int32 indentLevel The target indent level to be added to the existing code block. IEnumerable < String > codeBlock The block of code to append to. | Improve this Doc View Source AppendCodeBlock(Int32, String) Appends a target indent level to a already formatted block of code. Declaration public void AppendCodeBlock(int indentLevel, string codeBlock) Parameters Type Name Description Int32 indentLevel The target indent level to be added to the existing code block. String codeBlock The block of code to append to. | Improve this Doc View Source AppendCodeLine(Int32) Appends a new line of code to the formatter. Declaration public void AppendCodeLine(int indentLevel) Parameters Type Name Description Int32 indentLevel The number of indent levels to add to the source code. | Improve this Doc View Source AppendCodeLine(Int32, String) Appends a new line of code to the formatter. Declaration public void AppendCodeLine(int indentLevel, string code) Parameters Type Name Description Int32 indentLevel The number of indent levels to add to the source code. String code The code to add to the formatter. | Improve this Doc View Source ResetFormatter() Clears the formatter to be reused. Declaration public void ResetFormatter() | Improve this Doc View Source ReturnSource() Returns the formatted source code. Declaration public string ReturnSource() Returns Type Description String Formatted SourceCode. Implements ISourceFormatter"
  },
  "api/CodeFactory.VisualStudio.CSharpSourceExtensions.html": {
    "href": "api/CodeFactory.VisualStudio.CSharpSourceExtensions.html",
    "title": "Class CSharpSourceExtensions | CodeFactory Guidance",
    "keywords": "Class CSharpSourceExtensions Extensions management class for the model IVsCSharpSource Inheritance Object CSharpSourceExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public static class CSharpSourceExtensions Methods | Improve this Doc View Source SourceMissingInterfaceMembers(VsCSharpSource) Extension method that checks a IVsCSharpSource model and determines if the classes and structures in the source have any missing interface members. Declaration public static IReadOnlyList<KeyValuePair<CsContainer, IReadOnlyList<CsMember>>> SourceMissingInterfaceMembers(this VsCSharpSource source) Parameters Type Name Description VsCSharpSource source The source implementation to validate. Returns Type Description IReadOnlyList < KeyValuePair < CsContainer , IReadOnlyList < CsMember >>> The list of missing members by target container, or an empty list if nothing is missing."
  },
  "api/CodeFactory.VisualStudio.FileHelper.html": {
    "href": "api/CodeFactory.VisualStudio.FileHelper.html",
    "title": "Class FileHelper | CodeFactory Guidance",
    "keywords": "Class FileHelper Static helper class that contains functions to support file management with visual studio. Inheritance Object FileHelper Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public static class FileHelper Properties | Improve this Doc View Source InvalidFileNameCharacters The invalid characters not allowed in a file name. Declaration public static string InvalidFileNameCharacters { get; } Property Value Type Description String Methods | Improve this Doc View Source ContainsInvalidFileNameCharacter(String) Provided file name is checked to determine if it has Declaration public static bool ContainsInvalidFileNameCharacter(string fileName) Parameters Type Name Description String fileName The filename to be evaluated. Returns Type Description Boolean True if invalid characters exists or false if the file does not have invalid characters."
  },
  "api/CodeFactory.VisualStudio.html": {
    "href": "api/CodeFactory.VisualStudio.html",
    "title": "Namespace CodeFactory.VisualStudio | CodeFactory Guidance",
    "keywords": "Namespace CodeFactory.VisualStudio Classes CSharpSourceExtensions Extensions management class for the model IVsCSharpSource FileHelper Static helper class that contains functions to support file management with visual studio. PathHelper Static helper class that contains functions to support path management with visual studio. ProjectSystemException Code factory exception that occurs when accessing visual studios project system. SolutionExplorerException Exception that is raised when there are problem accessing needed resources from visual studio's solution explorer. VisualStudioException Base exception class for all visual studio specific exceptions that occur in code factory. VisualStudioMessages A strongly-typed resource class, for looking up localized strings, etc. VsCommandBase<TModel> Base implementation for a factory command that supports integration with visual studio. VsCSharpSource Data model that represents C# source code. VsCSharpSourceExtensions Extensions class that provides common automation tasks rolled up under standard extension methods that support the VsCSharpSource model. VsDocument Data model that represents a document that is hosted in visual studio. VsModel Base class used by all visual studio models. VsProject Data model that presents a visual studio project that has been loaded. VsProjectExtensions Extensions class that provides common automation tasks rolled up under standard extension methods that support the VsProject model. VsProjectFolder Data model that represents a folder in a project hosted in visual studio. VsReference Data model that presents a visual studio reference that has been loaded. VsSolution Data model that represents the loaded solution in visual studio. VsSolutionFolder Data model that represents a solution folder in a loaded solution. Interfaces IChildren Defining if the visual studio object has child objects. IParent Interface to determine IVsActions Code factory commands that are globally used in Visual Studio. IVsCommandInformation Interface that provides information used by code factory to load the command. IVsCSharpSource Visual studio model that loads the source from a C# document. IVsDocument Definition of a document associated with a project in visual studio. IVsDocumentActions Visual studio actions that support the IVsDocument model. IVsFactoryCommand<TModel> Common implementation all code factory commands for visual studio must display. IVsModel IVsProject Definition of a visual studio project model information. IVsProjectActions Visual studio actions that support the IVsProject model. IVsProjectFolder Definition of a visual studio project folder model information. IVsProjectFolderActions Visual studio actions that support the IVsProjectFolder model. IVsReference Definition of a visual studio project reference model information. IVsReferenceActions Visual studio actions that support the IVsReference model. IVsSolution Model of the solution that is currently loaded in visual studio. IVsSolutionActions Actions that can be used with the a IVsSolution model. IVsSolutionFolder Model of a solution folder that is currently loaded in visual studio. IVsSolutionFolderActions Visual studio actions that support the IVsSolutionFolder model. IVsSourceActions The visual studio actions that support source models. Enums ProjectLanguage Definition of the a language has compiler support within a target project. ProjectReferenceType Enumeration VisualStudioModelType Enumeration of the different type of code factory models that support visual studio integration. VsCommandType Enumeration that determines the type of visual studio command is being executed. VsDocumentType Enumeration that determines the type of visual studio document that has been loaded."
  },
  "api/CodeFactory.VisualStudio.IChildren.html": {
    "href": "api/CodeFactory.VisualStudio.IChildren.html",
    "title": "Interface IChildren | CodeFactory Guidance",
    "keywords": "Interface IChildren Defining if the visual studio object has child objects. Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public interface IChildren Properties | Improve this Doc View Source HasChildren Flag that determines if this visual studio object has child objects. Declaration bool HasChildren { get; } Property Value Type Description Boolean"
  },
  "api/CodeFactory.VisualStudio.IParent.html": {
    "href": "api/CodeFactory.VisualStudio.IParent.html",
    "title": "Interface IParent | CodeFactory Guidance",
    "keywords": "Interface IParent Interface to determine Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public interface IParent Properties | Improve this Doc View Source HasParent Flag that determines if the visual studio object has a parent. Declaration bool HasParent { get; } Property Value Type Description Boolean"
  },
  "api/CodeFactory.VisualStudio.IVsActions.html": {
    "href": "api/CodeFactory.VisualStudio.IVsActions.html",
    "title": "Interface IVsActions | CodeFactory Guidance",
    "keywords": "Interface IVsActions Code factory commands that are globally used in Visual Studio. Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public interface IVsActions Properties | Improve this Doc View Source DocumentActions Visual studio actions that work with the IVsDocument model. Declaration IVsDocumentActions DocumentActions { get; } Property Value Type Description IVsDocumentActions | Improve this Doc View Source ProjectActions Visual studio actions that work with the IVsProject model. Declaration IVsProjectActions ProjectActions { get; } Property Value Type Description IVsProjectActions | Improve this Doc View Source ProjectFolderActions Visual studio actions that work with the IVsProjectFolder model. Declaration IVsProjectFolderActions ProjectFolderActions { get; } Property Value Type Description IVsProjectFolderActions | Improve this Doc View Source ProjectReferenceActions Visual studio actions that work with the IVsReference model. Declaration IVsReferenceActions ProjectReferenceActions { get; } Property Value Type Description IVsReferenceActions | Improve this Doc View Source SolutionActions Visual studio actions that work with the IVsSolution model. Declaration IVsSolutionActions SolutionActions { get; } Property Value Type Description IVsSolutionActions | Improve this Doc View Source SolutionFolderActions Visual studio actions that work with the IVsSolutionFolder model. Declaration IVsSolutionFolderActions SolutionFolderActions { get; } Property Value Type Description IVsSolutionFolderActions | Improve this Doc View Source SourceActions Visual studio actions that work with source models. Declaration IVsSourceActions SourceActions { get; } Property Value Type Description IVsSourceActions | Improve this Doc View Source UserInterfaceActions Visual studio actions that work the the visual studio user interface. Declaration IVsUIActions UserInterfaceActions { get; } Property Value Type Description IVsUIActions Methods | Improve this Doc View Source GetSolutionAsync() Gets the most current model of the solution. Declaration Task<VsSolution> GetSolutionAsync() Returns Type Description Task < VsSolution > The solution model."
  },
  "api/CodeFactory.VisualStudio.IVsCommandInformation.html": {
    "href": "api/CodeFactory.VisualStudio.IVsCommandInformation.html",
    "title": "Interface IVsCommandInformation | CodeFactory Guidance",
    "keywords": "Interface IVsCommandInformation Interface that provides information used by code factory to load the command. Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public interface IVsCommandInformation Properties | Improve this Doc View Source CommandDescription An optional description that describes what this factory command is intended for. Declaration string CommandDescription { get; } Property Value Type Description String | Improve this Doc View Source CommandTitle Command title that will be displayed within visual studio. Declaration string CommandTitle { get; } Property Value Type Description String | Improve this Doc View Source CommandType The target type of command that is being loaded. Declaration VsCommandType CommandType { get; } Property Value Type Description VsCommandType"
  },
  "api/CodeFactory.VisualStudio.IVsCSharpSource.html": {
    "href": "api/CodeFactory.VisualStudio.IVsCSharpSource.html",
    "title": "Interface IVsCSharpSource | CodeFactory Guidance",
    "keywords": "Interface IVsCSharpSource Visual studio model that loads the source from a C# document. Inherited Members IVsModel.Name IModel<VisualStudioModelType>.IsLoaded IModel<VisualStudioModelType>.HasErrors IModel<VisualStudioModelType>.ModelErrors IModel<VisualStudioModelType>.ModelType Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public interface IVsCSharpSource : IVsModel, IModel<VisualStudioModelType> Properties | Improve this Doc View Source SourceCode The C# source in the document. Declaration CsSource SourceCode { get; } Property Value Type Description CsSource"
  },
  "api/CodeFactory.VisualStudio.IVsDocument.html": {
    "href": "api/CodeFactory.VisualStudio.IVsDocument.html",
    "title": "Interface IVsDocument | CodeFactory Guidance",
    "keywords": "Interface IVsDocument Definition of a document associated with a project in visual studio. Inherited Members IVsModel.Name IModel<VisualStudioModelType>.IsLoaded IModel<VisualStudioModelType>.HasErrors IModel<VisualStudioModelType>.ModelErrors IModel<VisualStudioModelType>.ModelType IParent.HasParent IChildren.HasChildren Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public interface IVsDocument : IVsModel, IModel<VisualStudioModelType>, IParent, IChildren Properties | Improve this Doc View Source DocumentType The type of document that is loaded. Declaration VsDocumentType DocumentType { get; } Property Value Type Description VsDocumentType | Improve this Doc View Source IsSourceCode Flag that determines if the project document contains source code that can be managed by code factory. Declaration bool IsSourceCode { get; } Property Value Type Description Boolean | Improve this Doc View Source Path The fully qualified path to the project document. Declaration string Path { get; } Property Value Type Description String | Improve this Doc View Source SourceType The target type of source code that is implemented in the project document. Declaration SourceCodeType SourceType { get; } Property Value Type Description SourceCodeType"
  },
  "api/CodeFactory.VisualStudio.IVsDocumentActions.html": {
    "href": "api/CodeFactory.VisualStudio.IVsDocumentActions.html",
    "title": "Interface IVsDocumentActions | CodeFactory Guidance",
    "keywords": "Interface IVsDocumentActions Visual studio actions that support the IVsDocument model. Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public interface IVsDocumentActions Methods | Improve this Doc View Source AddContentAsync(VsDocument, IDocumentLocation, String) Adds content to a target starting at an assigned Declaration Task AddContentAsync(VsDocument source, IDocumentLocation location, string content) Parameters Type Name Description VsDocument source Document to have content added to. IDocumentLocation location Location within the document to add content to. String content The content to be added to the document. Returns Type Description Task | Improve this Doc View Source AddContentToBeginningAsync(VsDocument, String) Adds content to the beginning of a document. Declaration Task AddContentToBeginningAsync(VsDocument source, string content) Parameters Type Name Description VsDocument source Document to add content to. String content The content to be added. Returns Type Description Task | Improve this Doc View Source AddContentToEndAsync(VsDocument, String) Adds content to the end of a document. Declaration Task AddContentToEndAsync(VsDocument source, string content) Parameters Type Name Description VsDocument source Document to add content to. String content The content to be added. Returns Type Description Task | Improve this Doc View Source DeleteAsync(VsDocument) Deletes the document. Declaration Task<bool> DeleteAsync(VsDocument source) Parameters Type Name Description VsDocument source document to be deleted. Returns Type Description Task < Boolean > Flag that notifies if the delete operation completed successfully. Remarks Currently does not support deleting solution documents. | Improve this Doc View Source GetChildrenAsync(VsDocument, Boolean) Gets the direct children of the document. Declaration Task<IReadOnlyList<VsDocument>> GetChildrenAsync(VsDocument source, bool allChildren) Parameters Type Name Description VsDocument source The document to get children from. Boolean allChildren Flag that determines if all children from the document should be returned. Returns Type Description Task < IReadOnlyList < VsDocument >> Readonly list of all the project documents, if no children are found then an empty readonly list will be returned. | Improve this Doc View Source GetCSharpSourceModelAsync(VsDocument) If the document is implemented as a C# code model. Will return the C# source code model from the visual studio document. Declaration Task<CsSource> GetCSharpSourceModelAsync(VsDocument source) Parameters Type Name Description VsDocument source The source document to load the C# code model from. Returns Type Description Task < CsSource > The loaded model or null if the model could not be loaded. | Improve this Doc View Source GetDocumentContentAsContentAsync(VsDocument) Gets the content of the document. Declaration Task<IDocumentContent> GetDocumentContentAsContentAsync(VsDocument source) Parameters Type Name Description VsDocument source The document to get content from. Returns Type Description Task < IDocumentContent > Document content as | Improve this Doc View Source GetDocumentContentAsStringAsync(VsDocument) Gets the content of the document. Declaration Task<string> GetDocumentContentAsStringAsync(VsDocument source) Parameters Type Name Description VsDocument source The document to get content from. Returns Type Description Task < String > The content of the document or null if there is no content in the document. | Improve this Doc View Source GetDocumentContentAsStringAsync(VsDocument, IDocumentLocation, IDocumentLocation) Gets the content of the document. Declaration Task<string> GetDocumentContentAsStringAsync(VsDocument source, IDocumentLocation startLocation, IDocumentLocation endLocation) Parameters Type Name Description VsDocument source The document to get content from. IDocumentLocation startLocation The starting position within the document to get content from. IDocumentLocation endLocation The ending position within the document to get content form. Returns Type Description Task < String > The content of the document or null if there is no content in the document. | Improve this Doc View Source GetParentAsync(VsDocument) Get the parent visual studio model of the document. Declaration Task<VsModel> GetParentAsync(VsDocument source) Parameters Type Name Description VsDocument source document to get the parent of. Returns Type Description Task < VsModel > Model of the parent of this document. The model will be returned unless there is no parent, otherwise null will be returned. | Improve this Doc View Source RemoveAsync(VsDocument) Removes a document from visual studio but does not remove it from the file system. Declaration Task<bool> RemoveAsync(VsDocument source) Parameters Type Name Description VsDocument source document to be removed. Returns Type Description Task < Boolean > Flag that notifies if the remove operation completed successfully. Remarks Currently does not support removing solution documents. | Improve this Doc View Source RemoveContentAsync(VsDocument) Removes all the content from a document. Declaration Task RemoveContentAsync(VsDocument source) Parameters Type Name Description VsDocument source Document to remove content from. Returns Type Description Task | Improve this Doc View Source RemoveContentAsync(VsDocument, IDocumentLocation, IDocumentLocation) Removes a target set of content from the document. Declaration Task RemoveContentAsync(VsDocument source, IDocumentLocation startLocation, IDocumentLocation endLocation) Parameters Type Name Description VsDocument source Document to remove content from. IDocumentLocation startLocation The starting position within the document to remove content from. IDocumentLocation endLocation The ending position within the document to remove content form. Returns Type Description Task | Improve this Doc View Source ReplaceContentAsync(VsDocument, String) Replaces all the content within the document. Declaration Task ReplaceContentAsync(VsDocument source, string content) Parameters Type Name Description VsDocument source The target document to have content replaced. String content Content to replace the existing content in the document. Returns Type Description Task | Improve this Doc View Source ReplaceContentAsync(VsDocument, String, IDocumentLocation, IDocumentLocation) Replaces all the content within the document. Declaration Task ReplaceContentAsync(VsDocument source, string content, IDocumentLocation startLocation, IDocumentLocation endLocation) Parameters Type Name Description VsDocument source The target document to have content replaced. String content Content to replace the existing content in the document. IDocumentLocation startLocation The starting position within the document to replace content. IDocumentLocation endLocation The ending location within the document to replace content. Returns Type Description Task"
  },
  "api/CodeFactory.VisualStudio.IVsFactoryCommand-1.html": {
    "href": "api/CodeFactory.VisualStudio.IVsFactoryCommand-1.html",
    "title": "Interface IVsFactoryCommand<TModel> | CodeFactory Guidance",
    "keywords": "Interface IVsFactoryCommand<TModel> Common implementation all code factory commands for visual studio must display. Inherited Members IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType ICommand<TModel>.EnableCommandAsync(TModel) ICommand<TModel>.ExecuteCommandAsync(TModel) Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public interface IVsFactoryCommand<TModel> : IVsCommandInformation, ICommand<TModel> where TModel : class Type Parameters Name Description TModel The target mode that will be returned by this code factory command. Properties | Improve this Doc View Source VisualStudioActions Global visual studio commands that can be accessed from this visual studio command. Declaration IVsActions VisualStudioActions { get; } Property Value Type Description IVsActions"
  },
  "api/CodeFactory.VisualStudio.IVsModel.html": {
    "href": "api/CodeFactory.VisualStudio.IVsModel.html",
    "title": "Interface IVsModel | CodeFactory Guidance",
    "keywords": "Interface IVsModel Inherited Members IModel<VisualStudioModelType>.IsLoaded IModel<VisualStudioModelType>.HasErrors IModel<VisualStudioModelType>.ModelErrors IModel<VisualStudioModelType>.ModelType Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public interface IVsModel : IModel<VisualStudioModelType> Properties | Improve this Doc View Source Name The name of the visual studio model. Declaration string Name { get; } Property Value Type Description String"
  },
  "api/CodeFactory.VisualStudio.IVsProject.html": {
    "href": "api/CodeFactory.VisualStudio.IVsProject.html",
    "title": "Interface IVsProject | CodeFactory Guidance",
    "keywords": "Interface IVsProject Definition of a visual studio project model information. Inherited Members IVsModel.Name IModel<VisualStudioModelType>.IsLoaded IModel<VisualStudioModelType>.HasErrors IModel<VisualStudioModelType>.ModelErrors IModel<VisualStudioModelType>.ModelType IParent.HasParent IChildren.HasChildren Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public interface IVsProject : IVsModel, IModel<VisualStudioModelType>, IParent, IChildren Properties | Improve this Doc View Source DefaultNamespace The default namespace for the project if it support .net framework or .net core. Otherwise this will be null. Declaration string DefaultNamespace { get; } Property Value Type Description String | Improve this Doc View Source LegacyProjectModel Flag that determines if this visual studio project uses the legacy project model. If so then only basic capabilities and references will be available through code factory. Declaration bool LegacyProjectModel { get; } Property Value Type Description Boolean | Improve this Doc View Source Path The fully qualified path to the project file name. Declaration string Path { get; } Property Value Type Description String | Improve this Doc View Source ProjectLanguages The project languages that are supported in this project. Declaration IReadOnlyList<ProjectLanguage> ProjectLanguages { get; } Property Value Type Description IReadOnlyList < ProjectLanguage >"
  },
  "api/CodeFactory.VisualStudio.IVsProjectActions.html": {
    "href": "api/CodeFactory.VisualStudio.IVsProjectActions.html",
    "title": "Interface IVsProjectActions | CodeFactory Guidance",
    "keywords": "Interface IVsProjectActions Visual studio actions that support the IVsProject model. Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public interface IVsProjectActions Methods | Improve this Doc View Source AddDocumentAsync(VsProject, String, String) Adds a project document to the root of the project. Declaration Task<VsDocument> AddDocumentAsync(VsProject source, string fileName, string content = null) Parameters Type Name Description VsProject source The project to be added to. String fileName The file name of the document. This should be the name only with no file path. String content The content that will be initially added to the document. This is an optional parameter. Returns Type Description Task < VsDocument > The created project document. | Improve this Doc View Source AddExistingDocumentAsync(VsProject, String) Adds an existing document to the project. Declaration Task<VsDocument> AddExistingDocumentAsync(VsProject source, string fileName) Parameters Type Name Description VsProject source The project to be added to. String fileName The file name for the document. This should be the file name only with extension. The file must already be in the projects folder. Returns Type Description Task < VsDocument > The model of the created project document. | Improve this Doc View Source AddProjectFolderAsync(VsProject, String) Adds a project folder to the root of the project. Declaration Task<VsProjectFolder> AddProjectFolderAsync(VsProject source, string folderName) Parameters Type Name Description VsProject source The project to be added to. String folderName The name of the project folder. This should be the name only with no path. Returns Type Description Task < VsProjectFolder > The created project folder. | Improve this Doc View Source GetChildrenAsync(VsProject, Boolean, Boolean) Get all the children that are direct children of the project. Declaration Task<IReadOnlyList<VsModel>> GetChildrenAsync(VsProject source, bool allChildren, bool loadSourceCode = false) Parameters Type Name Description VsProject source the project to get the children from. Boolean allChildren Flag that determines if it should return all children of the project and not just the top level children. Boolean loadSourceCode Flag that determines if code factory managed source code models should be loaded instead of the standard VsDocument model. Returns Type Description Task < IReadOnlyList < VsModel >> The children of the project, if no children are found and empty enumeration will be returned. | Improve this Doc View Source GetParentAsync(VsProject) Gets the parent solution folder that holds the project. Declaration Task<VsSolutionFolder> GetParentAsync(VsProject source) Parameters Type Name Description VsProject source Project to get the parent for. Returns Type Description Task < VsSolutionFolder > Returns a solution folder if the project has a parent or null if the project has no parent. | Improve this Doc View Source GetReferencedProjects(VsProject) Get the VsProject models for all projects that are referenced by this project. Declaration Task<IReadOnlyList<VsProject>> GetReferencedProjects(VsProject source) Parameters Type Name Description VsProject source Source project to get referenced projects from. Returns Type Description Task < IReadOnlyList < VsProject >> Readonly list of the referenced projects or an empty list if there is no referenced projects. | Improve this Doc View Source GetReferencesAsync(VsProject) Gets the references assigned to this project. Declaration Task<IReadOnlyList<VsReference>> GetReferencesAsync(VsProject source) Parameters Type Name Description VsProject source The source project to get the references from. Returns Type Description Task < IReadOnlyList < VsReference >> Readonly list of the references."
  },
  "api/CodeFactory.VisualStudio.IVsProjectFolder.html": {
    "href": "api/CodeFactory.VisualStudio.IVsProjectFolder.html",
    "title": "Interface IVsProjectFolder | CodeFactory Guidance",
    "keywords": "Interface IVsProjectFolder Definition of a visual studio project folder model information. Inherited Members IVsModel.Name IModel<VisualStudioModelType>.IsLoaded IModel<VisualStudioModelType>.HasErrors IModel<VisualStudioModelType>.ModelErrors IModel<VisualStudioModelType>.ModelType IParent.HasParent IChildren.HasChildren Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public interface IVsProjectFolder : IVsModel, IModel<VisualStudioModelType>, IParent, IChildren Properties | Improve this Doc View Source Path the fully qualified path to the project folder. Declaration string Path { get; } Property Value Type Description String"
  },
  "api/CodeFactory.VisualStudio.IVsProjectFolderActions.html": {
    "href": "api/CodeFactory.VisualStudio.IVsProjectFolderActions.html",
    "title": "Interface IVsProjectFolderActions | CodeFactory Guidance",
    "keywords": "Interface IVsProjectFolderActions Visual studio actions that support the IVsProjectFolder model. Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public interface IVsProjectFolderActions Methods | Improve this Doc View Source AddDocumentAsync(VsProjectFolder, String, String) Adds a document to the project folder. Declaration Task<VsDocument> AddDocumentAsync(VsProjectFolder source, string fileName, string content = null) Parameters Type Name Description VsProjectFolder source The project folder to add the document to. String fileName The file name for the document. This should be the file name only with extension. String content The content to be added to the document once its added. Note, this is an optional parameter. Returns Type Description Task < VsDocument > The model of the created project document. | Improve this Doc View Source AddExistingDocumentAsync(VsProjectFolder, String) Adds an existing document to the project folder. Declaration Task<VsDocument> AddExistingDocumentAsync(VsProjectFolder source, string fileName) Parameters Type Name Description VsProjectFolder source The project folder to add the document to. String fileName The file name for the document. This should be the file name only with extension. The file must already be in the project folder. Returns Type Description Task < VsDocument > The model of the created project document. | Improve this Doc View Source AddProjectFolderAsync(VsProjectFolder, String) Adds a new project folder under the current project folder. Declaration Task<VsProjectFolder> AddProjectFolderAsync(VsProjectFolder source, string folderName) Parameters Type Name Description VsProjectFolder source The project folder to add to. String folderName The name of the project folder. The project folder name should be the name only no path. Returns Type Description Task < VsProjectFolder > The model for the created project folder. | Improve this Doc View Source DeleteAsync(VsProjectFolder) Deletes the project folder. Declaration Task<bool> DeleteAsync(VsProjectFolder source) Parameters Type Name Description VsProjectFolder source The project folder to be deleted. Returns Type Description Task < Boolean > Flag determining if the folder was deleted, True for deleted and false if the folder could not be deleted. | Improve this Doc View Source GetChildrenAsync(VsProjectFolder, Boolean, Boolean) Gets the IVsModel of the items that are direct children of this project folder. Declaration Task<IReadOnlyList<VsModel>> GetChildrenAsync(VsProjectFolder source, bool allChildren, bool loadSourceCode = false) Parameters Type Name Description VsProjectFolder source The project folder to get children from. Boolean allChildren Flag that determines if all children not just the first level children of the project folder. Boolean loadSourceCode Flag that determines if code factory managed source code models should be loaded instead of the standard VsDocument model. Returns Type Description Task < IReadOnlyList < VsModel >> Readonly list of the children that belong to this project folder. If no children are found an empty readonly list will be returned. | Improve this Doc View Source GetCSharpNamespaceAsync(VsProjectFolder) Gets the target namespace for a document that support c# language to be placed in this folder. Declaration Task<string> GetCSharpNamespaceAsync(VsProjectFolder source) Parameters Type Name Description VsProjectFolder source The project folder model to get the namespace for. Returns Type Description Task < String > The fully qualified namespace if the project is a c# project that supports this project folder. Otherwise null will be returned. | Improve this Doc View Source GetParentAsync(VsProjectFolder) Gets the parent visual studio model that is the parent of this Project folder. Declaration Task<VsModel> GetParentAsync(VsProjectFolder source) Parameters Type Name Description VsProjectFolder source The project folder to get the parent. Returns Type Description Task < VsModel > The visual studio model of the parent or null if the project folder does not have a parent. | Improve this Doc View Source RemoveAsync(VsProjectFolder) Removes the project folder from visual studio, but does not delete it from the file system. Declaration Task<bool> RemoveAsync(VsProjectFolder source) Parameters Type Name Description VsProjectFolder source The project folder to be removed. Returns Type Description Task < Boolean > Flag determining if the folder was removed, True for removed and false if the folder could not be removed."
  },
  "api/CodeFactory.VisualStudio.IVsReference.html": {
    "href": "api/CodeFactory.VisualStudio.IVsReference.html",
    "title": "Interface IVsReference | CodeFactory Guidance",
    "keywords": "Interface IVsReference Definition of a visual studio project reference model information. Inherited Members IVsModel.Name IModel<VisualStudioModelType>.IsLoaded IModel<VisualStudioModelType>.HasErrors IModel<VisualStudioModelType>.ModelErrors IModel<VisualStudioModelType>.ModelType Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public interface IVsReference : IVsModel, IModel<VisualStudioModelType> Properties | Improve this Doc View Source Aliases Readonly list of the aliases assigned to this reference. Declaration IReadOnlyList<string> Aliases { get; } Property Value Type Description IReadOnlyList < String > | Improve this Doc View Source FilePath The fully qualified path to the source reference. Declaration string FilePath { get; } Property Value Type Description String | Improve this Doc View Source HasAliases Flag that determines if the reference has aliases. Declaration bool HasAliases { get; } Property Value Type Description Boolean | Improve this Doc View Source Type The type of the project reference. Declaration ProjectReferenceType Type { get; } Property Value Type Description ProjectReferenceType"
  },
  "api/CodeFactory.VisualStudio.IVsReferenceActions.html": {
    "href": "api/CodeFactory.VisualStudio.IVsReferenceActions.html",
    "title": "Interface IVsReferenceActions | CodeFactory Guidance",
    "keywords": "Interface IVsReferenceActions Visual studio actions that support the IVsReference model. Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public interface IVsReferenceActions Methods | Improve this Doc View Source GetReferencedProjectAsync(VsReference) Gets the VsProject model for the project that represents this reference. Declaration Task<VsProject> GetReferencedProjectAsync(VsReference source) Parameters Type Name Description VsReference source The project reference to load. Returns Type Description Task < VsProject > The loaded project model or null if the project reference does not support a project based reference."
  },
  "api/CodeFactory.VisualStudio.IVsSolution.html": {
    "href": "api/CodeFactory.VisualStudio.IVsSolution.html",
    "title": "Interface IVsSolution | CodeFactory Guidance",
    "keywords": "Interface IVsSolution Model of the solution that is currently loaded in visual studio. Inherited Members IVsModel.Name IModel<VisualStudioModelType>.IsLoaded IModel<VisualStudioModelType>.HasErrors IModel<VisualStudioModelType>.ModelErrors IModel<VisualStudioModelType>.ModelType IChildren.HasChildren Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public interface IVsSolution : IVsModel, IModel<VisualStudioModelType>, IChildren Properties | Improve this Doc View Source Path The fully qualified path to the solution file name. Declaration string Path { get; } Property Value Type Description String"
  },
  "api/CodeFactory.VisualStudio.IVsSolutionActions.html": {
    "href": "api/CodeFactory.VisualStudio.IVsSolutionActions.html",
    "title": "Interface IVsSolutionActions | CodeFactory Guidance",
    "keywords": "Interface IVsSolutionActions Actions that can be used with the a IVsSolution model. Inherited Members IVsActions.GetSolutionAsync() IVsActions.SolutionActions IVsActions.SolutionFolderActions IVsActions.ProjectActions IVsActions.ProjectReferenceActions IVsActions.ProjectFolderActions IVsActions.DocumentActions IVsActions.UserInterfaceActions IVsActions.SourceActions Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public interface IVsSolutionActions : IVsActions Methods | Improve this Doc View Source CreateSolutionFolderAsync(VsSolution, String) Creates a new solution folder for the target solution. Declaration Task<VsSolutionFolder> CreateSolutionFolderAsync(VsSolution source, string name) Parameters Type Name Description VsSolution source The solution to add the solution folder to. String name The name of the solution folder to be added. Returns Type Description Task < VsSolutionFolder > Returns the solution folder. | Improve this Doc View Source GetChildrenAsync(VsSolution, Boolean) Gets the solution folders and projects that belong to the solution. Declaration Task<IReadOnlyList<VsModel>> GetChildrenAsync(VsSolution source, bool allChildren) Parameters Type Name Description VsSolution source The solution model to get the children from. Boolean allChildren Get all children not just the first children of the solution. Returns Type Description Task < IReadOnlyList < VsModel >> Returns a readonly list of the children to the solution. If there are no children an empty list will be returned. | Improve this Doc View Source GetProjectsAsync(VsSolution, Boolean) Gets the projects for the solution. Declaration Task<IReadOnlyList<VsProject>> GetProjectsAsync(VsSolution source, bool allChildren) Parameters Type Name Description VsSolution source The solution model to get the projects from. Boolean allChildren Get all children not just the first children of the solution. Returns Type Description Task < IReadOnlyList < VsProject >> Returns all the projects that are part of the solution. Will return an empty list if no projects are found. | Improve this Doc View Source GetSolutionFoldersAsync(VsSolution, Boolean) Gets the solution folders for the solution. Declaration Task<IReadOnlyList<VsSolutionFolder>> GetSolutionFoldersAsync(VsSolution source, bool allChildren) Parameters Type Name Description VsSolution source The solution model to get the solution folders from. Boolean allChildren Get all children not just the first children of the solution. Returns Type Description Task < IReadOnlyList < VsSolutionFolder >> Returns a readonly of the solutions folders that are part of the solution. If there are no solution folders an empty list will be returned."
  },
  "api/CodeFactory.VisualStudio.IVsSolutionFolder.html": {
    "href": "api/CodeFactory.VisualStudio.IVsSolutionFolder.html",
    "title": "Interface IVsSolutionFolder | CodeFactory Guidance",
    "keywords": "Interface IVsSolutionFolder Model of a solution folder that is currently loaded in visual studio. Inherited Members IVsModel.Name IModel<VisualStudioModelType>.IsLoaded IModel<VisualStudioModelType>.HasErrors IModel<VisualStudioModelType>.ModelErrors IModel<VisualStudioModelType>.ModelType IParent.HasParent IChildren.HasChildren Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public interface IVsSolutionFolder : IVsModel, IModel<VisualStudioModelType>, IParent, IChildren"
  },
  "api/CodeFactory.VisualStudio.IVsSolutionFolderActions.html": {
    "href": "api/CodeFactory.VisualStudio.IVsSolutionFolderActions.html",
    "title": "Interface IVsSolutionFolderActions | CodeFactory Guidance",
    "keywords": "Interface IVsSolutionFolderActions Visual studio actions that support the IVsSolutionFolder model. Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public interface IVsSolutionFolderActions Methods | Improve this Doc View Source AddDocumentAsync(VsSolutionFolder, String, String) Creates a document that is hosted in the solution folder. Declaration Task<VsDocument> AddDocumentAsync(VsSolutionFolder source, string fileName, string content = null) Parameters Type Name Description VsSolutionFolder source The solution folder to add the document to. String fileName The name of the document to create. String content The content to add to the document. Returns Type Description Task < VsDocument > Instance of the new document. | Improve this Doc View Source AddExistingDocumentAsync(VsSolutionFolder, String) Adds an existing document to the solution folder. Declaration Task<VsDocument> AddExistingDocumentAsync(VsSolutionFolder source, string fileName) Parameters Type Name Description VsSolutionFolder source The solution folder to add the document to. String fileName The file name for the document. This should be the file name only with extension. The file must already be in the solution folder. Returns Type Description Task < VsDocument > The model of the created document. | Improve this Doc View Source AddSolutionFolder(VsSolutionFolder, String) Create a new solution folder under the current solution folder. Declaration Task<VsSolutionFolder> AddSolutionFolder(VsSolutionFolder source, string folderName) Parameters Type Name Description VsSolutionFolder source The solution folder that the new solution folder will be added to. String folderName The name of the solution folder. Returns Type Description Task < VsSolutionFolder > Instance of the new solution folder. | Improve this Doc View Source GetChildrenAsync(VsSolutionFolder, Boolean) Gets the children of the solution folder, this will return the files and projects that are part of the solution folder. Declaration Task<IReadOnlyList<VsModel>> GetChildrenAsync(VsSolutionFolder source, bool allChildren) Parameters Type Name Description VsSolutionFolder source The solution folder to get the children from. Boolean allChildren Flag that determines if all the direct children of the solution folder should also get there children. Returns Type Description Task < IReadOnlyList < VsModel >> Returns a readonly list of the children within this solution folder. Will return an empty list if there is no children. | Improve this Doc View Source GetParentAsync(VsSolutionFolder) Gets the parent solution folder. Declaration Task<VsSolutionFolder> GetParentAsync(VsSolutionFolder source) Parameters Type Name Description VsSolutionFolder source The solution folder to find the parent for. Returns Type Description Task < VsSolutionFolder > The parent solution folder model or null if there is no parent for this solution folder. | Improve this Doc View Source Remove(VsSolutionFolder) Removes the solution folder from the visual studio solution that is hosting the solution folder. Declaration Task<bool> Remove(VsSolutionFolder source) Parameters Type Name Description VsSolutionFolder source The solution folder that is to be removed from visual studio. Returns Type Description Task < Boolean > Boolean flag true - solution folder was been removed or false the folder is either already removed or could not be removed."
  },
  "api/CodeFactory.VisualStudio.IVsSourceActions.html": {
    "href": "api/CodeFactory.VisualStudio.IVsSourceActions.html",
    "title": "Interface IVsSourceActions | CodeFactory Guidance",
    "keywords": "Interface IVsSourceActions The visual studio actions that support source models. Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public interface IVsSourceActions Methods | Improve this Doc View Source LoadDocumentFromSourceAsync(ICsSource) Loads the IVsDocument model from the provided ICsSource model. Declaration Task<VsDocument> LoadDocumentFromSourceAsync(ICsSource source) Parameters Type Name Description ICsSource source Model to load the document from. Returns Type Description Task < VsDocument > Loaded document model. Exceptions Type Condition DocumentException Exception that occurs while loading the document."
  },
  "api/CodeFactory.VisualStudio.PathHelper.html": {
    "href": "api/CodeFactory.VisualStudio.PathHelper.html",
    "title": "Class PathHelper | CodeFactory Guidance",
    "keywords": "Class PathHelper Static helper class that contains functions to support path management with visual studio. Inheritance Object PathHelper Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public static class PathHelper Properties | Improve this Doc View Source InvalidPathNameCharacters The invalid characters not allowed in a path name. Declaration public static string InvalidPathNameCharacters { get; } Property Value Type Description String Methods | Improve this Doc View Source ContainsInvalidPathNameCharacter(String) Provided file name is checked to determine if it has Declaration public static bool ContainsInvalidPathNameCharacter(string path) Parameters Type Name Description String path The path to be evaluated. Returns Type Description Boolean True if invalid characters exists or false if the file does not have invalid characters."
  },
  "api/CodeFactory.VisualStudio.ProjectLanguage.html": {
    "href": "api/CodeFactory.VisualStudio.ProjectLanguage.html",
    "title": "Enum ProjectLanguage | CodeFactory Guidance",
    "keywords": "Enum ProjectLanguage Definition of the a language has compiler support within a target project. Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public enum ProjectLanguage Fields Name Description CSharp The project supports the compile of the C# programming language. FSharp The project supports the compile of the F# programming language JavaScript The project supports the compile of the java script programming language. TypeScript The project supports the compile of the type script programming language. Unknown Code factory could not determine the programming language. VisualBasic The project supports the compile of the visual basic programming language."
  },
  "api/CodeFactory.VisualStudio.ProjectReferenceType.html": {
    "href": "api/CodeFactory.VisualStudio.ProjectReferenceType.html",
    "title": "Enum ProjectReferenceType | CodeFactory Guidance",
    "keywords": "Enum ProjectReferenceType Enumeration Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public enum ProjectReferenceType Fields Name Description Assembly Reference is a direct assembly file that is referenced by the project. Com Reference is a com library. NuGet Reference comes from a direct external nuget feed. Project Reference is an existing project within the solution. Unknown The reference is of an unknown type."
  },
  "api/CodeFactory.VisualStudio.ProjectSystemException.html": {
    "href": "api/CodeFactory.VisualStudio.ProjectSystemException.html",
    "title": "Class ProjectSystemException | CodeFactory Guidance",
    "keywords": "Class ProjectSystemException Code factory exception that occurs when accessing visual studios project system. Inheritance Object Exception CodeFactoryException VisualStudioException ProjectSystemException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public class ProjectSystemException : VisualStudioException, ISerializable, _Exception Constructors | Improve this Doc View Source ProjectSystemException() Creates a visual studio project system code factory exception. Declaration public ProjectSystemException() | Improve this Doc View Source ProjectSystemException(String) Creates a visual studio project system code factory exception. Declaration public ProjectSystemException(string message) Parameters Type Name Description String message The error message to be captured by the exception | Improve this Doc View Source ProjectSystemException(String, Exception) Creates a visual studio project system code factory exception. Declaration public ProjectSystemException(string message, Exception innerException) Parameters Type Name Description String message The error message to be captured by the exception Exception innerException The inner exception that occurred and to be added to this exception. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/CodeFactory.VisualStudio.SolutionExplorer.CSharpSourceCommandBase.html": {
    "href": "api/CodeFactory.VisualStudio.SolutionExplorer.CSharpSourceCommandBase.html",
    "title": "Class CSharpSourceCommandBase | CodeFactory Guidance",
    "keywords": "Class CSharpSourceCommandBase Base implementation of the solution explorer command ICSharpSourceCommand Inheritance Object VsCommandBase < VsCSharpSource > CSharpSourceCommandBase Implements ICSharpSourceCommand IVsFactoryCommand < VsCSharpSource > IVsCommandInformation ICommand < VsCSharpSource > Inherited Members VsCommandBase<VsCSharpSource>._commandTitle VsCommandBase<VsCSharpSource>._commandDescription VsCommandBase<VsCSharpSource>._logger VsCommandBase<VsCSharpSource>.CommandTitle VsCommandBase<VsCSharpSource>.CommandDescription VsCommandBase<VsCSharpSource>.CommandType VsCommandBase<VsCSharpSource>.EnableCommandAsync(VsCSharpSource) VsCommandBase<VsCSharpSource>.ExecuteCommandAsync(VsCSharpSource) VsCommandBase<VsCSharpSource>.VisualStudioActions Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.VisualStudio.SolutionExplorer Assembly : CodeFactory.VisualStudio.dll Syntax public abstract class CSharpSourceCommandBase : VsCommandBase<VsCSharpSource>, ICSharpSourceCommand, IVsFactoryCommand<VsCSharpSource>, IVsCommandInformation, ICommand<VsCSharpSource> Constructors | Improve this Doc View Source CSharpSourceCommandBase(ILogger, IVsActions, String, String) Declaration protected CSharpSourceCommandBase(ILogger logger, IVsActions vsActions, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger IVsActions vsActions String commandTitle String commandDescription Implements ICSharpSourceCommand IVsFactoryCommand<TModel> IVsCommandInformation ICommand<TModel>"
  },
  "api/CodeFactory.VisualStudio.SolutionExplorer.html": {
    "href": "api/CodeFactory.VisualStudio.SolutionExplorer.html",
    "title": "Namespace CodeFactory.VisualStudio.SolutionExplorer | CodeFactory Guidance",
    "keywords": "Namespace CodeFactory.VisualStudio.SolutionExplorer Classes CSharpSourceCommandBase Base implementation of the solution explorer command ICSharpSourceCommand ProjectCommandBase Base implementation of the solution explorer command IProjectCommand ProjectDocumentCommandBase Base implementation of the solution explorer command IProjectDocumentCommand ProjectFolderCommandBase Base implementation of the solution explorer command IProjectFolderCommand SolutionCommandBase Base implementation of the solution explorer command ISolutionCommand SolutionDocumentCommandBase Base implementation of the solution explorer command ISolutionDocumentCommand SolutionFolderCommandBase Base implementation of the solution explorer command ISolutionFolderCommand Interfaces ICSharpSourceCommand Code factory command that is triggered from the context menu of a document that hosts a c# code file in the solution explorer window. IProjectCommand Code factory command that is triggered from the context menu of a project in the solution explorer window. IProjectDocumentCommand Code factory command that is triggered from the context menu of a project document in the solution explorer window. IProjectFolderCommand Code factory command that is triggered from the context menu of a project folder in the solution explorer window. ISolutionCommand Code factory command that triggers from the context menu of solution node in solution explorer. ISolutionDocumentCommand Code factory command that is triggered from the context menu of a solution document in the solution explorer window. ISolutionFolderCommand Code factory command that is triggered from the context menu of the a solution folder in the solution explorer window."
  },
  "api/CodeFactory.VisualStudio.SolutionExplorer.ICSharpSourceCommand.html": {
    "href": "api/CodeFactory.VisualStudio.SolutionExplorer.ICSharpSourceCommand.html",
    "title": "Interface ICSharpSourceCommand | CodeFactory Guidance",
    "keywords": "Interface ICSharpSourceCommand Code factory command that is triggered from the context menu of a document that hosts a c# code file in the solution explorer window. Inherited Members IVsFactoryCommand<VsCSharpSource>.VisualStudioActions IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType ICommand<VsCSharpSource>.EnableCommandAsync(VsCSharpSource) ICommand<VsCSharpSource>.ExecuteCommandAsync(VsCSharpSource) Namespace : CodeFactory.VisualStudio.SolutionExplorer Assembly : CodeFactory.VisualStudio.dll Syntax public interface ICSharpSourceCommand : IVsFactoryCommand<VsCSharpSource>, IVsCommandInformation, ICommand<VsCSharpSource>"
  },
  "api/CodeFactory.VisualStudio.SolutionExplorer.IProjectCommand.html": {
    "href": "api/CodeFactory.VisualStudio.SolutionExplorer.IProjectCommand.html",
    "title": "Interface IProjectCommand | CodeFactory Guidance",
    "keywords": "Interface IProjectCommand Code factory command that is triggered from the context menu of a project in the solution explorer window. Inherited Members IVsFactoryCommand<VsProject>.VisualStudioActions IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType ICommand<VsProject>.EnableCommandAsync(VsProject) ICommand<VsProject>.ExecuteCommandAsync(VsProject) Namespace : CodeFactory.VisualStudio.SolutionExplorer Assembly : CodeFactory.VisualStudio.dll Syntax public interface IProjectCommand : IVsFactoryCommand<VsProject>, IVsCommandInformation, ICommand<VsProject>"
  },
  "api/CodeFactory.VisualStudio.SolutionExplorer.IProjectDocumentCommand.html": {
    "href": "api/CodeFactory.VisualStudio.SolutionExplorer.IProjectDocumentCommand.html",
    "title": "Interface IProjectDocumentCommand | CodeFactory Guidance",
    "keywords": "Interface IProjectDocumentCommand Code factory command that is triggered from the context menu of a project document in the solution explorer window. Inherited Members IVsFactoryCommand<VsDocument>.VisualStudioActions IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType ICommand<VsDocument>.EnableCommandAsync(VsDocument) ICommand<VsDocument>.ExecuteCommandAsync(VsDocument) Namespace : CodeFactory.VisualStudio.SolutionExplorer Assembly : CodeFactory.VisualStudio.dll Syntax public interface IProjectDocumentCommand : IVsFactoryCommand<VsDocument>, IVsCommandInformation, ICommand<VsDocument>"
  },
  "api/CodeFactory.VisualStudio.SolutionExplorer.IProjectFolderCommand.html": {
    "href": "api/CodeFactory.VisualStudio.SolutionExplorer.IProjectFolderCommand.html",
    "title": "Interface IProjectFolderCommand | CodeFactory Guidance",
    "keywords": "Interface IProjectFolderCommand Code factory command that is triggered from the context menu of a project folder in the solution explorer window. Inherited Members IVsFactoryCommand<VsProjectFolder>.VisualStudioActions IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType ICommand<VsProjectFolder>.EnableCommandAsync(VsProjectFolder) ICommand<VsProjectFolder>.ExecuteCommandAsync(VsProjectFolder) Namespace : CodeFactory.VisualStudio.SolutionExplorer Assembly : CodeFactory.VisualStudio.dll Syntax public interface IProjectFolderCommand : IVsFactoryCommand<VsProjectFolder>, IVsCommandInformation, ICommand<VsProjectFolder>"
  },
  "api/CodeFactory.VisualStudio.SolutionExplorer.ISolutionCommand.html": {
    "href": "api/CodeFactory.VisualStudio.SolutionExplorer.ISolutionCommand.html",
    "title": "Interface ISolutionCommand | CodeFactory Guidance",
    "keywords": "Interface ISolutionCommand Code factory command that triggers from the context menu of solution node in solution explorer. Inherited Members IVsFactoryCommand<VsSolution>.VisualStudioActions IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType ICommand<VsSolution>.EnableCommandAsync(VsSolution) ICommand<VsSolution>.ExecuteCommandAsync(VsSolution) Namespace : CodeFactory.VisualStudio.SolutionExplorer Assembly : CodeFactory.VisualStudio.dll Syntax public interface ISolutionCommand : IVsFactoryCommand<VsSolution>, IVsCommandInformation, ICommand<VsSolution>"
  },
  "api/CodeFactory.VisualStudio.SolutionExplorer.ISolutionDocumentCommand.html": {
    "href": "api/CodeFactory.VisualStudio.SolutionExplorer.ISolutionDocumentCommand.html",
    "title": "Interface ISolutionDocumentCommand | CodeFactory Guidance",
    "keywords": "Interface ISolutionDocumentCommand Code factory command that is triggered from the context menu of a solution document in the solution explorer window. Inherited Members IVsFactoryCommand<VsDocument>.VisualStudioActions IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType ICommand<VsDocument>.EnableCommandAsync(VsDocument) ICommand<VsDocument>.ExecuteCommandAsync(VsDocument) Namespace : CodeFactory.VisualStudio.SolutionExplorer Assembly : CodeFactory.VisualStudio.dll Syntax public interface ISolutionDocumentCommand : IVsFactoryCommand<VsDocument>, IVsCommandInformation, ICommand<VsDocument>"
  },
  "api/CodeFactory.VisualStudio.SolutionExplorer.ISolutionFolderCommand.html": {
    "href": "api/CodeFactory.VisualStudio.SolutionExplorer.ISolutionFolderCommand.html",
    "title": "Interface ISolutionFolderCommand | CodeFactory Guidance",
    "keywords": "Interface ISolutionFolderCommand Code factory command that is triggered from the context menu of the a solution folder in the solution explorer window. Inherited Members IVsFactoryCommand<VsSolutionFolder>.VisualStudioActions IVsCommandInformation.CommandTitle IVsCommandInformation.CommandDescription IVsCommandInformation.CommandType ICommand<VsSolutionFolder>.EnableCommandAsync(VsSolutionFolder) ICommand<VsSolutionFolder>.ExecuteCommandAsync(VsSolutionFolder) Namespace : CodeFactory.VisualStudio.SolutionExplorer Assembly : CodeFactory.VisualStudio.dll Syntax public interface ISolutionFolderCommand : IVsFactoryCommand<VsSolutionFolder>, IVsCommandInformation, ICommand<VsSolutionFolder>"
  },
  "api/CodeFactory.VisualStudio.SolutionExplorer.ProjectCommandBase.html": {
    "href": "api/CodeFactory.VisualStudio.SolutionExplorer.ProjectCommandBase.html",
    "title": "Class ProjectCommandBase | CodeFactory Guidance",
    "keywords": "Class ProjectCommandBase Base implementation of the solution explorer command IProjectCommand Inheritance Object VsCommandBase < VsProject > ProjectCommandBase Implements IProjectCommand IVsFactoryCommand < VsProject > IVsCommandInformation ICommand < VsProject > Inherited Members VsCommandBase<VsProject>._commandTitle VsCommandBase<VsProject>._commandDescription VsCommandBase<VsProject>._logger VsCommandBase<VsProject>.CommandTitle VsCommandBase<VsProject>.CommandDescription VsCommandBase<VsProject>.CommandType VsCommandBase<VsProject>.EnableCommandAsync(VsProject) VsCommandBase<VsProject>.ExecuteCommandAsync(VsProject) VsCommandBase<VsProject>.VisualStudioActions Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.VisualStudio.SolutionExplorer Assembly : CodeFactory.VisualStudio.dll Syntax public abstract class ProjectCommandBase : VsCommandBase<VsProject>, IProjectCommand, IVsFactoryCommand<VsProject>, IVsCommandInformation, ICommand<VsProject> Constructors | Improve this Doc View Source ProjectCommandBase(ILogger, IVsActions, String, String) Declaration protected ProjectCommandBase(ILogger logger, IVsActions vsActions, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger IVsActions vsActions String commandTitle String commandDescription Implements IProjectCommand IVsFactoryCommand<TModel> IVsCommandInformation ICommand<TModel>"
  },
  "api/CodeFactory.VisualStudio.SolutionExplorer.ProjectDocumentCommandBase.html": {
    "href": "api/CodeFactory.VisualStudio.SolutionExplorer.ProjectDocumentCommandBase.html",
    "title": "Class ProjectDocumentCommandBase | CodeFactory Guidance",
    "keywords": "Class ProjectDocumentCommandBase Base implementation of the solution explorer command IProjectDocumentCommand Inheritance Object VsCommandBase < VsDocument > ProjectDocumentCommandBase Implements IProjectDocumentCommand IVsFactoryCommand < VsDocument > IVsCommandInformation ICommand < VsDocument > Inherited Members VsCommandBase<VsDocument>._commandTitle VsCommandBase<VsDocument>._commandDescription VsCommandBase<VsDocument>._logger VsCommandBase<VsDocument>.CommandTitle VsCommandBase<VsDocument>.CommandDescription VsCommandBase<VsDocument>.CommandType VsCommandBase<VsDocument>.EnableCommandAsync(VsDocument) VsCommandBase<VsDocument>.ExecuteCommandAsync(VsDocument) VsCommandBase<VsDocument>.VisualStudioActions Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.VisualStudio.SolutionExplorer Assembly : CodeFactory.VisualStudio.dll Syntax public abstract class ProjectDocumentCommandBase : VsCommandBase<VsDocument>, IProjectDocumentCommand, IVsFactoryCommand<VsDocument>, IVsCommandInformation, ICommand<VsDocument> Constructors | Improve this Doc View Source ProjectDocumentCommandBase(ILogger, IVsActions, String, String) Declaration protected ProjectDocumentCommandBase(ILogger logger, IVsActions vsActions, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger IVsActions vsActions String commandTitle String commandDescription Implements IProjectDocumentCommand IVsFactoryCommand<TModel> IVsCommandInformation ICommand<TModel>"
  },
  "api/CodeFactory.VisualStudio.SolutionExplorer.ProjectFolderCommandBase.html": {
    "href": "api/CodeFactory.VisualStudio.SolutionExplorer.ProjectFolderCommandBase.html",
    "title": "Class ProjectFolderCommandBase | CodeFactory Guidance",
    "keywords": "Class ProjectFolderCommandBase Base implementation of the solution explorer command IProjectFolderCommand Inheritance Object VsCommandBase < VsProjectFolder > ProjectFolderCommandBase Implements IProjectFolderCommand IVsFactoryCommand < VsProjectFolder > IVsCommandInformation ICommand < VsProjectFolder > Inherited Members VsCommandBase<VsProjectFolder>._commandTitle VsCommandBase<VsProjectFolder>._commandDescription VsCommandBase<VsProjectFolder>._logger VsCommandBase<VsProjectFolder>.CommandTitle VsCommandBase<VsProjectFolder>.CommandDescription VsCommandBase<VsProjectFolder>.CommandType VsCommandBase<VsProjectFolder>.EnableCommandAsync(VsProjectFolder) VsCommandBase<VsProjectFolder>.ExecuteCommandAsync(VsProjectFolder) VsCommandBase<VsProjectFolder>.VisualStudioActions Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.VisualStudio.SolutionExplorer Assembly : CodeFactory.VisualStudio.dll Syntax public abstract class ProjectFolderCommandBase : VsCommandBase<VsProjectFolder>, IProjectFolderCommand, IVsFactoryCommand<VsProjectFolder>, IVsCommandInformation, ICommand<VsProjectFolder> Constructors | Improve this Doc View Source ProjectFolderCommandBase(ILogger, IVsActions, String, String) Declaration protected ProjectFolderCommandBase(ILogger logger, IVsActions vsActions, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger IVsActions vsActions String commandTitle String commandDescription Implements IProjectFolderCommand IVsFactoryCommand<TModel> IVsCommandInformation ICommand<TModel>"
  },
  "api/CodeFactory.VisualStudio.SolutionExplorer.SolutionCommandBase.html": {
    "href": "api/CodeFactory.VisualStudio.SolutionExplorer.SolutionCommandBase.html",
    "title": "Class SolutionCommandBase | CodeFactory Guidance",
    "keywords": "Class SolutionCommandBase Base implementation of the solution explorer command ISolutionCommand Inheritance Object VsCommandBase < VsSolution > SolutionCommandBase Implements ISolutionCommand IVsFactoryCommand < VsSolution > IVsCommandInformation ICommand < VsSolution > Inherited Members VsCommandBase<VsSolution>._commandTitle VsCommandBase<VsSolution>._commandDescription VsCommandBase<VsSolution>._logger VsCommandBase<VsSolution>.CommandTitle VsCommandBase<VsSolution>.CommandDescription VsCommandBase<VsSolution>.CommandType VsCommandBase<VsSolution>.EnableCommandAsync(VsSolution) VsCommandBase<VsSolution>.ExecuteCommandAsync(VsSolution) VsCommandBase<VsSolution>.VisualStudioActions Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.VisualStudio.SolutionExplorer Assembly : CodeFactory.VisualStudio.dll Syntax public abstract class SolutionCommandBase : VsCommandBase<VsSolution>, ISolutionCommand, IVsFactoryCommand<VsSolution>, IVsCommandInformation, ICommand<VsSolution> Constructors | Improve this Doc View Source SolutionCommandBase(ILogger, IVsActions, String, String) Declaration protected SolutionCommandBase(ILogger logger, IVsActions vsActions, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger IVsActions vsActions String commandTitle String commandDescription Implements ISolutionCommand IVsFactoryCommand<TModel> IVsCommandInformation ICommand<TModel>"
  },
  "api/CodeFactory.VisualStudio.SolutionExplorer.SolutionDocumentCommandBase.html": {
    "href": "api/CodeFactory.VisualStudio.SolutionExplorer.SolutionDocumentCommandBase.html",
    "title": "Class SolutionDocumentCommandBase | CodeFactory Guidance",
    "keywords": "Class SolutionDocumentCommandBase Base implementation of the solution explorer command ISolutionDocumentCommand Inheritance Object VsCommandBase < VsDocument > SolutionDocumentCommandBase Implements ISolutionDocumentCommand IVsFactoryCommand < VsDocument > IVsCommandInformation ICommand < VsDocument > Inherited Members VsCommandBase<VsDocument>._commandTitle VsCommandBase<VsDocument>._commandDescription VsCommandBase<VsDocument>._logger VsCommandBase<VsDocument>.CommandTitle VsCommandBase<VsDocument>.CommandDescription VsCommandBase<VsDocument>.CommandType VsCommandBase<VsDocument>.EnableCommandAsync(VsDocument) VsCommandBase<VsDocument>.ExecuteCommandAsync(VsDocument) VsCommandBase<VsDocument>.VisualStudioActions Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.VisualStudio.SolutionExplorer Assembly : CodeFactory.VisualStudio.dll Syntax public abstract class SolutionDocumentCommandBase : VsCommandBase<VsDocument>, ISolutionDocumentCommand, IVsFactoryCommand<VsDocument>, IVsCommandInformation, ICommand<VsDocument> Constructors | Improve this Doc View Source SolutionDocumentCommandBase(ILogger, IVsActions, String, String) Declaration protected SolutionDocumentCommandBase(ILogger logger, IVsActions vsActions, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger IVsActions vsActions String commandTitle String commandDescription Implements ISolutionDocumentCommand IVsFactoryCommand<TModel> IVsCommandInformation ICommand<TModel>"
  },
  "api/CodeFactory.VisualStudio.SolutionExplorer.SolutionFolderCommandBase.html": {
    "href": "api/CodeFactory.VisualStudio.SolutionExplorer.SolutionFolderCommandBase.html",
    "title": "Class SolutionFolderCommandBase | CodeFactory Guidance",
    "keywords": "Class SolutionFolderCommandBase Base implementation of the solution explorer command ISolutionFolderCommand Inheritance Object VsCommandBase < VsSolutionFolder > SolutionFolderCommandBase Implements ISolutionFolderCommand IVsFactoryCommand < VsSolutionFolder > IVsCommandInformation ICommand < VsSolutionFolder > Inherited Members VsCommandBase<VsSolutionFolder>._commandTitle VsCommandBase<VsSolutionFolder>._commandDescription VsCommandBase<VsSolutionFolder>._logger VsCommandBase<VsSolutionFolder>.CommandTitle VsCommandBase<VsSolutionFolder>.CommandDescription VsCommandBase<VsSolutionFolder>.CommandType VsCommandBase<VsSolutionFolder>.EnableCommandAsync(VsSolutionFolder) VsCommandBase<VsSolutionFolder>.ExecuteCommandAsync(VsSolutionFolder) VsCommandBase<VsSolutionFolder>.VisualStudioActions Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.VisualStudio.SolutionExplorer Assembly : CodeFactory.VisualStudio.dll Syntax public abstract class SolutionFolderCommandBase : VsCommandBase<VsSolutionFolder>, ISolutionFolderCommand, IVsFactoryCommand<VsSolutionFolder>, IVsCommandInformation, ICommand<VsSolutionFolder> Constructors | Improve this Doc View Source SolutionFolderCommandBase(ILogger, IVsActions, String, String) Declaration protected SolutionFolderCommandBase(ILogger logger, IVsActions vsActions, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger IVsActions vsActions String commandTitle String commandDescription Implements ISolutionFolderCommand IVsFactoryCommand<TModel> IVsCommandInformation ICommand<TModel>"
  },
  "api/CodeFactory.VisualStudio.SolutionExplorerException.html": {
    "href": "api/CodeFactory.VisualStudio.SolutionExplorerException.html",
    "title": "Class SolutionExplorerException | CodeFactory Guidance",
    "keywords": "Class SolutionExplorerException Exception that is raised when there are problem accessing needed resources from visual studio's solution explorer. Inheritance Object Exception CodeFactoryException VisualStudioException SolutionExplorerException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public class SolutionExplorerException : VisualStudioException, ISerializable, _Exception Constructors | Improve this Doc View Source SolutionExplorerException() Creates a solution explorer code factory exception. Declaration public SolutionExplorerException() | Improve this Doc View Source SolutionExplorerException(String) Creates a solution explorer code factory exception. Declaration public SolutionExplorerException(string message) Parameters Type Name Description String message The error message to be captured by the exception | Improve this Doc View Source SolutionExplorerException(String, Exception) Creates a solution explorer code factory exception. Declaration public SolutionExplorerException(string message, Exception innerException) Parameters Type Name Description String message The error message to be captured by the exception Exception innerException The inner exception that occurred and to be added to this exception. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/CodeFactory.VisualStudio.UI.html": {
    "href": "api/CodeFactory.VisualStudio.UI.html",
    "title": "Namespace CodeFactory.VisualStudio.UI | CodeFactory Guidance",
    "keywords": "Namespace CodeFactory.VisualStudio.UI Classes VsUserControl The base implementation of a WPF UserControl that has been extended to provide direct access to visual studio for code factory integration. Interfaces IVsUIActions Definition of the user interface actions that are supported in visual studio."
  },
  "api/CodeFactory.VisualStudio.UI.IVsUIActions.html": {
    "href": "api/CodeFactory.VisualStudio.UI.IVsUIActions.html",
    "title": "Interface IVsUIActions | CodeFactory Guidance",
    "keywords": "Interface IVsUIActions Definition of the user interface actions that are supported in visual studio. Namespace : CodeFactory.VisualStudio.UI Assembly : CodeFactory.VisualStudio.dll Syntax public interface IVsUIActions Methods | Improve this Doc View Source CreateVsUserControlAsync<T>() Creates a new instance of a visual studio user control supported by code factory. This will load the IVsActions into the control as well as the logger that supports the user control. Declaration Task<T> CreateVsUserControlAsync<T>() where T : VsUserControl Returns Type Description Task <T> New instance of the target user control. Type Parameters Name Description T The type of visual studio user control to create. Exceptions Type Condition VisualStudioException Raises a visual studio error if there was a problem creating the user control. Review the internal exception for the source of the error. | Improve this Doc View Source ShowDialogWindowAsync(VsUserControl) Displays a dialog window in visual studio that hosts a user control that implements VsUserControl . This makes sure the dialog window is thread safe to be used with visual studio. Declaration Task<bool?> ShowDialogWindowAsync(VsUserControl userControl) Parameters Type Name Description VsUserControl userControl The instance of the user control that is to be hosted in the dialog window. Returns Type Description Task < Nullable < Boolean >> Returns the result for the window which returns a true if a close event occured, a false when a cancel event occured, or null if neither were triggered."
  },
  "api/CodeFactory.VisualStudio.UI.VsUserControl.html": {
    "href": "api/CodeFactory.VisualStudio.UI.VsUserControl.html",
    "title": "Class VsUserControl | CodeFactory Guidance",
    "keywords": "Class VsUserControl The base implementation of a WPF UserControl that has been extended to provide direct access to visual studio for code factory integration. Inheritance Object DispatcherObject DependencyObject Visual UIElement FrameworkElement Control ContentControl UserControl VsUserControl Implements IAnimatable IFrameworkInputElement IInputElement ISupportInitialize IQueryAmbient IAddChild Inherited Members UserControl.OnCreateAutomationPeer() ContentControl.ContentProperty ContentControl.HasContentProperty ContentControl.ContentTemplateProperty ContentControl.ContentTemplateSelectorProperty ContentControl.ContentStringFormatProperty ContentControl.IAddChild.AddChild(Object) ContentControl.AddChild(Object) ContentControl.IAddChild.AddText(String) ContentControl.AddText(String) ContentControl.OnContentChanged(Object, Object) ContentControl.OnContentTemplateChanged(DataTemplate, DataTemplate) ContentControl.OnContentTemplateSelectorChanged(DataTemplateSelector, DataTemplateSelector) ContentControl.OnContentStringFormatChanged(String, String) ContentControl.LogicalChildren ContentControl.Content ContentControl.HasContent ContentControl.ContentTemplate ContentControl.ContentTemplateSelector ContentControl.ContentStringFormat Control.BorderBrushProperty Control.BorderThicknessProperty Control.BackgroundProperty Control.ForegroundProperty Control.FontFamilyProperty Control.FontSizeProperty Control.FontStretchProperty Control.FontStyleProperty Control.FontWeightProperty Control.HorizontalContentAlignmentProperty Control.VerticalContentAlignmentProperty Control.TabIndexProperty Control.IsTabStopProperty Control.PaddingProperty Control.TemplateProperty Control.PreviewMouseDoubleClickEvent Control.MouseDoubleClickEvent Control.OnTemplateChanged(ControlTemplate, ControlTemplate) Control.ToString() Control.OnPreviewMouseDoubleClick(MouseButtonEventArgs) Control.OnMouseDoubleClick(MouseButtonEventArgs) Control.MeasureOverride(Size) Control.ArrangeOverride(Size) Control.BorderBrush Control.BorderThickness Control.Background Control.Foreground Control.FontFamily Control.FontSize Control.FontStretch Control.FontStyle Control.FontWeight Control.HorizontalContentAlignment Control.VerticalContentAlignment Control.TabIndex Control.IsTabStop Control.Padding Control.Template Control.HandlesScrolling Control.PreviewMouseDoubleClick Control.MouseDoubleClick FrameworkElement.StyleProperty FrameworkElement.OverridesDefaultStyleProperty FrameworkElement.UseLayoutRoundingProperty FrameworkElement.DefaultStyleKeyProperty FrameworkElement.DataContextProperty FrameworkElement.BindingGroupProperty FrameworkElement.LanguageProperty FrameworkElement.NameProperty FrameworkElement.TagProperty FrameworkElement.InputScopeProperty FrameworkElement.RequestBringIntoViewEvent FrameworkElement.SizeChangedEvent FrameworkElement.ActualWidthProperty FrameworkElement.ActualHeightProperty FrameworkElement.LayoutTransformProperty FrameworkElement.WidthProperty FrameworkElement.MinWidthProperty FrameworkElement.MaxWidthProperty FrameworkElement.HeightProperty FrameworkElement.MinHeightProperty FrameworkElement.MaxHeightProperty FrameworkElement.FlowDirectionProperty FrameworkElement.MarginProperty FrameworkElement.HorizontalAlignmentProperty FrameworkElement.VerticalAlignmentProperty FrameworkElement.FocusVisualStyleProperty FrameworkElement.CursorProperty FrameworkElement.ForceCursorProperty FrameworkElement.LoadedEvent FrameworkElement.UnloadedEvent FrameworkElement.ToolTipProperty FrameworkElement.ContextMenuProperty FrameworkElement.ToolTipOpeningEvent FrameworkElement.ToolTipClosingEvent FrameworkElement.ContextMenuOpeningEvent FrameworkElement.ContextMenuClosingEvent FrameworkElement.OnStyleChanged(Style, Style) FrameworkElement.ParentLayoutInvalidated(UIElement) FrameworkElement.ApplyTemplate() FrameworkElement.OnApplyTemplate() FrameworkElement.BeginStoryboard(Storyboard) FrameworkElement.BeginStoryboard(Storyboard, HandoffBehavior) FrameworkElement.BeginStoryboard(Storyboard, HandoffBehavior, Boolean) FrameworkElement.GetVisualChild(Int32) FrameworkElement.IQueryAmbient.IsAmbientPropertyAvailable(String) FrameworkElement.GetTemplateChild(String) FrameworkElement.FindResource(Object) FrameworkElement.TryFindResource(Object) FrameworkElement.SetResourceReference(DependencyProperty, Object) FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs) FrameworkElement.OnVisualParentChanged(DependencyObject) FrameworkElement.GetBindingExpression(DependencyProperty) FrameworkElement.SetBinding(DependencyProperty, BindingBase) FrameworkElement.SetBinding(DependencyProperty, String) FrameworkElement.GetUIParentCore() FrameworkElement.BringIntoView() FrameworkElement.BringIntoView(Rect) FrameworkElement.GetFlowDirection(DependencyObject) FrameworkElement.SetFlowDirection(DependencyObject, FlowDirection) FrameworkElement.MeasureCore(Size) FrameworkElement.ArrangeCore(Rect) FrameworkElement.OnRenderSizeChanged(SizeChangedInfo) FrameworkElement.GetLayoutClip(Size) FrameworkElement.MoveFocus(TraversalRequest) FrameworkElement.PredictFocus(FocusNavigationDirection) FrameworkElement.OnGotFocus(RoutedEventArgs) FrameworkElement.BeginInit() FrameworkElement.EndInit() FrameworkElement.OnInitialized(EventArgs) FrameworkElement.OnToolTipOpening(ToolTipEventArgs) FrameworkElement.OnToolTipClosing(ToolTipEventArgs) FrameworkElement.OnContextMenuOpening(ContextMenuEventArgs) FrameworkElement.OnContextMenuClosing(ContextMenuEventArgs) FrameworkElement.RegisterName(String, Object) FrameworkElement.UnregisterName(String) FrameworkElement.FindName(String) FrameworkElement.UpdateDefaultStyle() FrameworkElement.AddLogicalChild(Object) FrameworkElement.RemoveLogicalChild(Object) FrameworkElement.Style FrameworkElement.OverridesDefaultStyle FrameworkElement.UseLayoutRounding FrameworkElement.DefaultStyleKey FrameworkElement.Triggers FrameworkElement.TemplatedParent FrameworkElement.VisualChildrenCount FrameworkElement.Resources FrameworkElement.InheritanceBehavior FrameworkElement.DataContext FrameworkElement.BindingGroup FrameworkElement.Language FrameworkElement.Name FrameworkElement.Tag FrameworkElement.InputScope FrameworkElement.ActualWidth FrameworkElement.ActualHeight FrameworkElement.LayoutTransform FrameworkElement.Width FrameworkElement.MinWidth FrameworkElement.MaxWidth FrameworkElement.Height FrameworkElement.MinHeight FrameworkElement.MaxHeight FrameworkElement.FlowDirection FrameworkElement.Margin FrameworkElement.HorizontalAlignment FrameworkElement.VerticalAlignment FrameworkElement.FocusVisualStyle FrameworkElement.Cursor FrameworkElement.ForceCursor FrameworkElement.IsInitialized FrameworkElement.IsLoaded FrameworkElement.ToolTip FrameworkElement.ContextMenu FrameworkElement.Parent FrameworkElement.TargetUpdated FrameworkElement.SourceUpdated FrameworkElement.DataContextChanged FrameworkElement.RequestBringIntoView FrameworkElement.SizeChanged FrameworkElement.Initialized FrameworkElement.Loaded FrameworkElement.Unloaded FrameworkElement.ToolTipOpening FrameworkElement.ToolTipClosing FrameworkElement.ContextMenuOpening FrameworkElement.ContextMenuClosing UIElement.PreviewMouseDownEvent UIElement.MouseDownEvent UIElement.PreviewMouseUpEvent UIElement.MouseUpEvent UIElement.PreviewMouseLeftButtonDownEvent UIElement.MouseLeftButtonDownEvent UIElement.PreviewMouseLeftButtonUpEvent UIElement.MouseLeftButtonUpEvent UIElement.PreviewMouseRightButtonDownEvent UIElement.MouseRightButtonDownEvent UIElement.PreviewMouseRightButtonUpEvent UIElement.MouseRightButtonUpEvent UIElement.PreviewMouseMoveEvent UIElement.MouseMoveEvent UIElement.PreviewMouseWheelEvent UIElement.MouseWheelEvent UIElement.MouseEnterEvent UIElement.MouseLeaveEvent UIElement.GotMouseCaptureEvent UIElement.LostMouseCaptureEvent UIElement.QueryCursorEvent UIElement.PreviewStylusDownEvent UIElement.StylusDownEvent UIElement.PreviewStylusUpEvent UIElement.StylusUpEvent UIElement.PreviewStylusMoveEvent UIElement.StylusMoveEvent UIElement.PreviewStylusInAirMoveEvent UIElement.StylusInAirMoveEvent UIElement.StylusEnterEvent UIElement.StylusLeaveEvent UIElement.PreviewStylusInRangeEvent UIElement.StylusInRangeEvent UIElement.PreviewStylusOutOfRangeEvent UIElement.StylusOutOfRangeEvent UIElement.PreviewStylusSystemGestureEvent UIElement.StylusSystemGestureEvent UIElement.GotStylusCaptureEvent UIElement.LostStylusCaptureEvent UIElement.StylusButtonDownEvent UIElement.StylusButtonUpEvent UIElement.PreviewStylusButtonDownEvent UIElement.PreviewStylusButtonUpEvent UIElement.PreviewKeyDownEvent UIElement.KeyDownEvent UIElement.PreviewKeyUpEvent UIElement.KeyUpEvent UIElement.PreviewGotKeyboardFocusEvent UIElement.GotKeyboardFocusEvent UIElement.PreviewLostKeyboardFocusEvent UIElement.LostKeyboardFocusEvent UIElement.PreviewTextInputEvent UIElement.TextInputEvent UIElement.PreviewQueryContinueDragEvent UIElement.QueryContinueDragEvent UIElement.PreviewGiveFeedbackEvent UIElement.GiveFeedbackEvent UIElement.PreviewDragEnterEvent UIElement.DragEnterEvent UIElement.PreviewDragOverEvent UIElement.DragOverEvent UIElement.PreviewDragLeaveEvent UIElement.DragLeaveEvent UIElement.PreviewDropEvent UIElement.DropEvent UIElement.PreviewTouchDownEvent UIElement.TouchDownEvent UIElement.PreviewTouchMoveEvent UIElement.TouchMoveEvent UIElement.PreviewTouchUpEvent UIElement.TouchUpEvent UIElement.GotTouchCaptureEvent UIElement.LostTouchCaptureEvent UIElement.TouchEnterEvent UIElement.TouchLeaveEvent UIElement.IsMouseDirectlyOverProperty UIElement.IsMouseOverProperty UIElement.IsStylusOverProperty UIElement.IsKeyboardFocusWithinProperty UIElement.IsMouseCapturedProperty UIElement.IsMouseCaptureWithinProperty UIElement.IsStylusDirectlyOverProperty UIElement.IsStylusCapturedProperty UIElement.IsStylusCaptureWithinProperty UIElement.IsKeyboardFocusedProperty UIElement.AreAnyTouchesDirectlyOverProperty UIElement.AreAnyTouchesOverProperty UIElement.AreAnyTouchesCapturedProperty UIElement.AreAnyTouchesCapturedWithinProperty UIElement.AllowDropProperty UIElement.RenderTransformProperty UIElement.RenderTransformOriginProperty UIElement.OpacityProperty UIElement.OpacityMaskProperty UIElement.BitmapEffectProperty UIElement.EffectProperty UIElement.BitmapEffectInputProperty UIElement.CacheModeProperty UIElement.UidProperty UIElement.VisibilityProperty UIElement.ClipToBoundsProperty UIElement.ClipProperty UIElement.SnapsToDevicePixelsProperty UIElement.GotFocusEvent UIElement.LostFocusEvent UIElement.IsFocusedProperty UIElement.IsEnabledProperty UIElement.IsHitTestVisibleProperty UIElement.IsVisibleProperty UIElement.FocusableProperty UIElement.IsManipulationEnabledProperty UIElement.ManipulationStartingEvent UIElement.ManipulationStartedEvent UIElement.ManipulationDeltaEvent UIElement.ManipulationInertiaStartingEvent UIElement.ManipulationBoundaryFeedbackEvent UIElement.ManipulationCompletedEvent UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock) UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior) UIElement.BeginAnimation(DependencyProperty, AnimationTimeline) UIElement.BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior) UIElement.GetAnimationBaseValue(DependencyProperty) UIElement.RaiseEvent(RoutedEventArgs) UIElement.AddHandler(RoutedEvent, Delegate) UIElement.AddHandler(RoutedEvent, Delegate, Boolean) UIElement.RemoveHandler(RoutedEvent, Delegate) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.OnPreviewMouseDown(MouseButtonEventArgs) UIElement.OnMouseDown(MouseButtonEventArgs) UIElement.OnPreviewMouseUp(MouseButtonEventArgs) UIElement.OnMouseUp(MouseButtonEventArgs) UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs) UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs) UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs) UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs) UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs) UIElement.OnMouseRightButtonDown(MouseButtonEventArgs) UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs) UIElement.OnMouseRightButtonUp(MouseButtonEventArgs) UIElement.OnPreviewMouseMove(MouseEventArgs) UIElement.OnMouseMove(MouseEventArgs) UIElement.OnPreviewMouseWheel(MouseWheelEventArgs) UIElement.OnMouseWheel(MouseWheelEventArgs) UIElement.OnMouseEnter(MouseEventArgs) UIElement.OnMouseLeave(MouseEventArgs) UIElement.OnGotMouseCapture(MouseEventArgs) UIElement.OnLostMouseCapture(MouseEventArgs) UIElement.OnQueryCursor(QueryCursorEventArgs) UIElement.OnPreviewStylusDown(StylusDownEventArgs) UIElement.OnStylusDown(StylusDownEventArgs) UIElement.OnPreviewStylusUp(StylusEventArgs) UIElement.OnStylusUp(StylusEventArgs) UIElement.OnPreviewStylusMove(StylusEventArgs) UIElement.OnStylusMove(StylusEventArgs) UIElement.OnPreviewStylusInAirMove(StylusEventArgs) UIElement.OnStylusInAirMove(StylusEventArgs) UIElement.OnStylusEnter(StylusEventArgs) UIElement.OnStylusLeave(StylusEventArgs) UIElement.OnPreviewStylusInRange(StylusEventArgs) UIElement.OnStylusInRange(StylusEventArgs) UIElement.OnPreviewStylusOutOfRange(StylusEventArgs) UIElement.OnStylusOutOfRange(StylusEventArgs) UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs) UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs) UIElement.OnGotStylusCapture(StylusEventArgs) UIElement.OnLostStylusCapture(StylusEventArgs) UIElement.OnStylusButtonDown(StylusButtonEventArgs) UIElement.OnStylusButtonUp(StylusButtonEventArgs) UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs) UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs) UIElement.OnPreviewKeyDown(KeyEventArgs) UIElement.OnKeyDown(KeyEventArgs) UIElement.OnPreviewKeyUp(KeyEventArgs) UIElement.OnKeyUp(KeyEventArgs) UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs) UIElement.OnPreviewTextInput(TextCompositionEventArgs) UIElement.OnTextInput(TextCompositionEventArgs) UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs) UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs) UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs) UIElement.OnGiveFeedback(GiveFeedbackEventArgs) UIElement.OnPreviewDragEnter(DragEventArgs) UIElement.OnDragEnter(DragEventArgs) UIElement.OnPreviewDragOver(DragEventArgs) UIElement.OnDragOver(DragEventArgs) UIElement.OnPreviewDragLeave(DragEventArgs) UIElement.OnDragLeave(DragEventArgs) UIElement.OnPreviewDrop(DragEventArgs) UIElement.OnDrop(DragEventArgs) UIElement.OnPreviewTouchDown(TouchEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnPreviewTouchMove(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnPreviewTouchUp(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.OnGotTouchCapture(TouchEventArgs) UIElement.OnLostTouchCapture(TouchEventArgs) UIElement.OnTouchEnter(TouchEventArgs) UIElement.OnTouchLeave(TouchEventArgs) UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs) UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs) UIElement.InvalidateMeasure() UIElement.InvalidateArrange() UIElement.InvalidateVisual() UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.Measure(Size) UIElement.Arrange(Rect) UIElement.OnRender(DrawingContext) UIElement.UpdateLayout() UIElement.TranslatePoint(Point, UIElement) UIElement.InputHitTest(Point) UIElement.CaptureMouse() UIElement.ReleaseMouseCapture() UIElement.CaptureStylus() UIElement.ReleaseStylusCapture() UIElement.Focus() UIElement.OnAccessKey(AccessKeyEventArgs) UIElement.HitTestCore(PointHitTestParameters) UIElement.HitTestCore(GeometryHitTestParameters) UIElement.OnLostFocus(RoutedEventArgs) UIElement.OnManipulationStarting(ManipulationStartingEventArgs) UIElement.OnManipulationStarted(ManipulationStartedEventArgs) UIElement.OnManipulationDelta(ManipulationDeltaEventArgs) UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs) UIElement.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs) UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs) UIElement.CaptureTouch(TouchDevice) UIElement.ReleaseTouchCapture(TouchDevice) UIElement.ReleaseAllTouchCaptures() UIElement.HasAnimatedProperties UIElement.InputBindings UIElement.CommandBindings UIElement.AllowDrop UIElement.StylusPlugIns UIElement.DesiredSize UIElement.IsMeasureValid UIElement.IsArrangeValid UIElement.RenderSize UIElement.RenderTransform UIElement.RenderTransformOrigin UIElement.IsMouseDirectlyOver UIElement.IsMouseOver UIElement.IsStylusOver UIElement.IsKeyboardFocusWithin UIElement.IsMouseCaptured UIElement.IsMouseCaptureWithin UIElement.IsStylusDirectlyOver UIElement.IsStylusCaptured UIElement.IsStylusCaptureWithin UIElement.IsKeyboardFocused UIElement.IsInputMethodEnabled UIElement.Opacity UIElement.OpacityMask UIElement.BitmapEffect UIElement.Effect UIElement.BitmapEffectInput UIElement.CacheMode UIElement.Uid UIElement.Visibility UIElement.ClipToBounds UIElement.Clip UIElement.SnapsToDevicePixels UIElement.HasEffectiveKeyboardFocus UIElement.IsFocused UIElement.IsEnabled UIElement.IsEnabledCore UIElement.IsHitTestVisible UIElement.IsVisible UIElement.Focusable UIElement.PersistId UIElement.IsManipulationEnabled UIElement.AreAnyTouchesOver UIElement.AreAnyTouchesDirectlyOver UIElement.AreAnyTouchesCapturedWithin UIElement.AreAnyTouchesCaptured UIElement.TouchesCaptured UIElement.TouchesCapturedWithin UIElement.TouchesOver UIElement.TouchesDirectlyOver UIElement.PreviewMouseDown UIElement.MouseDown UIElement.PreviewMouseUp UIElement.MouseUp UIElement.PreviewMouseLeftButtonDown UIElement.MouseLeftButtonDown UIElement.PreviewMouseLeftButtonUp UIElement.MouseLeftButtonUp UIElement.PreviewMouseRightButtonDown UIElement.MouseRightButtonDown UIElement.PreviewMouseRightButtonUp UIElement.MouseRightButtonUp UIElement.PreviewMouseMove UIElement.MouseMove UIElement.PreviewMouseWheel UIElement.MouseWheel UIElement.MouseEnter UIElement.MouseLeave UIElement.GotMouseCapture UIElement.LostMouseCapture UIElement.QueryCursor UIElement.PreviewStylusDown UIElement.StylusDown UIElement.PreviewStylusUp UIElement.StylusUp UIElement.PreviewStylusMove UIElement.StylusMove UIElement.PreviewStylusInAirMove UIElement.StylusInAirMove UIElement.StylusEnter UIElement.StylusLeave UIElement.PreviewStylusInRange UIElement.StylusInRange UIElement.PreviewStylusOutOfRange UIElement.StylusOutOfRange UIElement.PreviewStylusSystemGesture UIElement.StylusSystemGesture UIElement.GotStylusCapture UIElement.LostStylusCapture UIElement.StylusButtonDown UIElement.StylusButtonUp UIElement.PreviewStylusButtonDown UIElement.PreviewStylusButtonUp UIElement.PreviewKeyDown UIElement.KeyDown UIElement.PreviewKeyUp UIElement.KeyUp UIElement.PreviewGotKeyboardFocus UIElement.GotKeyboardFocus UIElement.PreviewLostKeyboardFocus UIElement.LostKeyboardFocus UIElement.PreviewTextInput UIElement.TextInput UIElement.PreviewQueryContinueDrag UIElement.QueryContinueDrag UIElement.PreviewGiveFeedback UIElement.GiveFeedback UIElement.PreviewDragEnter UIElement.DragEnter UIElement.PreviewDragOver UIElement.DragOver UIElement.PreviewDragLeave UIElement.DragLeave UIElement.PreviewDrop UIElement.Drop UIElement.PreviewTouchDown UIElement.TouchDown UIElement.PreviewTouchMove UIElement.TouchMove UIElement.PreviewTouchUp UIElement.TouchUp UIElement.GotTouchCapture UIElement.LostTouchCapture UIElement.TouchEnter UIElement.TouchLeave UIElement.IsMouseDirectlyOverChanged UIElement.IsKeyboardFocusWithinChanged UIElement.IsMouseCapturedChanged UIElement.IsMouseCaptureWithinChanged UIElement.IsStylusDirectlyOverChanged UIElement.IsStylusCapturedChanged UIElement.IsStylusCaptureWithinChanged UIElement.IsKeyboardFocusedChanged UIElement.LayoutUpdated UIElement.GotFocus UIElement.LostFocus UIElement.IsEnabledChanged UIElement.IsHitTestVisibleChanged UIElement.IsVisibleChanged UIElement.FocusableChanged UIElement.ManipulationStarting UIElement.ManipulationStarted UIElement.ManipulationDelta UIElement.ManipulationInertiaStarting UIElement.ManipulationBoundaryFeedback UIElement.ManipulationCompleted Visual.AddVisualChild(Visual) Visual.RemoveVisualChild(Visual) Visual.OnVisualChildrenChanged(DependencyObject, DependencyObject) Visual.OnDpiChanged(DpiScale, DpiScale) Visual.IsAncestorOf(DependencyObject) Visual.IsDescendantOf(DependencyObject) Visual.FindCommonVisualAncestor(DependencyObject) Visual.TransformToAncestor(Visual) Visual.TransformToAncestor(Visual3D) Visual.TransformToDescendant(Visual) Visual.TransformToVisual(Visual) Visual.PointToScreen(Point) Visual.PointFromScreen(Point) Visual.VisualParent Visual.VisualTransform Visual.VisualEffect Visual.VisualBitmapEffect Visual.VisualBitmapEffectInput Visual.VisualCacheMode Visual.VisualScrollableAreaClip Visual.VisualClip Visual.VisualOffset Visual.VisualOpacity Visual.VisualEdgeMode Visual.VisualBitmapScalingMode Visual.VisualClearTypeHint Visual.VisualTextRenderingMode Visual.VisualTextHintingMode Visual.VisualOpacityMask Visual.VisualXSnappingGuidelines Visual.VisualYSnappingGuidelines DependencyObject.Equals(Object) DependencyObject.GetHashCode() DependencyObject.GetValue(DependencyProperty) DependencyObject.SetValue(DependencyProperty, Object) DependencyObject.SetCurrentValue(DependencyProperty, Object) DependencyObject.SetValue(DependencyPropertyKey, Object) DependencyObject.ClearValue(DependencyProperty) DependencyObject.ClearValue(DependencyPropertyKey) DependencyObject.CoerceValue(DependencyProperty) DependencyObject.InvalidateProperty(DependencyProperty) DependencyObject.ShouldSerializeProperty(DependencyProperty) DependencyObject.ReadLocalValue(DependencyProperty) DependencyObject.GetLocalValueEnumerator() DependencyObject.DependencyObjectType DependencyObject.IsSealed DispatcherObject.Dispatcher Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.VisualStudio.UI Assembly : CodeFactory.VisualStudio.dll Syntax public class VsUserControl : UserControl, DUCE.IResource, IAnimatable, IFrameworkInputElement, IInputElement, ISupportInitialize, IHaveResources, IQueryAmbient, IAddChild Constructors | Improve this Doc View Source VsUserControl() Default constructor only to be used for compatibility with the visual editor. Declaration public VsUserControl() | Improve this Doc View Source VsUserControl(IVsActions, ILogger) Initializes the base implementation of a VsUserControl user control. Declaration public VsUserControl(IVsActions actions, ILogger logger) Parameters Type Name Description IVsActions actions The visual studio actions accessible in this user control. ILogger logger The logger for interaction inside this user control. Fields | Improve this Doc View Source _logger Logger class that is assigned to this user control. Declaration protected readonly ILogger _logger Field Value Type Description ILogger | Improve this Doc View Source _visualStudioActions The visual studio actions provided by code factory for use with visual studio. Declaration protected readonly IVsActions _visualStudioActions Field Value Type Description IVsActions | Improve this Doc View Source WindowTitleProperty Backing store for the dependance property WindowTitle Declaration public static readonly DependencyProperty WindowTitleProperty Field Value Type Description DependencyProperty Properties | Improve this Doc View Source WindowTitle The title that will be assigned to windows that host this user control. Declaration public string WindowTitle { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Close() Triggers the CloseHost event that will inform the host of this user control to close. Declaration protected void Close() | Improve this Doc View Source ReleaseSubscriptionToHostWindow(Window) Used by the code factory to release subscriptions to the host windows events. This is for internal code factory use only. Declaration public void ReleaseSubscriptionToHostWindow(Window host) Parameters Type Name Description Window host The hosting window to release subscriptions. | Improve this Doc View Source SubscribeToHostWindow(Window) Used by the code factory to subscribe to the hosts windows events to be made available to this user control. This is for internal code factory use only. Declaration public void SubscribeToHostWindow(Window host) Parameters Type Name Description Window host The hosting window that will display this user control implementation. | Improve this Doc View Source WindowActivated(Object, EventArgs) Event handler when the Activated is raised to this user control. Declaration public virtual void WindowActivated(object sender, EventArgs e) Parameters Type Name Description Object sender Source window that has been activated. EventArgs e Args from the window. | Improve this Doc View Source WindowClosing(Object, CancelEventArgs) Event handler when the Closing is raised to this user control. Declaration public virtual void WindowClosing(object sender, CancelEventArgs e) Parameters Type Name Description Object sender CancelEventArgs e Events | Improve this Doc View Source CloseHost Event that is raised when the user control informs the hosting window or control in visual studio to close. Declaration public event EventHandler CloseHost Event Type Type Description EventHandler Implements System.Windows.Media.Animation.IAnimatable System.Windows.IFrameworkInputElement System.Windows.IInputElement System.ComponentModel.ISupportInitialize System.Windows.Markup.IQueryAmbient System.Windows.Markup.IAddChild"
  },
  "api/CodeFactory.VisualStudio.VisualStudioException.html": {
    "href": "api/CodeFactory.VisualStudio.VisualStudioException.html",
    "title": "Class VisualStudioException | CodeFactory Guidance",
    "keywords": "Class VisualStudioException Base exception class for all visual studio specific exceptions that occur in code factory. Inheritance Object Exception CodeFactoryException VisualStudioException ProjectSystemException SolutionExplorerException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public class VisualStudioException : CodeFactoryException, ISerializable, _Exception Constructors | Improve this Doc View Source VisualStudioException() Creates a visual studio code factory exception. Declaration public VisualStudioException() | Improve this Doc View Source VisualStudioException(String) Creates a visual studio code factory exception. Declaration public VisualStudioException(string message) Parameters Type Name Description String message The error message to be captured by the exception | Improve this Doc View Source VisualStudioException(String, Exception) Creates a visual studio code factory exception. Declaration public VisualStudioException(string message, Exception innerException) Parameters Type Name Description String message The error message to be captured by the exception Exception innerException The inner exception that occurred and to be added to this exception. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/CodeFactory.VisualStudio.VisualStudioMessages.html": {
    "href": "api/CodeFactory.VisualStudio.VisualStudioMessages.html",
    "title": "Class VisualStudioMessages | CodeFactory Guidance",
    "keywords": "Class VisualStudioMessages A strongly-typed resource class, for looking up localized strings, etc. Inheritance Object VisualStudioMessages Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public class VisualStudioMessages Properties | Improve this Doc View Source CodeFactoryCouldNotLoad Looks up a localized string similar to Code factory could not complete the load process. Code factory will not be avaliable at this time. . Declaration public static string CodeFactoryCouldNotLoad { get; } Property Value Type Description String | Improve this Doc View Source Culture Overrides the current thread's CurrentUICulture property for all resource lookups using this strongly typed resource class. Declaration public static CultureInfo Culture { get; set; } Property Value Type Description CultureInfo | Improve this Doc View Source GetDocumentContentUnhandledError Looks up a localized string similar to An internal visual studio error occurred, cannot load the document content.. Declaration public static string GetDocumentContentUnhandledError { get; } Property Value Type Description String | Improve this Doc View Source GetParentErrorProjectWithProjectNameReplacement Looks up a localized string similar to An internal error occurred locating the parent for project '{0}'. The parent lookup operating cannot complete.. Declaration public static string GetParentErrorProjectWithProjectNameReplacement { get; } Property Value Type Description String | Improve this Doc View Source GetParentForSolutionFolderUnhandledErrorWithProjectFolderTitle Looks up a localized string similar to An internal error occured while loading the parent of the solution folder '{0}', cannot complete the load parent operation.. Declaration public static string GetParentForSolutionFolderUnhandledErrorWithProjectFolderTitle { get; } Property Value Type Description String | Improve this Doc View Source GetParentUnhandledErrorForProjectDocumentWithName Looks up a localized string similar to An internal error occured while trying to get the parent for the document '{0}', cannot get the parent model.. Declaration public static string GetParentUnhandledErrorForProjectDocumentWithName { get; } Property Value Type Description String | Improve this Doc View Source GetParentUnhandledErrorForProjectFolderWithName Looks up a localized string similar to An internal error occured while loading the parent for the project folder '{0}', the parent model cannot be loaded.. Declaration public static string GetParentUnhandledErrorForProjectFolderWithName { get; } Property Value Type Description String | Improve this Doc View Source InternalErrorAddDocumentContent Looks up a localized string similar to An internal error occured while adding content to the document, operation did not complete.. Declaration public static string InternalErrorAddDocumentContent { get; } Property Value Type Description String | Improve this Doc View Source InternalErrorOccuredCheckLogs Looks up a localized string similar to An internal error occured the operation could not complete. Review logs for further details.. Declaration public static string InternalErrorOccuredCheckLogs { get; } Property Value Type Description String | Improve this Doc View Source LoadDocumentFromSourceUnhandledError Looks up a localized string similar to An internal error occured while loading the visual studio document, the operation could not be completed.. Declaration public static string LoadDocumentFromSourceUnhandledError { get; } Property Value Type Description String | Improve this Doc View Source ProjectSystemGeneralError Looks up a localized string similar to An error occured while accessing visual studio's project system, code factory had to cancel the operation. Please try again.. Declaration public static string ProjectSystemGeneralError { get; } Property Value Type Description String | Improve this Doc View Source RemoveContentUnhandledError Looks up a localized string similar to An internal error occured will not be able to remove the content from the document.. Declaration public static string RemoveContentUnhandledError { get; } Property Value Type Description String | Improve this Doc View Source ReplaceContentUnhandledError Looks up a localized string similar to An internal error occured will not be able to replace the content in the document.. Declaration public static string ReplaceContentUnhandledError { get; } Property Value Type Description String | Improve this Doc View Source ResourceManager Returns the cached ResourceManager instance used by this class. Declaration public static ResourceManager ResourceManager { get; } Property Value Type Description ResourceManager | Improve this Doc View Source SolutionExplorerGeneralError Looks up a localized string similar to An error occured while access the selected item in solution explorer, code factory had to cancel the operation. Please try again.. Declaration public static string SolutionExplorerGeneralError { get; } Property Value Type Description String | Improve this Doc View Source SolutionFolderChildLoadUnhandledExceptionWithFolderName Looks up a localized string similar to An internal error occurred while loading the child models for the solution folder '{0}'. The load action could not be completed.. Declaration public static string SolutionFolderChildLoadUnhandledExceptionWithFolderName { get; } Property Value Type Description String | Improve this Doc View Source UnhandledErrorReadingContent Looks up a localized string similar to An internal error occured while loading the IDocumentContent, operation could not complete.. Declaration public static string UnhandledErrorReadingContent { get; } Property Value Type Description String | Improve this Doc View Source VisualStudioCompilerSystemLoadError Looks up a localized string similar to Code factory has encountered an internal error and cannot load the compiler functionality used by code factory to access .net objects.. Declaration public static string VisualStudioCompilerSystemLoadError { get; } Property Value Type Description String | Improve this Doc View Source VisualStudioDocumentWriterLoadError Looks up a localized string similar to Code factory has encountered an internal error and cannot load the document writer functionality used by code factory to manage code changes.. Declaration public static string VisualStudioDocumentWriterLoadError { get; } Property Value Type Description String | Improve this Doc View Source VisualStudioGeneralError Looks up a localized string similar to Code factory has encountered an internal error accessing visual studio. The current operation could not be completed. Please try again.. Declaration public static string VisualStudioGeneralError { get; } Property Value Type Description String | Improve this Doc View Source VisualStudioModelLoadError Looks up a localized string similar to The visual studio model could not be loaded. The source model data could not be accessed.. Declaration public static string VisualStudioModelLoadError { get; } Property Value Type Description String | Improve this Doc View Source VisualStudioProjectSystemLoadError Looks up a localized string similar to Code factory has encountered an internal error and cannot load the project system functionality used by code factory to access the project system.. Declaration public static string VisualStudioProjectSystemLoadError { get; } Property Value Type Description String"
  },
  "api/CodeFactory.VisualStudio.VisualStudioModelType.html": {
    "href": "api/CodeFactory.VisualStudio.VisualStudioModelType.html",
    "title": "Enum VisualStudioModelType | CodeFactory Guidance",
    "keywords": "Enum VisualStudioModelType Enumeration of the different type of code factory models that support visual studio integration. Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public enum VisualStudioModelType Fields Name Description CSharpSource Target model represents visual studio source contained in a document. Document Target model represents a visual studio document. Project Target model represents a visual studio project. ProjectFolder Target model represents a visual studio project folder. Reference Target model for a reference used by a project Solution The target model represents a visual studio solution. SolutionFolder The target model represents a visual studio solution folder. Unknown Target model is unknown"
  },
  "api/CodeFactory.VisualStudio.VsCommandBase-1.html": {
    "href": "api/CodeFactory.VisualStudio.VsCommandBase-1.html",
    "title": "Class VsCommandBase<TModel> | CodeFactory Guidance",
    "keywords": "Class VsCommandBase<TModel> Base implementation for a factory command that supports integration with visual studio. Inheritance Object VsCommandBase<TModel> CSharpSourceCommandBase ProjectCommandBase ProjectDocumentCommandBase ProjectFolderCommandBase SolutionCommandBase SolutionDocumentCommandBase SolutionFolderCommandBase Implements IVsFactoryCommand <TModel> IVsCommandInformation ICommand <TModel> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public abstract class VsCommandBase<TModel> : IVsFactoryCommand<TModel>, IVsCommandInformation, ICommand<TModel> where TModel : class Type Parameters Name Description TModel The target visual studio model type to be returned from the visual studio command. Constructors | Improve this Doc View Source VsCommandBase(ILogger, IVsActions, VsCommandType, String, String) Base constructor used it initialize a visual studio command. Declaration protected VsCommandBase(ILogger logger, IVsActions commands, VsCommandType commandType, string commandTitle, string commandDescription) Parameters Type Name Description ILogger logger The code factory logger to be used by the logger. IVsActions commands The global visual studio commands that can be used by this visual studio command. VsCommandType commandType The target type of command being created. String commandTitle The title displayed in visual studio for this command. String commandDescription A brief description of the purpose of this command. Fields | Improve this Doc View Source _commandDescription Backing field for the property CommandDescription Declaration protected readonly string _commandDescription Field Value Type Description String | Improve this Doc View Source _commandTitle Backing field for the property CommandTitle Declaration protected readonly string _commandTitle Field Value Type Description String | Improve this Doc View Source _logger Logging method that is used by the command to log to the code factory logging framework. Declaration protected readonly ILogger _logger Field Value Type Description ILogger Properties | Improve this Doc View Source CommandDescription An optional discription that discribes what this factory command is intended for. Declaration public string CommandDescription { get; } Property Value Type Description String | Improve this Doc View Source CommandTitle Action title that will be displayed within visual studio. Declaration public string CommandTitle { get; } Property Value Type Description String | Improve this Doc View Source CommandType The target type of command that is being loaded. Declaration public VsCommandType CommandType { get; } Property Value Type Description VsCommandType | Improve this Doc View Source VisualStudioActions Global visual studio commands that can be accessed from this visual studio command. Declaration public IVsActions VisualStudioActions { get; } Property Value Type Description IVsActions Methods | Improve this Doc View Source EnableCommandAsync(TModel) Validation logic that will determine if this command should be enabled for execution. Declaration public abstract Task<bool> EnableCommandAsync(TModel result) Parameters Type Name Description TModel result The target model data that will be used to determine if this command should be enabled. Returns Type Description Task < Boolean > Boolean flag that will tell code factory to enable this command or disable it. | Improve this Doc View Source ExecuteCommandAsync(TModel) Code factory framework calls this method when the command has been executed. Declaration public abstract Task ExecuteCommandAsync(TModel result) Parameters Type Name Description TModel result The code factory model that has generated and provided to the command to process. Returns Type Description Task Implements IVsFactoryCommand<TModel> IVsCommandInformation ICommand<TModel>"
  },
  "api/CodeFactory.VisualStudio.VsCommandType.html": {
    "href": "api/CodeFactory.VisualStudio.VsCommandType.html",
    "title": "Enum VsCommandType | CodeFactory Guidance",
    "keywords": "Enum VsCommandType Enumeration that determines the type of visual studio command is being executed. Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public enum VsCommandType Fields Name Description SolutionExplorerCSharpSourceCode Solution explorer command that is triggered from the context menu from a project document that supports source code. SolutionExplorerProject Solution explorer command that is triggered from the context menu from a project node. SolutionExplorerProjectDocument Solution explorer command that is triggered from the context menu from a project document node. SolutionExplorerProjectFolder Solution explorer command that is triggered from the context menu from a project folder node. SolutionExplorerSolution Solution explorer command that is triggered from the context menu from the solution node. SolutionExplorerSolutionDocument Solution explorer command that is triggered from the context menu from a solution document node. SolutionExplorerSolutionFolder Solution explorer command that is triggered from the context menu from a solution folder node. Unknown The command type is unknown"
  },
  "api/CodeFactory.VisualStudio.VsCSharpSource.html": {
    "href": "api/CodeFactory.VisualStudio.VsCSharpSource.html",
    "title": "Class VsCSharpSource | CodeFactory Guidance",
    "keywords": "Class VsCSharpSource Data model that represents C# source code. Inheritance Object VsModel VsCSharpSource Implements IVsCSharpSource IVsModel IModel < VisualStudioModelType > Inherited Members VsModel.IsLoaded VsModel.HasErrors VsModel.ModelErrors VsModel.ModelType VsModel.Name Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public abstract class VsCSharpSource : VsModel, IVsCSharpSource, IVsModel, IModel<VisualStudioModelType> Constructors | Improve this Doc View Source VsCSharpSource(Boolean, Boolean, IReadOnlyList<ModelException<VisualStudioModelType>>, String, CsSource) Constructor for the base class VsCSharpSource Declaration protected VsCSharpSource(bool isLoaded, bool hasErrors, IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors, string name, CsSource sourceCode) Parameters Type Name Description Boolean isLoaded Flag that determines if the model is loaded. Boolean hasErrors Flag that determines if errors occured while loading the model. IReadOnlyList < ModelException < VisualStudioModelType >> modelErrors The list of errors that occured if any. String name The name of the model. CsSource sourceCode The loaded C# model data. Properties | Improve this Doc View Source SourceCode The C# source in the document. Declaration public CsSource SourceCode { get; } Property Value Type Description CsSource Methods | Improve this Doc View Source LoadDocumentModelAsync() Loads the visual studio document model from the current loaded source model. Declaration public abstract Task<VsDocument> LoadDocumentModelAsync() Returns Type Description Task < VsDocument > The loaded document model. Implements IVsCSharpSource IVsModel IModel<TModelTypes> Extension Methods CSharpSourceExtensions.SourceMissingInterfaceMembers(VsCSharpSource) VsCSharpSourceExtensions.GetHostingProjectAsync(VsCSharpSource)"
  },
  "api/CodeFactory.VisualStudio.VsCSharpSourceExtensions.html": {
    "href": "api/CodeFactory.VisualStudio.VsCSharpSourceExtensions.html",
    "title": "Class VsCSharpSourceExtensions | CodeFactory Guidance",
    "keywords": "Class VsCSharpSourceExtensions Extensions class that provides common automation tasks rolled up under standard extension methods that support the VsCSharpSource model. Inheritance Object VsCSharpSourceExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public static class VsCSharpSourceExtensions Methods | Improve this Doc View Source GetHostingProjectAsync(VsCSharpSource) Extension method that loads the hosting project for the VsCSharpSource document. Declaration public static Task<VsProject> GetHostingProjectAsync(this VsCSharpSource source) Parameters Type Name Description VsCSharpSource source Target document to load the parent from. Returns Type Description Task < VsProject > The project model or null if the project could not be loaded."
  },
  "api/CodeFactory.VisualStudio.VsDocument.html": {
    "href": "api/CodeFactory.VisualStudio.VsDocument.html",
    "title": "Class VsDocument | CodeFactory Guidance",
    "keywords": "Class VsDocument Data model that represents a document that is hosted in visual studio. Inheritance Object VsModel VsDocument Implements IVsDocument IVsModel IModel < VisualStudioModelType > IParent IChildren Inherited Members VsModel.IsLoaded VsModel.HasErrors VsModel.ModelErrors VsModel.ModelType VsModel.Name Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public abstract class VsDocument : VsModel, IVsDocument, IVsModel, IModel<VisualStudioModelType>, IParent, IChildren Constructors | Improve this Doc View Source VsDocument(Boolean, Boolean, IReadOnlyList<ModelException<VisualStudioModelType>>, String, Boolean, Boolean, String, VsDocumentType, Boolean, SourceCodeType) Constructor for the base class VsDocument Declaration protected VsDocument(bool isLoaded, bool hasErrors, IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors, string name, bool hasParent, bool hasChildren, string path, VsDocumentType documentType, bool isSourceCode, SourceCodeType sourceType) Parameters Type Name Description Boolean isLoaded Flag that determines if the model is loaded. Boolean hasErrors Flag that determines if errors occured while loading the model. IReadOnlyList < ModelException < VisualStudioModelType >> modelErrors The list of errors that occured if any. String name The name of the model. Boolean hasParent Flag that determines if this model has a parent model. Boolean hasChildren Flag that determines if this model has child models. String path The fully qualified path to the document. VsDocumentType documentType The type of visual studio document. Boolean isSourceCode Is a source code file loadable by code factory. SourceCodeType sourceType The type of source code found in the document. Properties | Improve this Doc View Source DocumentType The type of document that is loaded. Declaration public VsDocumentType DocumentType { get; } Property Value Type Description VsDocumentType | Improve this Doc View Source HasChildren Flag that determines if this visual studio object has child objects. Declaration public bool HasChildren { get; } Property Value Type Description Boolean | Improve this Doc View Source HasParent Flag that determines if the visual studio object has a parent. Declaration public bool HasParent { get; } Property Value Type Description Boolean | Improve this Doc View Source IsSourceCode Flag that determines if the project document contains source code that can be managed by code factory. Declaration public bool IsSourceCode { get; } Property Value Type Description Boolean | Improve this Doc View Source Path The fully qualified path to the project document. Declaration public string Path { get; } Property Value Type Description String | Improve this Doc View Source SourceType The target type of source code that is implemented in the project document. Declaration public SourceCodeType SourceType { get; } Property Value Type Description SourceCodeType Methods | Improve this Doc View Source AddContentAsync(IDocumentLocation, String) Adds content to a target starting at an assigned Declaration public abstract Task AddContentAsync(IDocumentLocation location, string content) Parameters Type Name Description IDocumentLocation location Location within the document to add content to. String content The content to be added to the document. Returns Type Description Task | Improve this Doc View Source AddContentToBeginningAsync(String) Adds content to the beginning of a document. Declaration public abstract Task AddContentToBeginningAsync(string content) Parameters Type Name Description String content The content to be added. Returns Type Description Task | Improve this Doc View Source AddContentToEndAsync(String) Adds content to the end of a document. Declaration public abstract Task AddContentToEndAsync(string content) Parameters Type Name Description String content The content to be added. Returns Type Description Task | Improve this Doc View Source DeleteAsync() Deletes the document. Declaration public abstract Task<bool> DeleteAsync() Returns Type Description Task < Boolean > Flag that notifies if the delete operation completed successfully. Remarks Currently does not support deleting solution documents. | Improve this Doc View Source GetChildrenAsync(Boolean) Gets the direct children of the document. Declaration public abstract Task<IReadOnlyList<VsDocument>> GetChildrenAsync(bool allChildren) Parameters Type Name Description Boolean allChildren Flag that determines if all children from the document should be returned. Returns Type Description Task < IReadOnlyList < VsDocument >> Readonly list of all the project documents, if no children are found then an empty readonly list will be returned. | Improve this Doc View Source GetCSharpSourceModelAsync() If the document is implemented as a C# code model. Will return the C# source code model from the visual studio document. Declaration public abstract Task<CsSource> GetCSharpSourceModelAsync() Returns Type Description Task < CsSource > The loaded model or null if the model could not be loaded. | Improve this Doc View Source GetDocumentContentAsContentAsync() Gets the content of the document. Declaration public abstract Task<IDocumentContent> GetDocumentContentAsContentAsync() Returns Type Description Task < IDocumentContent > Document content as | Improve this Doc View Source GetDocumentContentAsStringAsync() Gets the content of the document. Declaration public abstract Task<string> GetDocumentContentAsStringAsync() Returns Type Description Task < String > The content of the document or null if there is no content in the document. | Improve this Doc View Source GetDocumentContentAsStringAsync(IDocumentLocation, IDocumentLocation) Gets the content of the document. Declaration public abstract Task<string> GetDocumentContentAsStringAsync(IDocumentLocation startLocation, IDocumentLocation endLocation) Parameters Type Name Description IDocumentLocation startLocation The starting position within the document to get content from. IDocumentLocation endLocation The ending position within the document to get content form. Returns Type Description Task < String > The content of the document or null if there is no content in the document. | Improve this Doc View Source GetParentAsync() Get the parent visual studio model of the document. Declaration public abstract Task<VsModel> GetParentAsync() Returns Type Description Task < VsModel > Model of the parent of this document. The model will be returned unless there is no parent, otherwise null will be returned. | Improve this Doc View Source RemoveAsync() Removes a document from visual studio but does not remove it from the file system. Declaration public abstract Task<bool> RemoveAsync() Returns Type Description Task < Boolean > Flag that notifies if the remove operation completed successfully. Remarks Currently does not support removing solution documents. | Improve this Doc View Source RemoveContentAsync() Removes all the content from a document. Declaration public abstract Task RemoveContentAsync() Returns Type Description Task | Improve this Doc View Source RemoveContentAsync(IDocumentLocation, IDocumentLocation) Removes a target set of content from the document. Declaration public abstract Task RemoveContentAsync(IDocumentLocation startLocation, IDocumentLocation endLocation) Parameters Type Name Description IDocumentLocation startLocation The starting position within the document to remove content from. IDocumentLocation endLocation The ending position within the document to remove content form. Returns Type Description Task | Improve this Doc View Source ReplaceContentAsync(String) Replaces all the content within the document. Declaration public abstract Task ReplaceContentAsync(string content) Parameters Type Name Description String content Content to replace the existing content in the document. Returns Type Description Task | Improve this Doc View Source ReplaceContentAsync(String, IDocumentLocation, IDocumentLocation) Replaces all the content within the document. Declaration public abstract Task ReplaceContentAsync(string content, IDocumentLocation startLocation, IDocumentLocation endLocation) Parameters Type Name Description String content Content to replace the existing content in the document. IDocumentLocation startLocation The starting position within the document to replace content. IDocumentLocation endLocation The ending location within the document to replace content. Returns Type Description Task Implements IVsDocument IVsModel IModel<TModelTypes> IParent IChildren"
  },
  "api/CodeFactory.VisualStudio.VsDocumentType.html": {
    "href": "api/CodeFactory.VisualStudio.VsDocumentType.html",
    "title": "Enum VsDocumentType | CodeFactory Guidance",
    "keywords": "Enum VsDocumentType Enumeration that determines the type of visual studio document that has been loaded. Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public enum VsDocumentType Fields Name Description Project Is a document is a project. Solution Is a document at the solution level. Unknown The document type is unknown."
  },
  "api/CodeFactory.VisualStudio.VsModel.html": {
    "href": "api/CodeFactory.VisualStudio.VsModel.html",
    "title": "Class VsModel | CodeFactory Guidance",
    "keywords": "Class VsModel Base class used by all visual studio models. Inheritance Object VsModel VsCSharpSource VsDocument VsProject VsProjectFolder VsReference VsSolution VsSolutionFolder Implements IVsModel IModel < VisualStudioModelType > Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public abstract class VsModel : IVsModel, IModel<VisualStudioModelType> Constructors | Improve this Doc View Source VsModel(Boolean, Boolean, IReadOnlyList<ModelException<VisualStudioModelType>>, VisualStudioModelType, String) Constructor for the base class VsModel Declaration protected VsModel(bool isLoaded, bool hasErrors, IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors, VisualStudioModelType modelType, string name) Parameters Type Name Description Boolean isLoaded Flag that determines if the model is loaded. Boolean hasErrors Flag that determines if errors occured while loading the model. IReadOnlyList < ModelException < VisualStudioModelType >> modelErrors The list of errors that occured if any. VisualStudioModelType modelType The type of visual studio model that is loaded. String name The name of the model. Properties | Improve this Doc View Source HasErrors Flag that determines if this model has errors. Declaration public bool HasErrors { get; } Property Value Type Description Boolean | Improve this Doc View Source IsLoaded Flag that determines if this model was able to load. Declaration public bool IsLoaded { get; } Property Value Type Description Boolean | Improve this Doc View Source ModelErrors List of all errors that occurred in this model. Declaration public IReadOnlyList<ModelException<VisualStudioModelType>> ModelErrors { get; } Property Value Type Description IReadOnlyList < ModelException < VisualStudioModelType >> | Improve this Doc View Source ModelType Determines the type of model that has been loaded. Declaration public VisualStudioModelType ModelType { get; } Property Value Type Description VisualStudioModelType | Improve this Doc View Source Name The name of the visual studio model. Declaration public string Name { get; } Property Value Type Description String Implements IVsModel IModel<TModelTypes>"
  },
  "api/CodeFactory.VisualStudio.VsProject.html": {
    "href": "api/CodeFactory.VisualStudio.VsProject.html",
    "title": "Class VsProject | CodeFactory Guidance",
    "keywords": "Class VsProject Data model that presents a visual studio project that has been loaded. Inheritance Object VsModel VsProject Implements IVsProject IVsModel IModel < VisualStudioModelType > IParent IChildren Inherited Members VsModel.IsLoaded VsModel.HasErrors VsModel.ModelErrors VsModel.ModelType VsModel.Name Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public abstract class VsProject : VsModel, IVsProject, IVsModel, IModel<VisualStudioModelType>, IParent, IChildren Constructors | Improve this Doc View Source VsProject(Boolean, Boolean, IReadOnlyList<ModelException<VisualStudioModelType>>, String, Boolean, Boolean, String, Boolean, IReadOnlyList<ProjectLanguage>, String) Constructor for the base class VsProject Declaration protected VsProject(bool isLoaded, bool hasErrors, IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors, string name, bool hasParent, bool hasChildren, string path, bool legacyProjectModel, IReadOnlyList<ProjectLanguage> projectLanguages, string defaultNamespace) Parameters Type Name Description Boolean isLoaded Flag that determines if the model is loaded. Boolean hasErrors Flag that determines if errors occured while loading the model. IReadOnlyList < ModelException < VisualStudioModelType >> modelErrors The list of errors that occured if any. String name The name of the model. Boolean hasParent Flag that determines if there is a parent model for this model. Boolean hasChildren Flag that determines if this model has child models. String path The fully qualified path of the project. Boolean legacyProjectModel Flag that determines if this project uses the legacy project system for visual studio. IReadOnlyList < ProjectLanguage > projectLanguages The programming languages this project supports. String defaultNamespace The default namespace for the project if it support .net framework or .net core. Otherwise this will be null. Properties | Improve this Doc View Source DefaultNamespace The default namespace for the project if it support .net framework or .net core. Otherwise this will be null. Declaration public string DefaultNamespace { get; } Property Value Type Description String | Improve this Doc View Source HasChildren Flag that determines if this visual studio object has child objects. Declaration public bool HasChildren { get; } Property Value Type Description Boolean | Improve this Doc View Source HasParent Flag that determines if the visual studio object has a parent. Declaration public bool HasParent { get; } Property Value Type Description Boolean | Improve this Doc View Source LegacyProjectModel Flag that determines if this visual studio project uses the legacy project model. If so then only basic capabilities and references will be available through code factory. Declaration public bool LegacyProjectModel { get; } Property Value Type Description Boolean | Improve this Doc View Source Path The fully qualified path to the project file name. Declaration public string Path { get; } Property Value Type Description String | Improve this Doc View Source ProjectLanguages The project languages that are supported in this project. Declaration public IReadOnlyList<ProjectLanguage> ProjectLanguages { get; } Property Value Type Description IReadOnlyList < ProjectLanguage > Methods | Improve this Doc View Source AddDocumentAsync(String, String) Adds a project document to the root of the project. Declaration public abstract Task<VsDocument> AddDocumentAsync(string fileName, string content = null) Parameters Type Name Description String fileName The file name of the document. This should be the name only with no file path. String content The content that will be initially added to the document. This is an optional parameter. Returns Type Description Task < VsDocument > The created project document. | Improve this Doc View Source AddExistingDocumentAsync(String) Adds an existing document to the project. Declaration public abstract Task<VsDocument> AddExistingDocumentAsync(string fileName) Parameters Type Name Description String fileName The file name for the document. This should be the file name only with extension. The file must already be in the projects folder. Returns Type Description Task < VsDocument > The model of the created project document. | Improve this Doc View Source AddProjectFolderAsync(String) Adds a project folder to the root of the project. Declaration public abstract Task<VsProjectFolder> AddProjectFolderAsync(string folderName) Parameters Type Name Description String folderName The name of the project folder. This should be the name only with no path. Returns Type Description Task < VsProjectFolder > The created project folder. | Improve this Doc View Source GetChildrenAsync(Boolean, Boolean) Get all the children that are direct children of the project. Declaration public abstract Task<IReadOnlyList<VsModel>> GetChildrenAsync(bool allChildren, bool loadSourceCode = false) Parameters Type Name Description Boolean allChildren Flag that determines if it should return all children of the project and not just the top level children. Boolean loadSourceCode Flag to determine if code files that support code factory source code will be loaded by default. If enabled this could be memory intensive. Returns Type Description Task < IReadOnlyList < VsModel >> The children of the project, if no children are found and empty enumeration will be returned. | Improve this Doc View Source GetParentAsync() Gets the parent solution folder that holds the project. Declaration public abstract Task<VsSolutionFolder> GetParentAsync() Returns Type Description Task < VsSolutionFolder > Returns a solution folder if the project has a parent or null if the project has no parent. | Improve this Doc View Source GetProjectReferencesAsync() Gets the references assigned to this project. Declaration public abstract Task<IReadOnlyList<VsReference>> GetProjectReferencesAsync() Returns Type Description Task < IReadOnlyList < VsReference >> Readonly list of the references. | Improve this Doc View Source GetReferencedProjects() Get the VsProject models for all projects that are referenced by this project. Declaration public Task<IReadOnlyList<VsProject>> GetReferencedProjects() Returns Type Description Task < IReadOnlyList < VsProject >> Readonly list of the referenced projects or an empty list if there is no referenced projects. Implements IVsProject IVsModel IModel<TModelTypes> IParent IChildren Extension Methods VsProjectExtensions.HasReferenceLibraryAsync(VsProject, String)"
  },
  "api/CodeFactory.VisualStudio.VsProjectExtensions.html": {
    "href": "api/CodeFactory.VisualStudio.VsProjectExtensions.html",
    "title": "Class VsProjectExtensions | CodeFactory Guidance",
    "keywords": "Class VsProjectExtensions Extensions class that provides common automation tasks rolled up under standard extension methods that support the VsProject model. Inheritance Object VsProjectExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public static class VsProjectExtensions Methods | Improve this Doc View Source HasReferenceLibraryAsync(VsProject, String) Extension method that determines if a project reference has been loaded. Declaration public static Task<bool> HasReferenceLibraryAsync(this VsProject source, string libraryName) Parameters Type Name Description VsProject source Source project to search String libraryName The full name of the library to confirm exists. Returns Type Description Task < Boolean > boolean flag to determine if the library was found."
  },
  "api/CodeFactory.VisualStudio.VsProjectFolder.html": {
    "href": "api/CodeFactory.VisualStudio.VsProjectFolder.html",
    "title": "Class VsProjectFolder | CodeFactory Guidance",
    "keywords": "Class VsProjectFolder Data model that represents a folder in a project hosted in visual studio. Inheritance Object VsModel VsProjectFolder Implements IVsProjectFolder IVsModel IModel < VisualStudioModelType > IParent IChildren Inherited Members VsModel.IsLoaded VsModel.HasErrors VsModel.ModelErrors VsModel.ModelType VsModel.Name Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public abstract class VsProjectFolder : VsModel, IVsProjectFolder, IVsModel, IModel<VisualStudioModelType>, IParent, IChildren Constructors | Improve this Doc View Source VsProjectFolder(Boolean, Boolean, IReadOnlyList<ModelException<VisualStudioModelType>>, String, Boolean, Boolean, String) Constructor for the base class VsProjectFolder Declaration protected VsProjectFolder(bool isLoaded, bool hasErrors, IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors, string name, bool hasParent, bool hasChildren, string path) Parameters Type Name Description Boolean isLoaded Flag that determines if the model is loaded. Boolean hasErrors Flag that determines if errors occured while loading the model. IReadOnlyList < ModelException < VisualStudioModelType >> modelErrors The list of errors that occured if any. String name The name of the model. Boolean hasParent Flag that determines if the model has a parent model. Boolean hasChildren Flag that determines if the model has child models. String path The fully qualified path to the project folder. Properties | Improve this Doc View Source HasChildren Flag that determines if this visual studio object has child objects. Declaration public bool HasChildren { get; } Property Value Type Description Boolean | Improve this Doc View Source HasParent Flag that determines if the visual studio object has a parent. Declaration public bool HasParent { get; } Property Value Type Description Boolean | Improve this Doc View Source Path the fully qualified path to the project folder. Declaration public string Path { get; } Property Value Type Description String Methods | Improve this Doc View Source AddDocumentAsync(String, String) Adds a document to the project folder. Declaration public abstract Task<VsDocument> AddDocumentAsync(string fileName, string content = null) Parameters Type Name Description String fileName The file name for the document. This should be the file name only with extension. String content The content to be added to the document once its added. Note, this is an optional parameter. Returns Type Description Task < VsDocument > The model of the created project document. | Improve this Doc View Source AddExistingDocumentAsync(String) Adds an existing document to the project folder. Declaration public abstract Task<VsDocument> AddExistingDocumentAsync(string fileName) Parameters Type Name Description String fileName The file name for the document. This should be the file name only with extension. The file must already be in the project folder. Returns Type Description Task < VsDocument > The model of the created project document. | Improve this Doc View Source AddProjectFolderAsync(String) Adds a new project folder under the current project folder. Declaration public abstract Task<VsProjectFolder> AddProjectFolderAsync(string folderName) Parameters Type Name Description String folderName The name of the project folder. The project folder name should be the name only no path. Returns Type Description Task < VsProjectFolder > The model for the created project folder. | Improve this Doc View Source DeleteAsync() Deletes the project folder. Declaration public abstract Task<bool> DeleteAsync() Returns Type Description Task < Boolean > Flag determining if the folder was deleted, True for deleted and false if the folder could not be deleted. | Improve this Doc View Source GetChildrenAsync(Boolean, Boolean) Gets the IVsModel of the items that are direct children of this project folder. Declaration public abstract Task<IReadOnlyList<VsModel>> GetChildrenAsync(bool allChildren, bool loadSourceCode = false) Parameters Type Name Description Boolean allChildren Flag that determines if all children not just the first level children of the project folder. Boolean loadSourceCode Flag to determine if code files that support code factory source code will be loaded by default. If enabled this could be memory intensive. Returns Type Description Task < IReadOnlyList < VsModel >> Readonly list of the children that belong to this project folder. If no children are found an empty readonly list will be returned. | Improve this Doc View Source GetCSharpNamespaceAsync() Gets the target namespace for a document that support c# language to be placed in this folder. Declaration public abstract Task<string> GetCSharpNamespaceAsync() Returns Type Description Task < String > The fully qualified namespace if the project is a c# project that supports this project folder. Otherwise null will be returned. | Improve this Doc View Source GetParentAsync() Gets the parent visual studio model that is the parent of this Project folder. Declaration public abstract Task<VsModel> GetParentAsync() Returns Type Description Task < VsModel > The visual studio model of the parent or null if the project folder does not have a parent. | Improve this Doc View Source RemoveAsync() Removes the project folder from visual studio, but does not delete it from the file system. Declaration public abstract Task<bool> RemoveAsync() Returns Type Description Task < Boolean > Flag determining if the folder was removed, True for removed and false if the folder could not be removed. Implements IVsProjectFolder IVsModel IModel<TModelTypes> IParent IChildren"
  },
  "api/CodeFactory.VisualStudio.VsReference.html": {
    "href": "api/CodeFactory.VisualStudio.VsReference.html",
    "title": "Class VsReference | CodeFactory Guidance",
    "keywords": "Class VsReference Data model that presents a visual studio reference that has been loaded. Inheritance Object VsModel VsReference Implements IVsReference IVsModel IModel < VisualStudioModelType > Inherited Members VsModel.IsLoaded VsModel.HasErrors VsModel.ModelErrors VsModel.ModelType VsModel.Name Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public abstract class VsReference : VsModel, IVsReference, IVsModel, IModel<VisualStudioModelType> Constructors | Improve this Doc View Source VsReference(Boolean, Boolean, IReadOnlyList<ModelException<VisualStudioModelType>>, String, String, ProjectReferenceType, IReadOnlyList<String>) Constructor for the base class VsModel Declaration protected VsReference(bool isLoaded, bool hasErrors, IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors, string name, string filePath, ProjectReferenceType type, IReadOnlyList<string> aliases) Parameters Type Name Description Boolean isLoaded Flag that determines if the model is loaded. Boolean hasErrors Flag that determines if errors occured while loading the model. IReadOnlyList < ModelException < VisualStudioModelType >> modelErrors The list of errors that occured if any. String name The name of the model. String filePath The fully qualified file path to the reference ProjectReferenceType type The type of reference that is set for the project. IReadOnlyList < String > aliases Readonly list of the aliases assigned to this reference. Properties | Improve this Doc View Source Aliases Readonly list of the aliases assigned to this reference. Declaration public IReadOnlyList<string> Aliases { get; } Property Value Type Description IReadOnlyList < String > | Improve this Doc View Source FilePath The fully qualified path to the source reference. Declaration public string FilePath { get; } Property Value Type Description String | Improve this Doc View Source HasAliases Flag that determines if the reference has aliases. Declaration public bool HasAliases { get; } Property Value Type Description Boolean | Improve this Doc View Source Type The type of the project reference. Declaration public ProjectReferenceType Type { get; } Property Value Type Description ProjectReferenceType Methods | Improve this Doc View Source GetReferencedProjectAsync() Gets the VsProject model for the project that represents this reference. Declaration public abstract Task<VsProject> GetReferencedProjectAsync() Returns Type Description Task < VsProject > The loaded project model or null if the reference does not support a project based reference. Implements IVsReference IVsModel IModel<TModelTypes>"
  },
  "api/CodeFactory.VisualStudio.VsSolution.html": {
    "href": "api/CodeFactory.VisualStudio.VsSolution.html",
    "title": "Class VsSolution | CodeFactory Guidance",
    "keywords": "Class VsSolution Data model that represents the loaded solution in visual studio. Inheritance Object VsModel VsSolution Implements IVsSolution IVsModel IModel < VisualStudioModelType > IChildren Inherited Members VsModel.IsLoaded VsModel.HasErrors VsModel.ModelErrors VsModel.ModelType VsModel.Name Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public abstract class VsSolution : VsModel, IVsSolution, IVsModel, IModel<VisualStudioModelType>, IChildren Constructors | Improve this Doc View Source VsSolution(Boolean, Boolean, IReadOnlyList<ModelException<VisualStudioModelType>>, String, Boolean, String) Constructor for the base class VsSolution Declaration protected VsSolution(bool isLoaded, bool hasErrors, IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors, string name, bool hasChildren, string path) Parameters Type Name Description Boolean isLoaded Flag that determines if the model is loaded. Boolean hasErrors Flag that determines if errors occured while loading the model. IReadOnlyList < ModelException < VisualStudioModelType >> modelErrors The list of errors that occured if any. String name The name of the model. Boolean hasChildren Flag that determines if the solution has any children. String path The fully qualified path of the solution. Properties | Improve this Doc View Source HasChildren Flag that determines if this visual studio object has child objects. Declaration public bool HasChildren { get; } Property Value Type Description Boolean | Improve this Doc View Source Path The fully qualified path to the solution file name. Declaration public string Path { get; } Property Value Type Description String Methods | Improve this Doc View Source CreateSolutionFolderAsync(String) Creates a new solution folder for the target solution. Declaration public abstract Task<VsSolutionFolder> CreateSolutionFolderAsync(string name) Parameters Type Name Description String name The name of the solution folder to be added. Returns Type Description Task < VsSolutionFolder > Returns the solution folder. | Improve this Doc View Source GetChildrenAsync(Boolean) Gets the solution folders and projects that belong to the solution. Declaration public abstract Task<IReadOnlyList<VsModel>> GetChildrenAsync(bool allChildren) Parameters Type Name Description Boolean allChildren Get all children not just the first children of the solution. Returns Type Description Task < IReadOnlyList < VsModel >> Returns a readonly list of the children to the solution. If there are no children an empty list will be returned. | Improve this Doc View Source GetProjectsAsync(Boolean) Gets the projects for the solution. Declaration public abstract Task<IReadOnlyList<VsProject>> GetProjectsAsync(bool allChildren) Parameters Type Name Description Boolean allChildren Get all children not just the first children of the solution. Returns Type Description Task < IReadOnlyList < VsProject >> Returns all the projects that are part of the solution. Will return an empty list if no projects are found. | Improve this Doc View Source GetSolutionFoldersAsync(Boolean) Gets the solution folders for the solution. Declaration public abstract Task<IReadOnlyList<VsSolutionFolder>> GetSolutionFoldersAsync(bool allChildren) Parameters Type Name Description Boolean allChildren Get all children not just the first children of the solution. Returns Type Description Task < IReadOnlyList < VsSolutionFolder >> Returns a readonly of the solutions folders that are part of the solution. If there are no solution folders an empty list will be returned. Implements IVsSolution IVsModel IModel<TModelTypes> IChildren"
  },
  "api/CodeFactory.VisualStudio.VsSolutionFolder.html": {
    "href": "api/CodeFactory.VisualStudio.VsSolutionFolder.html",
    "title": "Class VsSolutionFolder | CodeFactory Guidance",
    "keywords": "Class VsSolutionFolder Data model that represents a solution folder in a loaded solution. Inheritance Object VsModel VsSolutionFolder Implements IVsSolutionFolder IVsModel IModel < VisualStudioModelType > IParent IChildren Inherited Members VsModel.IsLoaded VsModel.HasErrors VsModel.ModelErrors VsModel.ModelType VsModel.Name Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : CodeFactory.VisualStudio Assembly : CodeFactory.VisualStudio.dll Syntax public abstract class VsSolutionFolder : VsModel, IVsSolutionFolder, IVsModel, IModel<VisualStudioModelType>, IParent, IChildren Constructors | Improve this Doc View Source VsSolutionFolder(Boolean, Boolean, IReadOnlyList<ModelException<VisualStudioModelType>>, String, Boolean, Boolean) Constructor for the base class VsSolutionFolder Declaration protected VsSolutionFolder(bool isLoaded, bool hasErrors, IReadOnlyList<ModelException<VisualStudioModelType>> modelErrors, string name, bool hasParent, bool hasChildren) Parameters Type Name Description Boolean isLoaded Flag that determines if the model is loaded. Boolean hasErrors Flag that determines if errors occured while loading the model. IReadOnlyList < ModelException < VisualStudioModelType >> modelErrors The list of errors that occured if any. String name The name of the model. Boolean hasParent Flag that determines if this solution folder has a parent model. Boolean hasChildren Flag that determines has any child models. Properties | Improve this Doc View Source HasChildren Flag that determines if this visual studio object has child objects. Declaration public bool HasChildren { get; } Property Value Type Description Boolean | Improve this Doc View Source HasParent Flag that determines if the visual studio object has a parent. Declaration public bool HasParent { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source AddDocumentAsync(String, String) Creates a document that is hosted in the solution folder. Declaration public abstract Task<VsDocument> AddDocumentAsync(string fileName, string content = null) Parameters Type Name Description String fileName The name of the document to create. String content The content to add to the document. Returns Type Description Task < VsDocument > Instance of the new document. | Improve this Doc View Source AddExistingDocumentAsync(String) Adds an existing document to the solution folder. Declaration public abstract Task<VsDocument> AddExistingDocumentAsync(string fileName) Parameters Type Name Description String fileName The file name for the document. This should be the file name only with extension. The file must already be in the solution folder. Returns Type Description Task < VsDocument > The model of the created document. | Improve this Doc View Source AddSolutionFolder(String) Create a new solution folder under the current solution folder. Declaration public abstract Task<VsSolutionFolder> AddSolutionFolder(string folderName) Parameters Type Name Description String folderName The name of the solution folder. Returns Type Description Task < VsSolutionFolder > Instance of the new solution folder. | Improve this Doc View Source GetChildrenAsync(Boolean) Gets the children of the solution folder, this will return the files and projects that are part of the solution folder. Declaration public abstract Task<IReadOnlyList<VsModel>> GetChildrenAsync(bool allChildren) Parameters Type Name Description Boolean allChildren Flag that determines if all the direct children of the solution folder should also get there children. Returns Type Description Task < IReadOnlyList < VsModel >> Returns a readonly list of the children within this solution folder. Will return an empty list if there is no children. | Improve this Doc View Source GetParentAsync() Gets the parent solution folder. Declaration public abstract Task<VsSolutionFolder> GetParentAsync() Returns Type Description Task < VsSolutionFolder > The parent solution folder model or null if there is no parent for this solution folder. | Improve this Doc View Source Remove() Removes the solution folder from the visual studio solution that is hosting the solution folder. Declaration public abstract Task<bool> Remove() Returns Type Description Task < Boolean > Boolean flag true - solution folder was been removed or false the folder is either already removed or could not be removed. Implements IVsSolutionFolder IVsModel IModel<TModelTypes> IParent IChildren"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "CodeFactory SDK Documentation | CodeFactory Guidance",
    "keywords": "CodeFactory SDK Documentation This provides direct access to API level documentation for the CodeFactory SDK. In order to use the SDK you will need to have CodeFactory for Visual Studio Insalled. If you do not have the Runtime installed see the following guidance. CodeFactory Installation You will also need to have the CodeFactory SDK installed. If you do not have the SDK installed see the following guidance. CodeFactory SDK Installation"
  },
  "guidance/howto/CreateProject/AutomateProjectInformation.html": {
    "href": "guidance/howto/CreateProject/AutomateProjectInformation.html",
    "title": "Automate Project Information | CodeFactory Guidance",
    "keywords": "Automate Project Information In this section we will be using CodeFactory to get information about a project, hosted within a Visual Studio solution, and displaying it. This guidiance is expected to accomplish the following: How to format a CodeFactory command How to consume data from the CodeFactory Framework How to create a user interface and display data from CodeFactory Assumptions We recommend completing the guidance for Creating a Project prior to starting on this guidance. Click the link below and complete the first part before continuing. Creating A Project Goals In this section we are going to create a project command that will display information about the project itself. The following information will be displayed about the project itself: Project Name Number of project files Number of project references CodeFactory Command Information CodeFactory commands are raised directly by Visual Studio through the CodeFactory Framework. Command Title All CodeFactory commands have a title that is displayed in Visual Studio context menus. The field commandTitle that is hosted within the target command class is where the title for the command is set. Command Description All CodeFactory commands have a description that is used on summary screens to explain what the command is used for. The field commandDescription that is hosted within the target command class is where the description is set. Enable Command Every command has an override for the method EnableCommandAsync and it provides the Datamodel for the target Solution Explorer element that it represents. The CodeFactory Framework calls this method to determine whether or not this command should be displayed to the user in Visual Studio. There are times that command should not be displayed. For example: If we want to add missing members to a class or, if no members are missing, we would not show the command. With this in mind, the enable command allows you to use the data in the data model to determine if a command should be enabled for usage. The return from this method is true or false. If set to true, the command will be displayed on the context menu. If set to false, it will not show up on the context menu and no further execution will be performed. Execute Command Once a command has been enabled and the user has selected the command from the context menu, CodeFactory will execute the command. CodeFactory will call the Overridden ExecuteCommandAsync implemented in your command class. Like with the enable command it will provide the current data for the target solution explorer element. This is where CodeFactory will execute your custom automation. Command Implementation In this section we will implement all the logic that will display the project information. This has been broken down in to sub-sections to provide greater clarity on each set of steps. Format the Command Before we begin the automation logic we need to format the command so it is ready for usage by staff. The following steps will be taken to format the command: Update the Command Title and Description First we need to set the title and the description of the command so they display correctly in Visual Studio. The following steps will be performed in the ProjectInformationCommand.cs code file: We update the command title to Show Project Information. From: private static readonly string commandTitle = \"Replace with command title to be displayed in context menu\"; To: private static readonly string commandTitle = \"Show Project Information\"; We update the command description to Displays basic information about the project. From: private static readonly string commandDescription = \"Replace with description of what this command does\"; To: private static readonly string commandDescription = \"Displays basic information about the project\"; Once updated should look like this. Setup then Enable Command Since we are displaying information about a project, there are no extended conditions to validate, we will just make sure we received a loaded data model from CodeFactory. CodeFactory already gives us a fully templated out method. So we will replace the TODO with our enable logic. The provided method is shown below: We will replace the TODO line with a check to make sure the data model loaded. When a data model is loaded is has a property to determine if the data model was loaded or if it could not be loaded due to errors. By default the method has a isEnabled variable aready created so we will check to the model is loaded and set isEnabled based on if the model is loaded. From: //TODO: Add logic to determine if this command is enabled. To: isEnabled = result.IsLoaded; Once the code updates are completed, it should look like this: Testing the Formatted Command Before we dive into the logic, lets go ahead and test to make sure our command formatting is correct. So we are going to debug our automation we have created so far. Click Start Debugging this will be the \"Play\" button icon on your toolbar with the \"Start\" label next to it. You will notice that will start a new instance of Visual Studio. This is by design. CodeFactory automation runs inside of Visual Studio so we debug it from another instance. From the What would you like to do? window, click \"Create a new project\" Or you can start the same process if you don't use the start up window. Click the File menu From the context menu select New From the sub-context menu select Project From the \"Create a new project\" dialog do the following: In the search box type Standard Select C# Class Library (.NET Standard) Click the Next button From the \"Configure your new project\" dialog do the following: In the Project name text box enter CodeFactoryTesting. Click Create button Once the project and solution have been created they will load. We will reuse this project and solution for all further testing as we complete the automation for this project. To test the CodeFactory command we do the following: Right click on the Project node in Solution Explorer. From the context menu at the bottom you will see the Show Project Information command. Testing complete we know the command is running. Close the debugger instance of Visual Studio. Gather Project Information Now that the project command has been formatted we are ready to begin the automation logic. We need to get the following information and prepare it to be displayed to the user. Project Name - The name of the project itself Number of References - The count of how many references are tied to this project Number of Files - The number of files that are hosted in this project. This logic will be hosted directly in the execute command. This gets called by the CodeFactory Framework as soon as the command is selected from the context menu by a developer using our automation. When we created the project command class it automatically added the ExecuteCommandAsync method. Which looks like this: The following steps will be taken to add the project information logic to the ExecuteCommandAsync Method. We will replace the TODO block with a bounds check to make sure we got a project model that was loaded. If the model is not loaded will use a Messagebox to display a message explaining what happened. From: //TODO: Add command logic To: if (!result.IsLoaded) { MessageBox.Show(\"Could not access the project information. Cannot display the project information\", \"No Model Data\", MessageBoxButton.OK, MessageBoxImage.Exclamation); return; } Updated code will look like this: After our bounds check, we will add the three variables that will be used to store the project information to be displayed. string projectName = null; int projectReferences = 0; int projectFiles = 0; Updated code will look like this: Will capture the project name from the returned data model by entering the following: projectName = result.Name; Updated code will look like this: Next we will need to get the project references that are assigned to the project. This is done through a CodeFactory API call. Most CodeFactory API calls that talk to Visual Studio are done using an async call. This improves Visual Studio performance by running the tasks in the background, when possible. We get the references and add them to a var parameter to hold the references. Then we will get the count of all references and add it to our projectReferences variable. var references = await result.GetProjectReferencesAsync(); projectReferences = references.Count; Updated code will look like this: The final data needed from the project is the number of files that are hosted by the project. Like with project references we need to make a CodeFactory API call to get the real time data for each file and folder that is hosted in the project. This API call can access just the project root level, or access all nested levels under folders. We are going to tell it to get all nested levels. Since there are multiple different data models that represent Visual Studio data. The data that is returned as an inherited data type of all Visual Studio data called a VsModel. The inherited base class tells you what type of model is being represented. You can then cast the model to the target type and use it. A call is made to get all children of the project and stored in a var named projectChildren. Then, using a where clause on the projectChildren, we select all models that are a document and store it in a var named Files. Finally we set our projectFiles variable with the count of the found files. var projectChildren = await result.GetChildrenAsync(true); var files = projectChildren.Where(m => m.ModelType == VisualStudioModelType.Document); projectFiles = files.Count(); Updated code will look like this: Build Visual Studio Dialog Now that we have the project data that we need, we will then focus on building a dialog to display this information in Visual Studio. From Solution Explorer we are going to do the following. Right click on the Dialog folder under the project folder From the context menu select Add From the sub-context menu select New Item... From the Add New Item dialog, do the following: Under Visual C# Items select CodeFactory Select Visual Studio User Control In the name Field, enter ProjectInformationUserControl.xaml Click Add Now that the user control has been created it will open the user control XAML file. You will see the default markup for the user control itself. It will look like this: Next we are going to set the window title and set the target size of the dialog. We do this by updating the markup for the window title. We also replace the Design height and width. We set the height to 175 pixels and the width to 400 pixels. WindowTitle=\"Project Information\" Height=\"175\" Width=\"400\"> The updated markup will look like this: After we have setup our dialog and given it a title, we are going to use a grid layout to format the placement of our data. Since we are working with 3 elements of data we will create a grid with 5 rows and a total of 3 columns. <Grid.ColumnDefinitions> <ColumnDefinition Width=\"20\"/> <ColumnDefinition Width=\"150\"/> <ColumnDefinition/> </Grid.ColumnDefinitions> <Grid.RowDefinitions> <RowDefinition Height=\"20\"/> <RowDefinition Height=\"30\"/> <RowDefinition Height=\"30\"/> <RowDefinition Height=\"30\"/> <RowDefinition /> </Grid.RowDefinitions> The updated markup will look like this: Once the layout has been setup, we will add label and text box controls for each piece of project data that is being added to the project. <Label Name=\"LabelProjectName\" Grid.Row=\"1\" Grid.Column=\"1\" Content=\"Project Name:\" HorizontalAlignment=\"Right\" Margin=\"0,0,5,0\"/> <TextBox Name=\"TextBoxProjectName\" Grid.Row=\"1\" Grid.Column=\"2\" Margin=\"5\" IsEnabled=\"False\"/> <Label Name=\"LabelProjectReferences\" Grid.Row=\"2\" Grid.Column=\"1\" Content=\"Project Reference Count:\" HorizontalAlignment=\"Right\" Margin=\"0,0,5,0\"/> <TextBox Name=\"TextBoxProjectReferences\" Grid.Row=\"2\" Grid.Column=\"2\" Margin=\"5\" Width=\"40\" HorizontalAlignment=\"Left\" IsEnabled=\"False\"/> <Label Name=\"LabelProjectFiles\" Grid.Row=\"3\" Grid.Column=\"1\" Content=\"Project File Count:\" HorizontalAlignment=\"Right\" Margin=\"0,0,5,0\"/> <TextBox Name=\"TextBoxProjectFiles\" Grid.Row=\"3\" Grid.Column=\"2\" Margin=\"5\" Width=\"40\" HorizontalAlignment=\"Left\" IsEnabled=\"False\"/> The updated markup will look like this: Next, we wire up the button and register a method to handle the Click event. <Button Name=\"ButtonOk\" Grid.Row=\"4\" Grid.Column=\"0\" Grid.ColumnSpan=\"3\" Margin=\"125,15\" Content=\"Ok\" Click=\"ButtonOk_OnClick\"/> Note in the IDE that when you enter the Click attribute it will prompt you to create a new method, let it create the method for you. The updated markup will look like this: The final layout of the user control will look like this: Now that the layout is complete we will access the code behind file for the user control and make some changes. To do this do the following: Click the expander next to the XAML document of the user control itself. Select the project file with the same name of the user control ending in .cs This will will open the code file for edit. After the code behind file has been opened, we are going update the OK button click event method to close the dialog itself. Those familar with WPF will know there is no close method for a user control. This close event is part of the CodeFactory framework and will inform Visual Studio to close the dialog window. The following code will be added to close the dialog when clicked: Before: throw new NotImplementedException(); After: this.Close(); The updated source code will look like this: The final step on the dialog is to be able to pass the project data to the user control. We will create a public facing method which will take in the three pieces of information and directly set each control individually. Those that are familar with WPF would probably used dependency properties. For this example we are keeping it simple for people that are not familar with WPF. The following method is added to the code behind to set the data. /// <summary> /// Sets the project information to be displayed in the dialog /// </summary> /// <param name=\"projectName\">The name of the project hosted in the solution.</param> /// <param name=\"fileCount\">The number of files hosted in the project.</param> /// <param name=\"referenceCount\">The number of references in the project.</param> public void SetProjectInformation(string projectName, int fileCount, int referenceCount) { this.TextBoxProjectName.Text = projectName; this.TextBoxProjectFiles.Text = fileCount.ToString(); this.TextBoxProjectReferences.Text = referenceCount.ToString(); } Create and Display Dialog Once we have created a dialog and formatted it. Next we will need to create an instance of the dialog user control. Then pass the data that has been collected on the project and display it. We navigate back to the ProjectInformationCommand code file. In the ExecuteCommandAsync method we are going to create an instance of the user control. When working with the user interface we have to make a CodeFactory API call to make the instance of the user control. Behind the covers, CodeFactory wraps the defined user control in a WPF dialog window used by Visual Studio. In order to access the user interface you have to use a Visual Studio Action. All commands have direct access to all Visual Studio Actions managed by CodeFactory via a property on the command base class. In the following we call the user interface actions and create a instance of our user control and return it to the var dialog. var dialog = await VisualStudioActions.UserInterfaceActions .CreateVsUserControlAsync<ProjectInformationUserControl>(); The updated code looks like the following: Once we have created an instance of dialog we will need to pass the project information to the dialog. We will call the public method we created and pass our project data to the dialog. dialog.SetProjectInformation(projectName,projectFiles,projectReferences); The updated code looks like the following: Now that our data has been set we are ready to display the dialog itself. Once again we will make a CodeFactory API call and display the dialog in Visual Studio. await VisualStudioActions.UserInterfaceActions.ShowDialogWindowAsync(dialog); The updated code looks like the following: Test Completed Command Now that the project information command has been completed, we will use the debugger to test the logic. Click Start Debugging (this will be the play button icon on your toolbar with star next to it). You will notice that this will start a new instance of Visual Studio. This is by design. CodeFactory automation runs inside of Visual Studio so we debug it from another instance. Once the debugger version of Visual Studio loads, do the following: Click File From the menu select Recent Projects and Solutions From the sub-menu select CodeFactoryTesting.sln This will load our testing solution. During the loading of the solution a number of services are loading. When in debugger mode this can be slow. You will know when your CodeFactory logic is loaded by seeing this message in the lower left hand corner of the window: Next, we execute the Project Information command and test our logic by doing the following: Right click on the project in the solution From the context menu click Show Project Infomation Visual Studio will then display the dialog with the information about the project. Click Ok to close the dialog Play with the project Make changes to the project itself, add code files. Maybe add a project reference and then rerun the command the dialog will show the updated information. Since this is in debug mode, you can go back to the hosting copy of Visual Studio and set break points. You can then step through the code and see how everything executes. Once you are done, close the debug version of Visual Studio. Deploying the Automation to Your Solutions Every time you build your project, the CodeFactory SDK calls an external executable called CFXPackager. This packages up your automation for using in solutions. In the bin folder of your project is a file with the name of your project with a .CFX file extension. Copy the CFX file into the solution folder of your target solution you want to use with automation and CodeFactory will load it whenever the solution opens. Return to Guidance This concludes the complete training for how to create a CodeFactory project. The link below will take you back to the main guidance page. CodeFactory Guidance Return To Create Project Guidance The link below will take you back to the Create Project guidance. Create Project Guidance"
  },
  "guidance/howto/CreateProject/CreateProject.html": {
    "href": "guidance/howto/CreateProject/CreateProject.html",
    "title": "Creating a Project | CodeFactory Guidance",
    "keywords": "Creating a Project The first step will be to create a project and register our first command. Background The following is important background information on CodeFatory itself. This will help you understand the default startup behavior the first time you create a CodeFactory project. Nuget CodeFactory was designed to load the target versions of the SDK libraries directly from Nuget. The way that this is accomplished is by adding direct project references to the target version hosted on nuget. With the legacy project system used to host .Net framework it does not automatically pull down these nuget packages when you load the project for the first time. So if any CodeFactory project items are added you will get a number of errors related to the libraries not being loaded. The Nuget packages will automatically be pulled down the first time you do a build of the project itself, these errors will then go away. CodeFactory Packager A CodeFactory commands project is the main execution point for all CodeFactory automation. This project will automatically execute a command line utility after the compile of the project has completed. The CFXPackager utility is responsible for building the CFX file that is used to run codefactory automation. If no commands are defined in the project this utiltity will output a error saying the package could not be built. This error will go away once the first command is added to the project. Walk through Steps The following is the walk through for creating the project and make sure you can successfully compile the code factory project. Start Visual Studio 2019 From the What would you like to do? window click Create a new project Or you can start the same process if you dont use the start up window. Click the File menu From the context menu select New From the sub context menu select Project From the Create a new project window do the following In the search box type CodeFactory From The list of projects select CodeFactory - Commands Library Click Next From the Configure you new project do the following In the project name box type DisplayProjectCommands Click Create Once the solution and project has been created you will see the project and default folder structure. I have expanded the Project folder to show you the sub folders. The following is a brief overview of the goal for each folder. Important note each explorer command has its own folder. The following structure is prescriptive only. You can create any folder structure you wish for your automation. The Project folder is where project commands are created and stored The Dialog folder is for placement of user interface dialogs you created. The Logic folder is where you add logic that can be reused across multiple project commands The Template folder is where you add T4 template that as used by project commands. Next we will add a solution explorer project command to the project. Do the following steps. Right click on the project folder in solution explorer From the context menu select Add From the sub context menu select New Item... From the Add New Item Dialog Window do the following. From the Visual C# Items select CodeFactory Select Solution Explorer - Project Command In the name box enter ProjectInformationCommand.cs Then click Add A Microsoft Visual Studio error box will appear. This error occurs because the CodeFactory SDK nuget packages have not been downloaded into the project yet. Click Ok to continue. The command code file will display in the IDE and a number of syntax errors will appear. This is occuring since we have not pulled down the SDK through nuget yet. We will then build the solution this will trigger the pull of the nuget packages. Do the following. From the top navigation bar click on Build From the context menu click Build Solution Once the build has completed it will have downloaded and installed the nuget packages into the project. You will now see the CodeFactorySDK reference in the project. You will also notice there are no longer any errors in the project command. The project creation is complete. Next Step - Automating Project Information In the next section we will build the logic to read information about a project and display it to the user in Visual Studio. Automate Project Information Return To Create Project Guidance The link below will take you back to the create project guidance. Create Project Guidance"
  },
  "guidance/howto/CreateProject/Overview.html": {
    "href": "guidance/howto/CreateProject/Overview.html",
    "title": "Creating a CodeFactory Project | CodeFactory Guidance",
    "keywords": "Creating a CodeFactory Project This section will explains how to use the CodeFactory SDK. In this walk-through we will focus on the following topics: How to create a CodeFactory project Understanding how NuGet packages are loaded for CodeFactory How to create a CodeFactory command How to format a CodeFactory command How to consume data from the CodeFactory Framework How to create a user interface and display data using CodeFactory Prequisites: Please confirm the following prior to getting started with this guidance: You are using Visual Studio 2019 on Windows (Visual Studio on Mac is not currently supported). You have installed CodeFactory for Visual Studio and have activated CodeFactory with a license key. You have installed the CodeFactory SDK. This walk-through is grouped into logical exercises which address each of the guidance topics listed above. Part One - Creating a Project In the first part of the guidance, we will create a project and get it ready to build automation. This will focus on the following: How to create a CodeFactory project Understanding how NuGet packages are loaded for CodeFactory How to create a CodeFactory command Create a CodeFactory Project Part Two - Automate Project Information In the second part, we will gather & display information about a Visual Studio project for the Visual Studio user. This will focus on the following: How to format a CodeFactory command How to consume data from the CodeFactory Framework How to create a user interface and display data from CodeFactory Automate Project Information Guidance Once you have completed this set of lessons you can return to guidance by clicking the link below. CodeFactory Guidance"
  },
  "guidance/howto/Install/CodeFactoryForVisualStudio.html": {
    "href": "guidance/howto/Install/CodeFactoryForVisualStudio.html",
    "title": "CodeFactory Install and Setup | CodeFactory Guidance",
    "keywords": "CodeFactory Install and Setup Use the following steps to install the CodeFactory Runtime Visual Studio Extension: Step 1: Download the CodeFactory for Visual Studio Runtime Get the latest release of the CodeFactory Runtime installer from here . Step 2: Execute the VSIX Installer Simply run the VSIX installer that was downloaded in Step 1 on the same machine that your copy of Visual Studio is installed on. There is also a video tutorial that guides the install process here Step 3: License Key Activation Once the VSIX has installed CodeFactory Runtime, launch Visual Studio 2019, and follow these steps to add your license key (which was included in the email confirmation). From Visual Studio 2019, click the Extensions menu, select CodeFactory > License Information From the [cF] License Information screen, click “Activate License” Copy the license key that was included in your email receipt/confirmation and “Paste From Clipboard” as shown below. Once the license key is pasted/visible in the Enter License text box click “Activate License”. From the [cF] License Information screen you should now see your license information displayed. Click “Close” and your CodeFactory license is now activated. Install Codefactory SDK Once you have completed the setup of CodeFactory RunTime, the next step is to install the CodeFactory SDK. CodeFactory SDK Install Instructions Guidance Once you have completed the setup of CodeFactory you can return to guidance here. CodeFactory Guidance"
  },
  "guidance/howto/Install/CodeFactorySDK.html": {
    "href": "guidance/howto/Install/CodeFactorySDK.html",
    "title": "Install CodeFactory SDK | CodeFactory Guidance",
    "keywords": "Install CodeFactory SDK This section will provide guidance for installing the SDK that supports CodeFactory. If you have not already installed CodeFactory into Visual Studio please follow the instructions provided here before proceeding with the SDK setup. Install CodeFactory for Visual Studio Step 1: Download the CodeFactory SDK Get the latest release of the CodeFactory SDK installer here: CodeFactory SDK Installer Under SDK Release you will download the VSIX file. The file will be named CodeFactorySDK(TargetVersion).vsix Step 2: Execute the VSIX Installer Please ensure all instances of Visual Studio have been closed prior to double-clicking the VSIX file from File Explorer, this will run the VSIX install. An important note since utilities are installed directly into the directories where Visual Studio is hosted this will require to \"run with administrator\" privilage. You will be prompted to accept the installation to your machine. Once the install is complete you are ready to start creating or updating CodeFactory projects. Guidance Once you have completed the setup of CodeFactory SDK you can return to guidance here. CodeFactory Guidance"
  },
  "guidance/howto/Overview.html": {
    "href": "guidance/howto/Overview.html",
    "title": "CodeFactory Guidance | CodeFactory Guidance",
    "keywords": "CodeFactory Guidance In the guidance section you will find walk-through tutorials on how to use different aspects of the CodeFactory environment. Installation and Configuration The following will help with installation and configuration of CodeFactory Installing CodeFactory for Visual Studio This will provide step-by-step instructions for installing CodeFactory itself and loading your license key. Install CodeFactory for Visual Studio Installing CodeFactory SDK This will provide step-by-step instruction for installing the CodeFactory SDK. Install CodeFactory SDK SDK Examples The following will provide guidance on how to setup and author your own automation using CodeFactory Creating a CodeFactory Project Guidance for creating a new project and displaying the name of a hosted project. This will focus on the following: How to create a CodeFactory project Understanding how NuGet packages are loaded for CodeFactory How to create a CodeFactory command How to format a CodeFactory command How to consume data from the CodeFactory Framework How to create a user interface and display data from CodeFactory Create a CodeFactory Project ASP.Net Core Automation Guidance and walk-through for automation that supports a ASP.Net core web project. This will focus on the following: Usage of project commands Usage of project references Usage of project folders Usage of C# document commands Usage of meta data from C# models Creation of code files Formatting of source code Injection of source code within documents Replacement of source code within documents Dependency Injection Management at a Project Level Auto-implementation of interface members on implementing classes Bounds checking logic automatically added to generated methods Auto-injection of logging for created interface members if Microsoft.Extensions.Logging is referenced at the project level CodeFactory Overview This link will take you to the overview of the CodeFactory platform. CodeFactory Overview"
  },
  "guidance/intro.html": {
    "href": "guidance/intro.html",
    "title": "What is CodeFactory? | CodeFactory Guidance",
    "keywords": "What is CodeFactory? CodeFactory is real-time software delivery tool that runs natively inside of Visual Studio. The focus of CodeFactory is to increase the delivery velocity of building new applications and/or uplift/refactor projects to other technologies. Automation of Construction Delivery Patterns One of the core features of CodeFactory is its ability to use existing application source code as a data model. This is similar in concept to ORM mapping based tools. This allows for the consistent implementation of development patterns which can then auto-generate common application code, which developers would otherwise have to build by hand. The following common use case scenarios are good examples of this concept, although many other scenarios are feasible: Adding/Creating bounds checking within methods Implementation of exception handling logic Implementation of standard logging Automation of dependency injection Auto-creation of different application layers, based on common data models, which can now be identified directly from application source code Auto-generation of data access layers, based on different technologies, which fit the needs of a target delivery pattern Auto-generation of validation logic based on application source code data Auto-generation and logic mapping between service technologies and consumers Automation of Technology Transformation Due to the way in which the CodeFactory SDK was designed - the tooling is very helpful in transforming existing functionality of an application to a new technology implementation. The following are common use case scenarios for technology transformation, but like the Construction Delivery Patterns described above, the examples are not the only scenarios for usage. Read ORM-based data classes and transform into POCO's or to other ORM based implementations Read data classes and generate interface definitions for all classes Read markup languages and use adapters to transform markup from one implementation into another (Example WebForms to Blazor) Read markup languages and update UI implementation frameworks from one implementation to another (Example Modern UI to BootStrap) Lift and shift of application logic from one platform to another (Example mapping logic from .NET Framework to .NET Standard) Migration Mapping of logic from one system to another (Example using UI dialogs to select where logic comes from and where it belongs in a new system) Designed for a Variety of Delivery Approaches CodeFactory directly integrates into the Solution Explorer within Visual Studio. This provides flexibility to the architecture and delivery teams as to when to utilize automation and how that automation should be triggered. The following are a few examples, much like the others above, these are not the only approaches that can be taken. Contract-Driven Approach Interfaces are defined and automation triggers when interfaces need to be implemented. Allowing for a interface based design of the system and the core shell of the entire delivery driven by interface implementations. UI-Driven Approach User Interface dialogs are defined and triggered as a part of an automation command and questions are asked which generates the implementation of new or uplift of application logic. Event-Driven Approach Changes in markup files or .NET application code files like C# will trigger the option to execute automation logic to complete the implementation of logic. Rebuild Approach Logic is run which will rebuild the definition of a target artifact. This is a common approach with ORM based tools. Hybrid Approach This is the most common use case, which some combination of the approaches lsited above to meet a development teams specific delivery needs. Zero-Touch Delivery Tool CodeFactory runs inside of the Visual Studio IDE itself, and behaves like a behind-the-scenes compiler. CodeFactory is a design-time tool and has no application runtime capabilities or dependencies. This means there are no application libraries or technologies that have to be included inside the application you are delivering. Any artifacts that are generated by CodeFactory appear to be standard developer hand-written code. Designed to Build Team-Customized Delivery CodeFactory is a team delivery tool, which means there is no one-size-fits-all delivery process. Its a SDK style platform that simplifies the design of automation to be leveraged by delivery teams. CodeFactory releases a standard set of automation libraries fully implemented. The goal of these libraries is to provide standard guidance scenarios. Many teams will want to extend and modify the guidance to match their own design preferences, which is exactly what the CodeFactory SDK is designed for. The following are the core capabilities of CodeFactory: Solution and Project Management Direct access to the solution and project system hosted inside of Visual Studio. This will include access and partial management of the following items: Solutions Solution Folders Projects Project Folders Project Documents C# Source Code Files Document Management Direct access to any document that is hosted within the solution, which includes the following: Read all content from any document within the solution Replace any/all content within a document Add/remove/replace content at target locations within a document Add new documents Remove documents C# Source Code Model Generation CodeFactory builds real-time data models of C# code files. These models provide access to the following information: Using statements Namespace definitions Attributes Classes Interfaces Structures Delegates Fields Methods Properties Events Type definitions Access to the body of classes, interfaces, structures Access to the body of methods, properties, events Source code management that includes replace, add before, add after, delete on all member objects Source code management that includes replace, add before, add after, delete, beginning, end of all classes,structures, interfaces Source Formatting CodeFactory provides support for formatting of source code regardless of target langauges, including the following: T4 integration to support the use of T4 formatting files to emit the target source code to be generated Source formatter an internal CodeFactory formatter which provides granular source format editing User Interface Management CodeFactory integrates natively into the Visual Studio IDE, allowing developers to build their own custom dialog windows which display as native windows inside of Visual Studio. Build Using .Net Technologies for Fast Adoption CodeFactory was designed to author automation using the C# programming language. All of CodeFactory technologies are written using .NET Framework libraries. (Note: This is a current limitation of the Visual Studio development environment. As Microsoft provide .NET Core integration into Visual Studio, CodeFactory will update at that time.) CodeFactory SDK provides a common set of tools for delivery teams to quickly extend and author their own automation for application delivery."
  },
  "guidance/Introduction/Commands/Overview.html": {
    "href": "guidance/Introduction/Commands/Overview.html",
    "title": "CodeFactory Commands | CodeFactory Guidance",
    "keywords": "CodeFactory Commands When working with CodeFactory you always start with commands. Commands are the trigger point where all CodeFactory functionality originates. Currently all commands are triggered from context menus on individual nodes within Solution Explorer. Each command is comprised of two methods which are raised from internal events that occur within Visual Studio. These events are trigged when a selected Solution Explorer's item content menu is opened. The following describes each of the two methods, their purpose and the different types of commands that are supported in CodeFactory. Command Result Whenever a command is executed, a real time data model is generated based on the type of Visual Studio object that has been selected. The data model is instantly regenerated behind-the-scenes each time the target command is executed. Enable Command When a command is first loaded, it sends the command result to the enable method on the command. This method is called to allow the author of the command to determine whether the command should be visible or hidden to the automation user for use. This feature exists in order to allow automation authors to control execution of automation by hiding or showing commands on the context menu as they desire. This is controlled by simply returning a true or false value to determine if the command should be accessible. If enabled is true, the command will appear inside the context menu. The developer in Visual Studio can then trigger the command to execute by selecting the context menu item. Execute Command Once the developer selects a command to be executed, Visual Studio will run the execute method of the command itself. Like before, a real time data model is instantly passed to the execute method. This is when the automation process starts, and whatever functionality has been authored, will be executed at this time. Solution Explorer Commands CodeFactory current supports the trigger of commands from the Solution Explorer window within Visual Studio. The following are the supported Solution Explorer nodes that can interact with CodeFactory automation commands: Solution Command - Generates a Solution data model SolutionFolder Command - Generates a SolutionFolder data model SolutionDocument Command - Generates a SolutionDocument data model Project Command - Generates a Project data model ProjectFolder - Generates a ProjectFolder data model Document Command - Generates a Document data model C# Document Command - Generates a CSharpSource data model Overview This link takes you back to the CodeFactory Overview CodeFactory Overview"
  },
  "guidance/Introduction/DataModels/Overview.html": {
    "href": "guidance/Introduction/DataModels/Overview.html",
    "title": "CodeFactory Data Models | CodeFactory Guidance",
    "keywords": "CodeFactory Data Models The primary strength of CodeFactory is its ability to generate real time data models directly from your project/solution artifacts within the Visual Studio IDE. This ability makes it possible to do design-time automation when delivering software. In this section we will provide a brief overview of the data models that are generated dynamically by the CodeFactory platform. These data models are used throughout the automation process. Data Models All data models are \"plain old CLR objects\" or POCO's for short. Each data model is implemented as an immutable data class. This approach is used since a change to the underlying data model requires a complete regeneration of the data model from the Visual Studio environment to make sure you have the latest version of all data. For example, making a change to a C# class object would force CodeFactory to regenerate a data model of that file/class object. Data model generation is either triggered during the execution of a new automation process, or from various CodeFactory API calls that will request new copies of data models. Solution Explorer Models (Project System) The following models are directly generated off the legacy and new project systems that are hosted by Visual Studio. The overview of each data model is designed to provide an overview of capabilties. The examples here are not complete and only reflect partial functionality for the purpose of explanation. Please see our help docs for the full description of each data model. Solution Data model that represents the loaded solution. This provides the location of the solution as well as access to the projects within the solution. Solution Folder Data model that represents a virtual folder that is at scope of the solution level. This provides acess to the name of the folder and the children objects which are hosted within this folder. Project Data model that represents a loaded project that is managed in the solution. This provides access to the project location and name, and access to all children objects hosted in the project. Project Reference Data model that represents a reference to a project hosted within the solution. This provides the name of the reference and the target artifact that is being referenced. Project Folder Project folder model represents a folder under a target project. This will contain the path and name of the folder and the list of child objects which are managed under this project folder. Document Document model represents a file which is hosted within a project, project folder, or solution folder. This will contain the path and the name of the file, as well as access to the full contents of the document itself. C# Source Document C# Source Document provides project system access, as well as full access to the C# source code which is hosted within the document itself. C# Language Models - (Source Code) CodeFactory has access to the C# language compiler and can dynamically generate data models that represent the C#-based source code. CodeFactory provides direct access all the way down to member and type level data. In addition, CodeFactory will provide direct access to the raw source code at the target object level. The following data models are auto-generated whenever accessing source code files or directly referenced assemblies. The overview of each data model is designed to provide an example of capabilties and does not list every single data element or function. Please see our help docs for the full description of each data model. Source Code The Source Code model provides access to all elements that were compiled from the source code document. This includes the following: Namespaces Using Statements Classes Interfaces Structures Using Statement Using Statement model provides information on targeted namespaces to use in the code base. This includes the following: Namespace Alias Namespace Statement Namespace model provides the target namespace that other C# code elements are contained in. Attribute Attribute provides a data model of the type of attribute and parameters which have been assigned to the attribute. This includes the following: Name Namespace Named Parameters Constructor Parameters Attribute Parameter Data model that provides the data for a target parameter on an attribute. This includes the following: Name (Optional) Parameter values Attribute Parameter Value Data model that provides a target value that is assigned to an attribute parameter. Enum Enum data model provides the definition of an enumeration and the target values of the enumeration. Class The Class data model provides data on a target class hosted in source code. This will include the following: Attributes Name Namespace Security Scope Keywords Inheritence (Base class and Interfaces) Members (Events, Fields, Methods, Properties) Interface The Interface data model provides data on the target interface definition in source code. This will include the following: Attributes Name Namespace Security Scope Keywords Inheritence (Interfaces) Members (Events, Methods, Properties) Structure The Structure data model provides data on the target structure definition in source code. This will include the following: Attributes Name Namespace Security Scope Keywords Inheritence (Interfaces) Members (Events, Fields, Methods, Properties) Delegate The Delegate model provides data on the definition of a delegate in source code. This will include the following: Name Namespace Parameters Return type Event The Event data model provides data on the definition of an event in source code. This will include the following: Attributes Name Type Security Scope Keywords EventHandlerMethod Definition Field The Field data model provides data on the definition of a field in source code. This will include the following: Attributes Name Type Security Scope Keywords Assigned value Method The Method data model provides data on the definition of a method in source code. This will include the following: Attributes Name Security Scope Keywords Parameters Return Type Method Type Property The Property data model provides data on the definition of a property in source code. This will include the following: Attributes Name Type Property Security Keywords Has Get Get Security Has Set Set Security Parameter The Parameter data model provides data on the definition of a parameter in a method or a delegate. This will include the following: Attributes Name Keywords Default value Type The Type data model provides information about a type that is used in all the above source code definitions. This will include the following: Name Namespace IsValueType IsTuple IsEnum IsArray IsClass IsInterface IsStructure Overview This link takes you back to the CodeFactory Overview CodeFactory Overview"
  },
  "guidance/Introduction/Environment/Overview.html": {
    "href": "guidance/Introduction/Environment/Overview.html",
    "title": "CodeFactory Ecosystem | CodeFactory Guidance",
    "keywords": "CodeFactory Ecosystem CodeFactory is a collection of automation tools which are designed to be used in a native IDE(Integrated-Development-Environment). The decision to integrate into the IDE is based on the fact that CodeFactory is a design-time tool - meaning that no extraneous code artifacts, libraries or runtimes are required to be included with your final solution codebase. In the future, CodeFactory will support more than one IDE, which is why CodeFactory products are named after the platform it's hosted on (i.e. CodeFactory for Visual Studio). In this section we will focus on how CodeFactory integrates into the IDE. CodeFactory for Visual Studio CodeFactory for Visual Studio is an extension of the Visual Studio IDE. CodeFactory was designed to run as an internal service inside Visual Studio, just like Razor, C#, or any number of other services that are part of Visual Studio. This means that once installed, CodeFactory is always 'on' and will automatically load automation commands for use whenever a solution is loaded. CFX - CodeFactory Extension A CodeFactory automation project is saved as complete package within a single file called a CodeFactory Extension (*.cfx). This uses a similar approach as Word uses with DOCX or Excel with XSLX files. All it takes is to copy a CodeFactory Extension, or CFX, file into the root of the your solutions folder. Once the solution is opened in Visual Studio it will automatically load the automation and make it avaiable for use. CodeFactory SDK All automation for CodeFactory was designed and delivered using the CodeFactory SDK. The SDK was designed to provide straightforward access to existing automation and authoring of custom automation. The SDK uses targeted .NET Framework projects that hosts all the supporting libraries that make up the CodeFactory capabilities. The SDK is responsible for packaging the automation and generating the final CFX Files which are used with solutions. Overview This link takes you back to the CodeFactory Overview CodeFactory Overview"
  },
  "guidance/Introduction/Formatting/Overview.html": {
    "href": "guidance/Introduction/Formatting/Overview.html",
    "title": "Source Formatting | CodeFactory Guidance",
    "keywords": "Source Formatting One of the core strengths of CodeFactory is how it manages injection of source code. CodeFactory focuses on taking advantage of the capbilities of the IDE that it integrates into. This allows for flexibility in managing the creation and formatting of source code. This seciton we will focus on the goals for formatting and how we accomplish those goals. Language Agnostic Formatting One of the core goals of CodeFactory is to allow for the usage of data models to define any type of output source code. With this in mind formatting is agnostic by design. You can read in data models and output any target language or markup of your choice. The SDK is designed to allow for this flexibility. In addition, additional extension libraries have been created to assist in formatting and generation of differnt language outputs. Document Driven Updates The CodeFactory platform controls removal, replacement, and injection of source code changes through a document driven approach. This provides for the greatest flexibility with source code management. Keep in mind that CodeFactory runs as part of Visual Studio itself. If a delivery team does not like the provided source formatting tools they are welcome to use any tooling they wish. If the tooling can be called as an external executable or accessed from c# in the .net framework, it can be used with CodeFactory. Model Based Meta Data CodeFactory focuses on the auto generation of model based data to be used with software factories in the generation of additional logic. Out of the box CodeFactory provides the following data model categories to be used with source formatting. Project Models Project models build up meta data about the solution, project, folders and documents in Visual Studio. These models are directly accessed and in som cases used to drive source formatting. Source Code Models - (C# Language) Source models generate full information from the source code file through all the elements down to the member level in C#. This model data allows developers to use that data and output into any target langauge or format that fits the need of the problem they are solving. External Examples Used With Source Formatting As mentioned above, since CodeFactory runs within the Visual Studio process. This allows use to access any framework or third party libraries that also do model generation and use them within the scope of CodeFactory. The following are two examples we have already used to solve automation problems. HTML Agility Pack As part of our WebForms to Blazor project we needed a way to load up HTML into a data model and build markup transformations based on the provided html data. We used the HTML agility pack to read in the HTML data as POCO data classes. From there were were able to use an adapter pattern to read and transform into Blazor based markup. Using CodeFactories built in tools to format the source code then inject back into documents. .Net Framework ADO.NET We needed the ability to read database schema from a database in order to generate and update entities as well as repositories and service classes. To do this we used the built in functionality of ADO that is included in the .net framework to read the schema and auto generate POCO models to be used in automation. CodeFactory Formatters Out of the box CodeFactory has two different source code formatting tools. Both tools are designed to output the formatted source code to be used with the document driven placement approach used in CodeFactory. Both formatting solutions are not tied to any target language or markup format. T4 Source Factory - Provided Formatter The T4 formatting tool that is provided with Visual Studio is fully supported with CodeFactory. Target extended logic is include to allow you to inject any data you want into the T4 template. The T4 template itself is compiled and called in compiled form. Once data is passed into the T4 template the fully formatted output of the T4 is returned as a string. This allows for the author to control where the formatted source is injected into the target document. Source Formatter - Provided Formatter The CodeFactory SDK also has a SourceFormatter class. The source formatter provides extenstions to the existing string builder object. This will allow for the controlling of identation in the content as its added to the formatter. It also allows for indendentation a target number of levels deep to full content that is provided to it. This will also be further extended in time to add additional capabilities. Overview This link takes you back to the CodeFactory Overview CodeFactory Overview"
  },
  "guidance/Introduction/Overview.html": {
    "href": "guidance/Introduction/Overview.html",
    "title": "Overview of CodeFactory | CodeFactory Guidance",
    "keywords": "Overview of CodeFactory This describes the different capabilities and components of the CodeFactory ecosystem. Each section will provide a clear overview of a targeted set of capabilites, as well as guidance. This guide is designed to be read either top to bottom or jump to whichever topic interests you. CodeFactory for VisualStudio Review of the CodeFactory environment and how it integrates with Visual Studio. CodeFactory Environment Data Models Review of the core data models which make up the CodeFactory Platform, describing how data is captured and presented in CodeFactory. CodeFactory Data Models Commands Review of how CodeFactory automation is triggered and consumed. CodeFactory Commands Visual Studio Actions Review of the core API which provides access to Visual Studio. CodeFactory Visual Studio Actions Source Formatting Review of different approaches which are used for formatting generated source code. CodeFactory Source Formatting User Interfaces Review of how user interfaces can be created and used within the Visual Studio environment. CodeFactory User Interface CodeFactory Guidance A variety of \"walk-through\" scenario-driven guidance is provided to help you get started and understand how to use the CodeFactory SDK. CodeFactory Guidance"
  },
  "guidance/Introduction/UI/Overview.html": {
    "href": "guidance/Introduction/UI/Overview.html",
    "title": "User Interface | CodeFactory Guidance",
    "keywords": "User Interface Through out the overview documentation we talk about the fact that CodeFactory is integrated into the target IDE where the product is used. This design approach allows us to maximize the capabilities of delivery automation. Each user interface environent for CodeFactory will be based on the target IDE in which it supports. This is the one part of CodeFactory that many not be reusable across different IDE's. User Interface for Visual Studio CodeFactory out of the box has native dialog window support for Visual Studio. The user interface environment is based on Windows Presentation Foundation or (WPF). This is the native UI framework that is supported by Visual Studio. CodeFactory user interface control is designed to plug directly into a Visual Studio window. The CodeFactory control provides minor extensions to the existing user control object that is part of WPF. Any developer that is familar with XAML based user screens will be able to easily author and creator a dialog window to be displayed in Visual Studio. Overview This link takes you back to the CodeFactory Overview CodeFactory Overview"
  },
  "guidance/Introduction/VsActions/Overview.html": {
    "href": "guidance/Introduction/VsActions/Overview.html",
    "title": "Actions | CodeFactory Guidance",
    "keywords": "Actions Actions are a series of API calls that perform IDE specific functionality. CodeFactory is reponsible for the heavy lifting of all integration with the IDE. These calls are used during the automation process as well as the final output back into the IDE itself. Visual Studio Actions The core actions within CodeFactory today directly interop with Visual Studio itself. Visual Studio actions are accessible at two different levels within the SDK. CodeFactory data models have direct links to Visual Studio actions that directly impact the target data model. At the command level there is direct access to all Visual Studio actions by calling the property VisualStudioActions. The following provides a high level summary of the actions that are avaliable at diffrent levels of the CodeFactory platform. Project System Actions The following are the target actions that are avaliable at the project system level of Visual Studio. Solution Actions These actions are directly executed at the solution level. GetSolutionAsync - Loads the current solution data model CreateSolutionFolderAsync - Creates a new solution folder GetChildrenAsync - Gets all Visual Studio models hosted under the solution GetProjectsAsync - Gets all project data models hosted by the solution Solution Folder Actions These actions are directly executed at the solution folder level. AddDocumentAsync - Creates a new document data model and assigns it to the solution folder AddExitingDocumentAsync - Adds an existing document to the target solution folder AddSolutionFolder - Adds a solution folder under the current solution folder GetChildrenAsync - Gets all Visul Studio models that are children of this solution folder GetParentAsync - Gets the parent Visual Studio model for this solution folder Remove - Removes the solution folder from the solution Project Actions These actions are directly executed at the project level. AddDocumentAsync - Creates a new document and assigns it to the root of the project AddExistingDocumentAsync - Adds an executing document to the root of the project AddProjectFolderAsync - Creates a new project folder under the root of the project GetChildrenAsync - Gets the Visual Studio models that are children of the project GetParentAsync - Gets the Visual Studio model that is the parent to this project GetReferencedProjects - Gets the project data models that are referenced by this project GetReferencesAsync - Genereates the full list of Project Reference data models that support this project Project Reference Actions These actions are directly executed at the project reference level. GetReferencedProjectAsync - Loads the Project data model the project reference is from Project Folder Actions These actions are directly executed at the project folder level. AddDocumentAsync - Creates a new document and adds it to the project folder AddExistingDocumentAsync - Adds an existing document already in the project folder AddProjectFolderAsync - Adds a new project folder that is a child of the current project folder DeleteAsync - Deletes the project folder and all files under the project folder GetCSharpNamespaceAsync - Generates the namespace definition from the project root to the project folder location GetChildrenAsync - Gets all Visual Studio models that are children of this project folder GetParentAsync - Get the parent Visual Studio model of this project folder RemoveAsync - Removes the project folder from the project but does not remove it from the file system Document Actions These actions are directly exected at the document level. AddContentAsync - Adds content to a document starting at a target line number and character position AddContentToBeginningAsync - Adds content at the beginning of the document AddContentToEndAsync - Adds content at the end of the document DeleteAsync - Deletes the document from the hosting solution or project and from the file system GetCSharpSourceModelAsync - If the document is a C# document will load the C# sourcecode model from the document GetChildrenAsync - Builds document models for all documents that are children of this document GetDocumentContentAsContentAsync - Will return the content of the document as a content data model GetDocumentContentAsStringAsync - Will return the content of the document as a string GetParentAsync - Will get the parent Visual Studio model for this document RemoveAsync - Will remove the document from the hosting solution or project but will keep it on the file system RemoveContentAsync - Will remove all content from the document Source Actions These actions are directly executed at the C# document level LoadDocumentFromSourceAsync - Loads a document model from the c# source document User model Actions These actions are directly related to creating and executed customer user models that are hosted in Visual Studio. CreateVsUserControlAsync - Generic method that creates a new instance of a visual studio user control ShowDialogWindowAsync - Displays the target user control in the Visual Studio IDE C# Actions The following actions are directly tied to the C# data models. The implementation of these actions are specific to IDE, but do not change from one IDE to another. Container Actions Container actions focus on actions that occur at the model, model, and structure model levels. Class Actions The following actions occur at the class model level. AddAfterAsync - Add code syntax after the model definition AddBeforeAsync - Add code syntax before the model definition AddToBeginningAsync - Add code syntax to beginning of the body of the model definition AddToEndAsync - Add code syntax to the end of the body of the model definition DeleteAsync - Delete the model definition GetBodySourceLocationAsync - Get the document coordinates where the body starts and ends GetBodySyntaxAsync - Get the raw syntax within the body GetSourceLocationAsync - Get the full model definitions document coordiants where it starts and ends ReplaceAsync - Replaces the entire definition of the model with the provided syntax Interface Actions The following actions occur at the interface model level. AddAfterAsync - Add code syntax after the model definition AddBeforeAsync - Add code syntax before the model definition AddToBeginningAsync - Add code syntax to beginning of the body of the model definition AddToEndAsync - Add code syntax to the end of the body of the model definition DeleteAsync - Delete the model definition GetBodySourceLocationAsync - Get the document coordinates where the body starts and ends GetBodySyntaxAsync - Get the raw syntax within the body GetSourceLocationAsync - Get the full model definitions document coordiants where it starts and ends ReplaceAsync - Replaces the entire definition of the model with the provided syntax Structure Actions The following actions occur at the structure model level. AddAfterAsync - Add code syntax after the model definition AddBeforeAsync - Add code syntax before the model definition AddToBeginningAsync - Add code syntax to beginning of the body of the model definition AddToEndAsync - Add code syntax to the end of the body of the model definition DeleteAsync - Delete the model definition GetBodySourceLocationAsync - Get the document coordinates where the body starts and ends GetBodySyntaxAsync - Get the raw syntax within the body GetSourceLocationAsync - Get the full model definitions document coordiants where it starts and ends ReplaceAsync - Replaces the entire definition of the model with the provided syntax Member Actions Member actions focus on actions that occur at the event, field, method, property levels. Event Actions The following actions occur at the event model level. AddAfterAsync - Adds the syntax after the model definition AddBeforeAsync - Adds the syntax before the model defintion DeleteAsync - Deletes the model GetSourceLocationAsync - Gets the document coordinates where the model starts and ends ReplaceAsync - Replaces the model with the provided syntax Field Actions The following actions occur at the field model level. AddAfterAsync - Adds the syntax after the model definition AddBeforeAsync - Adds the syntax before the model defintion DeleteAsync - Deletes the model GetSourceLocationAsync - Gets the document coordinates where the model starts and ends ReplaceAsync - Replaces the model with the provided syntax Method Actions The following actions occur at the method model level. AddAfterAsync - Adds the syntax after the model definition AddBeforeAsync - Adds the syntax before the model defintion DeleteAsync - Deletes the model GetBodySyntaxAsync - Gets the syntax from the body of the model. GetSourceLocationAsync - Gets the document coordinates where the model starts and ends ReplaceAsync - Replaces the model with the provided syntax Property Actions The following actions occur at the property model level. AddAfterAsync - Adds the syntax after the model definition AddBeforeAsync - Adds the syntax before the model defintion DeleteAsync - Deletes the model GetSourceLocationAsync - Gets the document coordinates where the model starts and ends LoadGetBodySyntaxAsync - Gets the body syntax from the properties get statement LoadSetBodySyntaxAsync - Gets the body syntax from the properties set statement ReplaceAsync - Replaces the model with the provided syntax Other C# Models with Actions The following are other C# models that also have direct actions. Using Statement Actions The following actions apply to the using statement model level. AddAfterAsync - Adds the syntax after the model definition AddBeforeAsync - Adds the syntax before the model defintion DeleteAsync - Deletes the model GetSourceLocationAsync - Gets the document coordinates where the model starts and ends ReplaceAsync - Replaces the model with the provided syntax Attribute Actions The following actions apply to the attribute model level. AddAfterAsync - Adds the syntax after the model definition AddBeforeAsync - Adds the syntax before the model defintion DeleteAsync - Deletes the model GetSourceLocationAsync - Gets the document coordinates where the model starts and ends ReplaceAsync - Replaces the model with the provided syntax Overview This link takes you back to the CodeFactory Overview CodeFactory Overview"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to CodeFactory | CodeFactory Guidance",
    "keywords": "Welcome to CodeFactory This web site provides guidance and API documentaion in support of CodeFactory. Guidance This will provide background information about CodeFactory itself. In addition, it will provide a series of overview and how to guidance for CodeFactory. CodeFactory Guidance SDK Documentation The SDK documentation will provide you access to the API level documentation that supports CodeFactory. SDK Documentation"
  }
}